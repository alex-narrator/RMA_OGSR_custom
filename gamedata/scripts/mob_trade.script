----------------------------------------------------------------------------------------------------
-- Mob trade
----------------------------------------------------------------------------------------------------
-- Разработчик: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------

class "mob_trade"

function mob_trade:__init(obj, storage)
	self.object = obj
	self.st = storage
end

function mob_trade:reset_scheme()
end

function mob_trade:update(delta)
end

function mob_trade:storage_trade_section()
	local trade = db.storage[self.object:id()].trade
	if not trade then
		trade = {}
		db.storage[self.object:id()].trade = trade
	end
	return trade
end

function mob_trade:start_trade()
	--log3("~_bp: mob_trade: start_trade")

	local trade = self:storage_trade_section()
	trade.trading = true
	trade.exchanged = false

	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return
	end
end

function mob_trade:end_trade()
	--log3("~_bp: mob_trade: end_trade")

	local trade = self:storage_trade_section()
	trade.trading = false

	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return
	end
end

function mob_trade:on_trade(target)
	if target:clsid() ~= clsid.script_trader then
	return end
	--log3("~_bp: mob_trade: on_trade")

	local trade = self:storage_trade_section()
	trade.exchanged = true

	xr_logic.try_switch_to_another_section(self.object, self.st, db.actor)
end

function mob_trade:on_actor_menu_show(mode, target)
	if mode == "trade" and target:is_trader() then
		self:start_trade()
	end
end

function mob_trade:on_actor_menu_hide(mode, target)
	if mode == "trade" and target:is_trader() then
		self:end_trade()
	end
end
---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
	printf("DEBUG: add_to_binder: npc:name()='%s', scheme='%s', section='%s'", npc:name(), scheme, section)

 	local action = mob_trade(npc, storage)
	storage.action = action
end

function set_scheme(npc, ini, scheme, section, gulag_name)
	if not npc:is_trader() then
		abort("object '%s': attempt to use mob_trade script on non-trader mobile", npc:name())
	end

	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	
	local sm = ogse_signals.get_mgr()
	local action = st.action
	sm:subscribe( {signal = "on_actor_menu_show", self = action, fun = self.on_actor_menu_show} )
	sm:subscribe( {signal = "on_actor_menu_hide", self = action, fun = self.on_actor_menu_hide} )
	sm:subscribe( {signal = "on_perform_trade", self = action, fun = self.on_trade} )
end

function disable_scheme(npc, scheme)
	if npc:is_trader() then
		local sm = ogse_signals.get_mgr()
		local st = db.storage[npc:id()][scheme]
		if not st then return end
		local action = st.action
		sm:unsubscribe( {signal = "on_actor_menu_show", self = action, fun = action.on_actor_menu_show} )
		sm:unsubscribe( {signal = "on_actor_menu_hide", self = action, fun = action.on_actor_menu_hide} )
		sm:unsubscribe( {signal = "on_perform_trade", self = action, fun = action.on_perform_trade} )
	end
end

