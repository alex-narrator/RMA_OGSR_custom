local registred_items = {}

class "se_outfit" (cse_alife_item_custom_outfit)
function se_outfit:__init (section) super (section)
	self.is_nvd_on = false
end
function se_outfit:on_register()
	cse_alife_item_custom_outfit.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)
	
	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end
end
function se_outfit:on_unregister()
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end
function se_outfit:STATE_Write (packet)
	packet:w_bool(self.is_nvd_on)
end
function se_outfit:STATE_Read (packet, size)
	self.is_nvd_on = packet:r_bool()
end

class "se_weapon" (cse_alife_item_weapon)
function se_weapon:__init (section) super (section)
end
function se_weapon:on_register()
	cse_alife_item_weapon.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end
end
function se_weapon:on_unregister()
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end

class "se_weapon_shotgun" (cse_alife_item_weapon_shotgun)
function se_weapon_shotgun:__init (section) super (section)
end
function se_weapon_shotgun:on_register()
	cse_alife_item_weapon_shotgun.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end
end
function se_weapon_shotgun:on_unregister()
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end


class "se_weapon_magazined" (cse_alife_item_weapon_magazined)
function se_weapon_magazined:__init (section) super (section)
end
function se_weapon_magazined:on_register()
	cse_alife_item_weapon_magazined.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end
end
function se_weapon_magazined:on_unregister()
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end

class "se_weapon_magazined_w_gl" (cse_alife_item_weapon_magazined_w_gl)
function se_weapon_magazined_w_gl:__init (section) super (section)
end
function se_weapon_magazined_w_gl:on_register()
	cse_alife_item_weapon_magazined_w_gl.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end
end
function se_weapon_magazined_w_gl:on_unregister()
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end

--------------TORCH-----------------------------------------------------------------------------------
class "se_torch" (cse_alife_item_torch)
function se_torch:__init (section) super (section)
	self.power_level = 1
	self.cur_power_sect = 1
	self.is_second_mode = false
	self.is_nvd_on = false
end
function se_torch:on_register()
	cse_alife_item_torch.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end	
end
function se_torch:on_unregister()
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end
function se_torch:STATE_Write (packet)
	cse_alife_item_torch.STATE_Write (self, packet)
	packet:w_float(self.power_level)
	packet:w_u8(self.cur_power_sect)
	packet:w_bool(self.is_second_mode)
	packet:w_bool(self.is_nvd_on)
end
function se_torch:STATE_Read (packet, size)
	cse_alife_item_torch.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end	
	self.power_level = packet:r_float()
	self.cur_power_sect = packet:r_u8()
	self.is_second_mode = packet:r_bool()
	self.is_nvd_on = packet:r_bool()
end
-- PDA -------------------------------------------------------------------------------------------------------------------------------
class "se_pda" (cse_alife_item_pda)
function se_pda:__init (section) super (section)
	self.power_level = 1
	self.cur_power_sect = 1
end
function se_pda:on_register()
	cse_alife_item_pda.on_register( self )
end
function se_pda:on_unregister()
	cse_alife_item_pda.on_unregister(self)
end
function se_pda:STATE_Write (packet)
	cse_alife_item_pda.STATE_Write (self, packet)
	packet:w_float(self.power_level)
	packet:w_u8(self.cur_power_sect)
end
function se_pda:STATE_Read (packet, size)
	cse_alife_item_pda.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end	
	self.power_level = packet:r_float()
	self.cur_power_sect = packet:r_u8()
end
---DETECTOR-------------------------------------------------------------------------------------
class "se_detector" (cse_alife_item_detector)
function se_detector:__init (section) super (section)
	self.power_level = 1
	self.cur_power_sect = 1
end
function se_detector:on_register()
	cse_alife_item_detector.on_register( self )
end
function se_detector:on_unregister()
	cse_alife_item_detector.on_unregister( self )
end
function se_detector:STATE_Write (packet)
	cse_alife_item_detector.STATE_Write (self, packet)
	packet:w_float(self.power_level)
	packet:w_u8(self.cur_power_sect)
end
function se_detector:STATE_Read (packet, size)
	cse_alife_item_detector.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end	
	self.power_level = packet:r_float()
	self.cur_power_sect = packet:r_u8()
end
---CUSTOM DEVICE-------------------------------------------------------------------------------------
class "se_device" (cse_alife_item_device)
function se_device:__init (section) super (section)
	self.power_level = 1
	self.cur_power_sect = 1
	self.is_second_mode = false
end
function se_device:on_register()
	cse_alife_item_device.on_register( self )
end
function se_device:on_unregister()
	cse_alife_item_device.on_unregister( self )
end
function se_device:STATE_Write (packet)
	cse_alife_item_device.STATE_Write (self, packet)
	packet:w_float(self.power_level)
	packet:w_u8(self.cur_power_sect)
	packet:w_bool(self.is_second_mode)
end
function se_device:STATE_Read (packet, size)
	cse_alife_item_device.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end	
	self.power_level = packet:r_float()
	self.cur_power_sect = packet:r_u8()
	self.is_second_mode = packet:r_bool()
end
-------------------------INVENTORY ITEM-------------------------------------------------------------------------------
local zero_time = game.CTime()
class "se_item"	(cse_alife_item)
function se_item:__init (section) super (section)
	self.last_time_called = zero_time
	self.is_taken = false
end
function se_item:on_register()
	cse_alife_item.on_register( self )
	-- Регистрация в таскменеджере
	task_manager.get_random_task():register_target(self)

	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end	
end
function se_item:on_unregister()
	--' Отрегистрация в таскменеджере
	task_manager.get_random_task():unregister_target(self)
end
function se_item:STATE_Write (packet)
	cse_alife_item.STATE_Write (self, packet)
	utils.w_CTime(packet, self.last_time_called)
	packet:w_bool(self.is_taken)
end
function se_item:STATE_Read (packet, size)
	cse_alife_item.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end
	self.last_time_called = utils.r_CTime(packet)
	self.is_taken = packet:r_bool()
end
-------------------EATEBLE---------------------------------------------------------------------------------------------
class "se_eatable" (cse_alife_item_eatable)
function se_eatable:__init (section) super (section)
	self.last_time_called = zero_time
end
function se_eatable:on_register()
	cse_alife_item_eatable.on_register( self )
end
function se_eatable:on_unregister()
	cse_alife_item_eatable.on_unregister(self)
end
function se_eatable:STATE_Write (packet)
	cse_alife_item_eatable.STATE_Write (self, packet)
	utils.w_CTime(packet, self.last_time_called)
end
function se_eatable:STATE_Read (packet, size)
	cse_alife_item_eatable.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end
	self.last_time_called = utils.r_CTime(packet)
end

-- INVENTORY BOX ---------------------------------------------------------------------------------------------------------------------
class "se_invbox" (cse_alife_inventory_box)
function se_invbox:__init (section) super (section)
	self.is_opened = false
end
function se_invbox:STATE_Write (packet)
	cse_alife_inventory_box.STATE_Write (self, packet)
	packet:w_bool(self.is_opened)
end
function se_invbox:STATE_Read (packet, size)
	cse_alife_inventory_box.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end
	self.is_opened = packet:r_bool()
end

--' ФИзобъекты
class "se_physic" (cse_alife_object_physic)
function se_physic:__init (section) super (section)
end
function se_physic:keep_saved_data_anyway()
	return true
end


function stats()
	printf("*** SIM ITEMS STATISTIC ***")
	for k,v in pairs(registred_items) do
		printf("item = %s, num = %s", k, v)
	end
end