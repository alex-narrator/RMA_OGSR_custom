-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_npc_spawn", 			fun = this.update})
	sm:subscribe({signal = "on_npc_destroy", 		fun = this.clear})
	sm:subscribe({signal = "on_npc_use", 			fun = this.update})
	sm:subscribe({signal = "on_trader_spawn", 		fun = this.update})
	sm:subscribe({signal = "on_trader_destroy", 	fun = this.clear})
	sm:subscribe({signal = "on_trader_use", 		fun = this.update})
	sm:subscribe({signal = "on_actor_menu_show", 	fun = this.on_actor_menu_show})
	sm:subscribe({signal = "on_actor_menu_hide", 	fun = this.on_actor_menu_hide})
	sm:subscribe({signal = "on_trade", 				fun = this.on_trade})
	sm:subscribe({signal = "on_trade_purchase_item_process", 	fun = this.on_trade_purchase_item_process})
end

local BUY_ENEMY_FACTOR 		= read_if_exists(sys_ini, "r_float", "trade", "buy_price_factor_hostile", 1)
local BUY_FRIEND_FACTOR 	= read_if_exists(sys_ini, "r_float", "trade", "buy_price_factor_friendly", 1)
local SELL_ENEMY_FACTOR 	= read_if_exists(sys_ini, "r_float", "trade", "sell_price_factor_hostile", 1)
local SELL_FRIEND_FACTOR 	= read_if_exists(sys_ini, "r_float", "trade", "sell_price_factor_friendly", 1)
local MIN_DEFICIT 			= read_if_exists(sys_ini, "r_float", "trade", "min_deficit_factor", 1)
local MAX_DEFICIT 			= read_if_exists(sys_ini, "r_float", "trade", "max_deficit_factor", 1)

local MIN_H, MAX_H = 8, 12--//межі рандомайзеру часу до оновлення асортиментів (ігрові години)
local c_time = game.CTime()
local trade_manager = {}

local DEF_TRADE_CFG = [[trade\trade_generic.ltx]]
local DEF_TRADE_CONDITIONS = {}

local sm = ogse_signals.get_mgr()

local sold_items = nil

function on_actor_menu_show(mode)
	if mode == "trade" then
		on_trade_show()
	end
end

function on_actor_menu_hide(mode)
	if mode == "trade" then
		on_trade_hide()
	end
end

function on_trade_show()
	sold_items = nil
	local trade_partner = level.get_second_talker()
	if not trade_partner then
	return end
	-- local tt = trade_manager[trade_partner:id()]
	-- if not tt or tt.cfg_ltx == DEF_TRADE_CFG then
	-- return end
	sold_items = {}
end

function on_trade_hide()
	if not sold_items then
	return end
	if not trade_partner then
	return end
	local trade_partner = level.get_second_talker()
	local sim = alife()
	local se_item, cl_item
	for item_id,v in pairs(sold_items) do
		se_item = sim:object(item_id)
		cl_item = level.object_by_id(item_id)
		if trade_partner and (trade_partner:is_trader() or not trade_partner:is_in_slot(cl_item)) then
			--log3("~release item %s after trade with %s", se_item:name(), trade_partner:name())
			sim:release(se_item, true)
		end
	end
	sold_items = nil
end

function on_trade(item, sell_buy, money)
	if not sell_buy then
	return end
	if not sold_items then
	return end
	sold_items[item:id()] = true
end

function trade_init(npc, cfg)
	----log3("TRADE INIT: [%s]", npc:name())
	
	if not cfg then
		cfg = DEF_TRADE_CFG
	end
	
	local tt = trade_manager[npc:id()]
	if not tt or tt.cfg_ltx ~= cfg then
		tt = {}
		tt.cfg_ltx = cfg
		tt.config = ini_file_cached(cfg)
		trade_manager[npc:id()] = tt
	end
	
	-- коэфициенты покупки
	local str = read_if_exists(tt.config, "r_string", "trader", "buy_condition", nil)
	if not str then
		abort("Incorrect trader settings. Cannot find buy_condition. [%s]->[%s]", npc:name(), cfg)
	end
	--log3("TRADE INIT: [%s] tt.buy_condition = %s", npc:name(), str)
	tt.buy_condition = xr_logic.parse_condlist(npc, "trade_manager", "buy_condition", str)
	
	-- коэфициенты продажи
	str = read_if_exists(tt.config, "r_string", "trader", "sell_condition", nil)
	if not str then
		abort("Incorrect trader settings. Cannot find sell_condition. [%s]->[%s]", npc:name(), cfg)
	end
	--log3("TRADE INIT: [%s] tt.sell_condition = %s", npc:name(), str)
	tt.sell_condition = xr_logic.parse_condlist(npc, "trade_manager", "sell_condition", str)
	
	-- список закупки
	str = read_if_exists(tt.config, "r_string", "trader", "buy_supplies", nil)
	if str then
		tt.buy_supplies = xr_logic.parse_condlist(npc, "trade_manager", "buy_supplies", str)
		--log3("TRADE INIT: [%s] tt.buy_supplies = %s", npc:name(), str)
	else
		tt.buy_supplies = nil
	end
	
	--//дефіцити
	tt.min_deficit = read_if_exists(tt.config, "r_float", "trader", "min_deficit_factor", MIN_DEFICIT)
	tt.max_deficit = read_if_exists(tt.config, "r_float", "trader", "max_deficit_factor", MAX_DEFICIT)
end

function update(npc)
	local tt = trade_manager[npc:id()]
	if not tt then 
		--log3("~TRADE UPDATE [%s]: skiped", npc:name())
	return end
	if not npc:alive() then
		clear(npc)
	return end
	
	--log3("~TRADE UPDATE [%s]: start", npc:name())
	
	local str = xr_logic.pick_section_from_condlist(actor, npc, tt.buy_condition)
	if tt.current_buy_condition ~= str then
		--log3("TRADE UPDATE [%s]: buy condition = %s", npc:name(), str)
		fill_conditions(tt, tt.config, str, true)
		tt.current_buy_condition = str
	end

	str = xr_logic.pick_section_from_condlist(actor, npc, tt.sell_condition)
	if tt.current_sell_condition ~= str then
		--log3("TRADE UPDATE [%s]: sell condition = %s", npc:name(), str)
		fill_conditions(tt, tt.config, str, false)
		tt.current_sell_condition = str
	end

	if not tt.buy_supplies then return end
	
	str = xr_logic.pick_section_from_condlist(actor, npc, tt.buy_supplies)
	if tt.current_buy_supplies ~= str or not tt.resuply_time or tt.resuply_time:diffSec(game.get_game_time()) <= 0 then
		--log3("TRADE UPDATE [%s]: buy_supplies = %s", npc:name(), str)
		tt.current_buy_supplies = str
		--npc:buy_supplies(tt.config, str)		
		buy_supplies(npc)
		--tt.current_buy_supplies = str
		local resuply_hours = math.random(MIN_H, MAX_H)
		c_time:setHMS(resuply_hours, 0, 0)
		tt.resuply_time = game.get_game_time() + c_time
		--log3("TRADE UPDATE [%s]: next resuply in %s hours", npc:name(), resuply_hours)
	end
end


function save(obj, packet)
	local tt = trade_manager[obj:id()]

	--' Сохраняем присутствует ли инициализированная торговля в принципе.
	if tt then
		packet:w_bool(true)
	else
		----log3("TRADE SAVE [%s]: ignored", obj:name())
		packet:w_bool(false)
		return
	end

	packet:w_stringZ(tt.cfg_ltx)

	if tt.current_buy_condition then
		packet:w_stringZ(tt.current_buy_condition)
		--log3("TRADE SAVE [%s]: current_buy_condition = %s", obj:name(), tostring(tt.current_buy_condition))
	else
		packet:w_stringZ("")
	end

	if tt.current_sell_condition then
		packet:w_stringZ(tt.current_sell_condition)
		--log3("TRADE SAVE [%s]: current_sell_condition = %s", obj:name(), tostring(tt.current_sell_condition))
	else
		packet:w_stringZ("")
	end

	if tt.current_buy_supplies then
		packet:w_stringZ(tt.current_buy_supplies)
		--log3("TRADE SAVE [%s]: current_buy_supplies = %s", obj:name(), tostring(tt.current_buy_supplies))
	else
		packet:w_stringZ("")
	end
	
	
	local dt_size = tt.deficit and table.size(tt.deficit) or 0
	packet:w_s32(dt_size) --//update_time was here now its deficit values
	if dt_size > 0 then
		for sect,deficit in pairs(tt.deficit) do
			packet:w_stringZ(sect)
			packet:w_float(deficit)
		end
	end

	if tt.resuply_time then
		local diff = tt.resuply_time:diffSec(game.get_game_time())
		if diff < 0 then
			diff = 0
		end
		packet:w_s32(diff)
		--log3("TRADE SAVE [%s]: resuply_time diff = %s | %s hours", obj:name(), diff, diff/3600)
	else
	 	packet:w_s32(-1)
	end
end

function load(obj, packet)
	if not packet:r_bool() then
		--log3("TRADE LOAD [%s]: ignored", obj:name())
		return
	end

	local tt = {}
	trade_manager[obj:id()] = tt

	tt.cfg_ltx = packet:r_stringZ()
	--log3("TRADE LOAD [%s]: cfg_ltx = %s", obj:name(), tt.cfg_ltx)

	tt.config = ini_file_cached(tt.cfg_ltx)

	local a = packet:r_stringZ()
	if a ~= "" then
		tt.current_buy_condition = a
		fill_conditions(tt, tt.config, a, true)
		--log3("TRADE LOAD [%s]: current_buy_condition = %s", obj:name(), tostring(a))
	end
	
	a = packet:r_stringZ()
	if a ~= "" then
		tt.current_sell_condition = a
		fill_conditions(tt, tt.config, a, false)
		--log3("TRADE LOAD [%s]: current_sell_condition = %s", obj:name(), tostring(a))
	end

	a = packet:r_stringZ()
	if a ~= "" then
		tt.current_buy_supplies = a
		--log3("TRADE LOAD [%s]: current_buy_supplies = %s", obj:name(), tostring(a))
	end

	a = packet:r_s32()--//update_time was here now its deficit values
	if a > 0 then
		tt.deficit = {}
		for i=1, a do
			tt.deficit[packet:r_stringZ()] = packet:r_float()
		end
	end

	a = packet:r_s32()
	if a > 0 then
		c_time:setHMS(0, 0, a)
		tt.resuply_time = game.get_game_time() + c_time
		--log3("TRADE LOAD [%s]: resuply_time diff = %s | %s hours", obj:name(), a, a/3600)
	end
end

function clear(npc)
	trade_manager[npc:id()] = nil
end

function parse_purchase_list(npc)
	local tt = trade_manager[npc:id()]
	if not tt then 
		log3("!TRADE UPDATE [%s]: fill_purchase_data skiped", npc:name())
	return end
	tt.purchase_data = {}
	--//чистимо таблицю факторів дефіциту
	tt.deficit = {}
	--//
	local suppl_sect = tt.current_buy_supplies
	local n = tt.config:line_count(suppl_sect)
	local name, value = "", ""
	local tmp_tbl
	for i=0,n-1 do
		result, name, value = tt.config:r_line(suppl_sect,i,"","")
		tmp_tbl = split_string(value, ",")
		tt.purchase_data[name] = { count = tmp_tbl[1], prob = tmp_tbl[2], spawned = 0}
		--log3("~NPC %s | config %s | sect %s | name %s | value %s", npc:name(),  tt.config, suppl_sect, name, value)
	end
	--log3("~NPC %s, tt.purchase_data %s", npc:name(), tt.purchase_data)
end

function on_trade_purchase_item_process(npc, sobj)
	local tt = trade_manager[npc:id()]
	if not tt then
		log3("!TRADE UPDATE [%s]: on_trade_purchase_item_process skiped", npc:name())
	return end
	local se_item = alife():object(sobj.id)
	local wpn = se_item:get_weapon_m()
	if wpn then
		level.client_spawn_manager():add(sobj.id, -1, function(id, obj) obj:set_ammo_elapsed(0) end)
	end	
end

function get_deficit_factor(npc, sect)
	local tt = trade_manager[npc:id()]
	if not tt then
		--log3("~NPC %s - no trade_manager data", npc:name())
	return 1 end
	if tt.cfg_ltx == DEF_TRADE_CFG then
		--log3("~NPC %s - has default trade list", npc:name())
	return 1 end
	if not tt.deficit then
		--log3("~NPC %s - no deficit data", npc:name())
	return 1 end
	local res = tt.deficit[sect] and math.clamp(tt.deficit[sect], tt.min_deficit, tt.max_deficit) or 1
	--log3("~get_deficit_factor NPC %s | item %s | deficit %s", npc:name(), sect, res)
	return res
end

function get_final_price(npc, section, result, sell_bye)
	return result * get_deficit_factor(npc, section)
end

function buy_supplies(npc)
	local npc_id = npc:id()
	local tt = trade_manager[npc_id]
	if not tt then 
	return end
	
	tt.deficit = {}
	
	--log3("~call buy_supplies for trader %s", npc:profile_name())
	
	clear_inventory(npc)
	
	local suppl_sect = tt.current_buy_supplies
	local n = tt.config:line_count(suppl_sect)
	local sect, value = "", ""
	local tmp_tbl, count, prob, sobj
	for i=0,n-1 do
		result, sect, value = tt.config:r_line(suppl_sect,i,"","")
		tmp_tbl = split_string(value, ",")
		count = tonumber(tmp_tbl[1])
		prob = tonumber(tmp_tbl[2])
		
		local spawned = 0
		for ii=1, count do
			if math.random(0,1) <= prob then
				if read_if_exists(sys_ini, "r_string", sect, "ammo_types", nil) then
					sobj = spawn_ammo_to_owner(sect, npc_id, 0)
				else
					sobj = spawn_to_owner(sect, npc_id)
				end
				spawned = spawned + 1
				sm:call("on_trade_purchase_item_process", npc, sobj)
			end
		end
		
		if spawned > 0 then
			tt.deficit[sect] = count * prob / spawned
		end
	end
end

function clear_inventory(npc)
	--log3("~call clear_inventory for trader %s", npc:profile_name())
	local sim = alife()
	local bolt_id = npc:item_in_slot(BOLT_SLOT) and npc:item_in_slot(BOLT_SLOT):id() or -1
	local pda_id = npc:item_in_slot(PDA_SLOT) and npc:item_in_slot(PDA_SLOT):id() or -1
	local item_id
	function perform_action(dummy, item)
		item_id = item:id()
		if item_id ~= bolt_id and item_id ~= pda_id then
			sim:release(sim:object(item_id), true)
			--log3("~remove item %s from trader %s due to trade list update", item:name(), npc:name())
		end
	end	
	npc:iterate_inventory(perform_action, nil)
end

function is_trader(npc)
	local tt = trade_manager[npc:id()]
	return tt and tt.cfg_ltx ~= DEF_TRADE_CFG
end

function get_trade_cost(item)
	local script_cost = calculate_item_price(level.get_second_talker(), item, parent_is_actor(item))
	return script_cost
end

function tradable(item)
	return read_if_exists(sys_ini, "r_bool", item:section(), "can_trade", true) and not read_if_exists(sys_ini, "r_bool", item:section(), "quest_item", false) and get_trade_cost(item) > 0
end

function fill_conditions(tt, config, section, for_buy)
	local default = (tt.cfg_ltx == DEF_TRADE_CFG)
	if default then
		if for_buy then
			if DEF_TRADE_CONDITIONS.buy_condition_data then
				--log3("~default buy_condition - return")
				return 
			end
		else
			if DEF_TRADE_CONDITIONS.sell_condition_data then
				--log3("~default sell_condition - return")
				return 
			end
		end
	end
	
	local cond_table = {}
	local n = config:line_count(section)
	for i=0,n-1 do
		local _, sect, value = config:r_line(section,i,"","")
		--//регулярки можна писати не закриваючи їх у символи "/""/" але якщо вони написані - приберемо їх
		sect = sect:gsub("/.-", "")
		
		local rept_good_k, rept_bad_k, min_cond = 0, 0, 0
		if value ~= "" then
			value = split_string(value, ",", true)
			rept_good_k = value[1]
			rept_bad_k = value[2]
			min_cond = value[3] or 0
		end
		--cond_table[sect] = {rept_good_k, rept_bad_k}
		table.insert(cond_table, {[sect] = {rept_good_k, rept_bad_k, min_cond}})
		--log3("~cfg_ltx %s | section %s - sect %s | value %s", tt.cfg_ltx, section, sect, value)
	end

	if for_buy then
		if default then
			DEF_TRADE_CONDITIONS.buy_condition_data = cond_table
			--log3("~fill default buy_condition_data")
		else
			tt.buy_condition_data = cond_table
		end
	else
		if default then
			DEF_TRADE_CONDITIONS.sell_condition_data = cond_table
			--log3("~fill default sell_condition_data")
		else
			tt.sell_condition_data = cond_table
		end
	end
	--log3("~cfg_ltx %s | section %s - cond_table %s", tt.cfg_ltx, section, cond_table)
end

function get_trade_params(section, cond_table)
	for k,v in pairs(cond_table) do
		if v[section] then
			return v[section][1], v[section][2], v[section][3]
		end
	end	
	for k,v in pairs(cond_table) do
		for _k,_v in pairs(v) do
			if not not string.match(section, _k) then
				return v[_k][1], v[_k][2], v[_k][3]
			end
		end
	end
	return 0, 0, 0
end

function calculate_item_price(trader, item, b_buying)
	if not trader then
		return 0
	end
	--log3("~trader %s", trader:character_name())
	
	--//b_buying (чи це купівля) стосується вендора - чи вендор купує
	local cond_table
	if is_trader(trader) then
		local tt = trade_manager[trader:id()]
		cond_table = b_buying and tt.buy_condition_data or tt.sell_condition_data
	else
		cond_table = b_buying and DEF_TRADE_CONDITIONS.buy_condition_data or DEF_TRADE_CONDITIONS.sell_condition_data
	end
	--log3("!item %s - cond_table %s", item:name(), cond_table)
	
	local sect = item:section()
	local rept_good_k, rept_bad_k, min_cond = get_trade_params(sect, cond_table)

	if rept_good_k == 0 or rept_bad_k == 0 then
		--log3("!item %s - rept_good_k %s, rept_bad_k %s", item:name(), rept_good_k, rept_bad_k)
		return 0
	end	
	if not rept_good_k or not rept_bad_k then
		rept_good_k, rept_bad_k, min_cond = 1, 1, 0
	end
	
	local cond = item:condition()
	if cond < min_cond then
		return 0
	end	
	
	local base_cost = item:cost()
	--log3("~item %s - base_cost %s", item:name(), base_cost)
	--local condition_factor = math.clamp(cond, 0.1, 1)
	local condition_factor = math.pow(cond*0.9 + 0.1, 0.75)
	--log3("~item %s - condition_factor %s", item:name(), condition_factor)
	--//це персональне ставлення вендора до актора
	local attitude = trader:general_goodwill(actor)
	local relation_factor = (attitude + 1000) / 2000
	relation_factor = math.clamp(relation_factor, 0, 1)
	--log3("~item %s - relation_factor %s", item:name(), relation_factor)
	
	local action_factor
	if rept_good_k <= rept_bad_k then
		action_factor = rept_good_k + (rept_bad_k - rept_good_k) * (1 - relation_factor)
	else
		action_factor = rept_bad_k + (rept_good_k - rept_bad_k) * relation_factor
	end
	action_factor = math.clamp(action_factor, math.min(rept_bad_k, rept_good_k), math.max(rept_bad_k, rept_good_k))
	--log3("~item %s - rept_good_k %s, rept_bad_k %s", item:name(), rept_good_k, rept_bad_k)
	--log3("~item %s - action_factor %s", item:name(), action_factor)
	
	local result = base_cost * condition_factor * action_factor * get_deficit_factor(trader, sect)
	return math.round(result)
end