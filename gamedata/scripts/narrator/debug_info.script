-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	--sm:subscribe({signal = "on_hit", fun = this.on_hit})
	--sm:subscribe({signal = "on_hit_actor", fun = this.on_hit})
	--sm:subscribe({signal = "on_actor_before_hit", fun = this.on_before_hit})
	--sm:subscribe({signal = "on_death",   fun = this.on_death})
	--sm:subscribe({signal = "on_npc_before_hit", fun = this.on_before_hit})
	--sm:subscribe({signal = "on_hit_npc", fun = this.on_hit})
	--sm:subscribe({signal = "on_info_portion", fun = this.on_info_portion})
	--sm:subscribe({signal = "on_task", fun = this.on_task})
	--sm:subscribe({signal = "on_take", fun = this.on_take})
	sm:subscribe({signal = "on_key_press", fun = this.on_key_press})
	--sm:subscribe({signal = "update_items_effect", fun = this.update_items_effect})
	--sm:subscribe({signal = "on_update", fun = this.on_update})
	--sm:subscribe({signal = "on_weapon_fire", fun = this.on_weapon_fire})
end

function on_update(dt)
end

function on_take(item)
	log3("~take item %s|%s", item:name(), item:section())
end

function on_hit(victim, health_lost, direction, draftsman, bone_id, hit_type)
	log3("~on_hit: victim %s | health_lost %s | draftsman %s | bone %s | hit_type %s",	victim:name(),  health_lost, draftsman:name(), victim:get_bone_name(bone_id), get_hit_type_name(hit_type))
	log3("~%s current health %.2f | bleeding %.2f", victim:name(), victim.health, victim:get_bleeding())
end

function on_before_hit(object, hit)
	log3("~%s on_before_hit: power %s | full power %s | type %s | draftsman %s | bone %s | ap %s", object:name(), hit.power, hit.full_power, get_hit_type_name(hit.hit_type), hit.who:name(), object:get_bone_name(hit.bone_id), hit.ap)
end

function on_death(victim, killer)
	if victim:is_actor() then
		log3("~actor on_death")
	end
end

function on_info_portion(npc, info_id)
	log3("~received infoportion %s", info_id)
end

function on_task(_task, _objective, _state)
	log3("~task %s | _objective %s | _state %s", _task:get_id(), _objective:get_idx(), _state)
end

function on_key_press(key, game_action)
	if game_action == key_bindings.kTEST then
		ogse_signals.get_mgr():call("on_test_key_press")
		return
	end

	local show_tgt_info = (game_action == key_bindings.kCHECKACTIVEITEM) and key_state(bind_to_dik(key_bindings.kADDITIONAL_ACTION))
	local tgt = level.get_target_obj()
	if show_tgt_info and tgt then
		local tgt_info = string.format("section: %s\\n id: %s\\n story_id: %s\\n name: %s\\n profile: %s\\n community: %s\\n species: %s\\n nonscript usable: %s\\n position: (%s, %s, %s) lvid: %s gvid: %s\\n direction: (%s, %s, %s)\\n visual: %s\\n gulag: %s\\n mesh count: %s\\n bone_protection: %s\\n immunities: %s",
				tgt:section(), 
				tgt:id(), 
				tgt:story_id() == NO_STORY_ID and "NO STORY ID" or tgt:story_id(), 
				tgt:name(), 
				tgt:profile_name() and tgt:profile_name() or "NO PROFILE", 
				check_obj_has_method(tgt, character_community) and tgt:character_community() or "NO COMMUNITY",
				get_species(tgt),
				tgt:get_nonscript_usable(),
				tgt:position().x, tgt:position().y, tgt:position().z,
				tgt:level_vertex_id(),
				tgt:game_vertex_id(),
				tgt:direction().x, tgt:direction().y, tgt:direction().z,
				tgt:get_visual_name() or "NO VISUAL",
				(tgt:is_stalker() or tgt:is_monster() or tgt:is_trader()) and xr_gulag.get_npc_gulag(tgt) and xr_gulag.get_npc_gulag(tgt).name or "NONE",
				tgt:get_mesh_count(),
				read_if_exists(tgt:get_visual_ini(), "string", "bone_protection", "bones_protection_sect", "NONE"),
				read_if_exists(tgt:get_visual_ini(), "string", "immunities", "immunities_sect", "NONE")
			)
		log3("~%s", tgt_info)
		hud_add_info_message("debug_msg", tgt_info, 10)
	end
	
	-- if show_tgt_info then
		-- local anim = "liz\\liz_hands_hit3_additive.anm"
		-- game.play_hud_anm(anim, 2, 1, 1, false, true)
	-- end
end

function update_items_effect(update_time)
	log3("~update_items_effect update_time %s", update_time)
end

local dbg_particle_name = "anomaly2\\plasma_generator_death"
function show_patrol_points(path_name)
	local path = patrol(path_name)
	if not path then return end
	local count = path:count()
	for i=0, count - 1 do
		local pos = path:point(i)
		local dbg_particle = particles_object(dbg_particle_name)
		dbg_particle:play_at_pos(pos)
	end
end

function on_weapon_fire(wpn)
	log3("~item %s | ammo sect %s", wpn:name(), get_cur_ammo_sect(wpn))
end

class "p_timer"
function p_timer:__init(timer_name)
	self.p_timer = profile_timer()
	self.p_timer:start()
	self.p_name = timer_name
	return self
end

function p_timer:start()
	self.p_timer:start()
end

function p_timer:stop()
	self.p_timer:stop()
	local p_time_micro_s = self.p_timer:time()
	local p_time_s = p_time_micro_s * 0.000001
	log3("~[%s] profiled time %s micro-seconds | %s seconds", self.p_name, p_time_micro_s, p_time_s)
end