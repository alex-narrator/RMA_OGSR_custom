-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	--sm:subscribe({signal = "on_hit_actor", fun = this.on_hit})
	sm:subscribe({signal = "inv_drag_drop", fun = this.try_change_plate})
end

function on_hit(victim, health_lost, direction, draftsman, bone_id, hit_type)
	--log3("~actor hitted to bone %s", actor:get_bone_name(bone_id))
	local outfit = actor_get_outfit()
	if outfit and is_plate_carrier(outfit) then
		local binded_outfit = outfit:binded_object()
		if binded_outfit then
			binded_outfit:try_hit_plate(health_lost, bone_id, hit_type)
		end
	end	
end

function try_change_plate(obj, drop_on_obj)
	if not can_change_plate(obj, drop_on_obj) then 
	return end
	show_change_plate_wnd(obj, drop_on_obj)
end

function can_change_plate(obj, drop_on_obj)
	return is_plate_carrier(drop_on_obj) and drop_on_obj:binded_object() and drop_on_obj:binded_object():can_attach(obj)
end

function show_change_plate_wnd(obj, drop_on_obj)
	local msg_box = ui_message_box.MessageBoxWnd()
	local msg_text = string.format(
		"%s %s\\n%s %s ?", 
		game.translate_string("st_change_plate_item"), 
		game.translate_string(get_inv_name(drop_on_obj:section())), 
		game.translate_string("st_set_plate"), 
		game.translate_string(get_inv_name(obj:section())))
	msg_box:InitAction(msg_text, change_plate, obj, drop_on_obj)
end

recharge_effector_id = 20001

function change_plate(obj, drop_on_obj)
	local plate_sect = obj:section()
	local action_delay = read_if_exists(sys_ini, "r_float", plate_sect, "use_delay", 2)
	-- local change_plate_sound = read_if_exists(sys_ini, "r_string", plate_sect, "use_sound", nil)
	-- if change_plate_sound then
		-- xr_sound.get_safe_sound_object(change_plate_sound,sound_object.s2d):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)--play_at_pos(actor,actor:position())
	-- end
	local effector = read_if_exists(sys_ini, "r_string", plate_sect, "use_effector", nil)
	if effector then
		level.remove_complex_effector(recharge_effector_id)
		level.add_complex_effector(effector, recharge_effector_id)
	end
	if actor:is_in_slot(drop_on_obj) then
		ballistic_plate_anim.play(obj)
	else
		ballistic_plate_anim.play_hud_sound(get_hud_sect(obj))
	end

	block_non_move_action(true)
	add_time_delayed_action(action_delay, 
		function()
			drop_on_obj:binded_object():attach_plate(obj)
			block_non_move_action(false)
		end
	)
end


--//script menu actions
function detach_plate_tip(obj)
	return string.format("%s %s", game.translate_string("st_detach"), game.translate_string(get_inv_name_short(obj:binded_object():get_plate_sect())))
end
function can_detach_plate(obj)
	return is_plate_carrier(obj) and obj:binded_object() and obj:binded_object():is_plate_attached()
end
function detach_plate(obj)
	local vest = obj:binded_object()
	local plate_sect = vest:get_plate_sect()
	local action_delay = read_if_exists(sys_ini, "r_float", plate_sect, "use_delay", 2)
	ballistic_plate_anim.play_hud_sound(get_hud_sect(plate_sect))
	
	block_non_move_action(true)
	add_time_delayed_action(action_delay, 
		function()
			vest:detach_plate()
			block_non_move_action(false)
		end
	)	
end

function attach_plate_tip(obj)
	return string.format("%s %s", game.translate_string("st_attach_to"), game.translate_string(get_inv_name_short(actor_get_outfit():section())))
end
function can_attach_plate(obj)
	return can_change_plate(obj, actor_get_outfit())
end
function attach_plate(obj)
	change_plate(obj, actor_get_outfit())
end