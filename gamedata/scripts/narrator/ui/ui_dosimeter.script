local dosimeter_ui = nil
local workIndicatorTimer = 0
local updateTimer = 0
local updateFreq = 555 -- in milliseconds

local OVERLAY_XML = "script_overlays\\ui_dosimeter.xml"
local sm = ogse_signals.get_mgr()

function play_click()
	xr_sound.get_safe_sound_object("detectors\\geiger_"..math.random(1,8),sound_object.s2d):play_at_pos(actor,actor:position())
end

class "ui_dosimeter" (CUIScriptWnd)
function ui_dosimeter:__init(item) super()
	self:Show					(true)
	self:Enable					(true)

	local xml					= CScriptXmlInit()
	self.xml = xml
	xml:ParseFile				(OVERLAY_XML)
	xml:InitWindow				("dosimeter", 0, self)

	self.m_wrk_area				= xml:InitStatic("dosimeter:wrk_area", self)
	
	self.m_seg1					= xml:InitStatic("dosimeter:seg1", self.m_wrk_area)
	self.m_seg2					= xml:InitStatic("dosimeter:seg2", self.m_wrk_area)
	self.m_seg3					= xml:InitStatic("dosimeter:seg3", self.m_wrk_area)
	self.m_seg4					= xml:InitStatic("dosimeter:seg4", self.m_wrk_area)
	
	self.m_workIndicator		= xml:InitStatic("dosimeter:work", self.m_wrk_area)
	
	self.ui_enabled 			= true
	
	self.item = item
	
	self.radius 				= read_if_exists(sys_ini, "r_float", self.item:section(), "radius", 10)
end

function ui_dosimeter:__finalize() 
	dosimeter_ui = nil
end

function ui_dosimeter:Update()
	
	CUIScriptWnd.Update(self)
	
	if is_power_device(self.item) then
		local power_lvl = self.item:binded_object():get_power_level() 
		if power_lvl > 0 and not self.ui_enabled then
			self.ui_enabled = true
		elseif power_lvl == 0 and self.ui_enabled then
			self.ui_enabled = false
		end
		self.m_wrk_area:Show(self.ui_enabled)
	end
	
	if not self.ui_enabled then
	return end
	
	local tg = time_global()
	
	if (tg > workIndicatorTimer + 1000) then
		workIndicatorTimer = tg
		self.m_workIndicator:Show(not self.m_workIndicator:IsShown())
	end
	
	if (tg < updateTimer) then
		return
	else
		updateTimer = tg + updateFreq
	end
	
	
	local rads = 0
	local dist
	
	function perform_action(obj)
		if obj:is_anomaly() and get_clsid(obj) == clsid.zone_radioactive then
			dist = distance_between_safe(actor, obj) - obj:radius()
			if dist <= self.radius then
				if dist < 0 then
					dist = 0
				end
				local power = 1 - dist/self.radius
				power = math.clamp(power, 0.1, 1)
		
				play_click()
				if power >= 0.8 then
					add_time_delayed_action(0.1, function() play_click() end)
					add_time_delayed_action(0.2, function() play_click() end)
					add_time_delayed_action(0.3, function() play_click() end)
					add_time_delayed_action(0.4, function() play_click() end)
				elseif power >= 0.6 then
					add_time_delayed_action(0.2, function() play_click() end)
					add_time_delayed_action(0.4, function() play_click() end)
					add_time_delayed_action(0.6, function() play_click() end)
				elseif power >= 0.4 then
					add_time_delayed_action(0.4, function() play_click() end)
					add_time_delayed_action(0.6, function() play_click() end)
				elseif power >= 0.2 then
					add_time_delayed_action(0.5, function() play_click() end)
				end
				
				rads = rads + power * read_if_exists(sys_ini, "r_float", obj:section(), "min_start_power", 1)
			end
		end
	end		
	
	level.iterate_nearest(actor:position(), self.radius, perform_action)
	
	rads = math.floor(rads*100000*0.387)
	
	-- -- Emissions: the closer the wave, the higher the psi influnces
	-- if GetEvent("surge", "state") then
		-- local surge_time = GetEvent("surge", "time") or 0
		-- local val_glitch = (surge_time > 168) and normalize(surge_time, 220, 168) or normalize(surge_time, 20, 168)
		-- rads = (rads + 500) * math.random(0.5, 10) * clamp(val_glitch,0,1)
		
	-- -- Psi-storms: huge spike when a vortex hits the ground
	-- elseif GetEvent("psi_storm", "state") then
		-- if GetEvent("psi_storm", "vortex") then
			-- rads = (rads + 1000) * math.random(0.7, 1.3)
		-- else
			-- rads = rads * math.random(0.9, 1.1)
		-- end
	-- end
	
	local s_rads = tostring(rads)
	local seg1, seg2, seg3, seg4
	
	if (rads > 999) then
		seg1 = string.format("green_%s", s_rads:sub(1, 1))
		seg2 = string.format("green_%s", s_rads:sub(2, 2))
		seg3 = string.format("green_%s", s_rads:sub(3, 3))
		seg4 = string.format("green_%s", s_rads:sub(4, 4))
	elseif (rads > 99) then
		seg1 = "green_0"
		seg2 = string.format("green_%s", s_rads:sub(1, 1))
		seg3 = string.format("green_%s", s_rads:sub(2, 2))
		seg4 = string.format("green_%s", s_rads:sub(3, 3))
	elseif (rads > 9) then
		seg1 = "green_0"
		seg2 = "green_0"
		seg3 = string.format("green_%s", s_rads:sub(1, 1))
		seg4 = string.format("green_%s", s_rads:sub(2, 2))
	elseif (rads > 0) then
		seg1 = "green_0"
		seg2 = "green_0"
		seg3 = "green_0"
		seg4 = string.format("green_%s", s_rads:sub(1, 1))
	else
		seg1 = "green_0"
		seg2 = "green_0"
		seg3 = "green_0"
		seg4 = "green_0"
	end
	
	self.m_seg1:InitTextureEx(seg1, "hud\\p3d")
	self.m_seg2:InitTextureEx(seg2, "hud\\p3d")
	self.m_seg3:InitTextureEx(seg3, "hud\\p3d")
	self.m_seg4:InitTextureEx(seg4, "hud\\p3d")
end

function get_UI(item)
	if(dosimeter_ui==nil) then
		dosimeter_ui = ui_dosimeter(item)
	end
	
	return dosimeter_ui
end