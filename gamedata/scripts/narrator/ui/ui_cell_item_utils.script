-- -*- mode: lua; coding: windows-1251-dos -*-
function move_cell_item(cell_item, parent, target, for_all)
	local item
	if for_all then
		for k,v in pairs(cell_item:GetChilds()) do
			item = level.object_by_id(k)
			parent:RemoveItem(item)
			target:AddItem(item)
		end
		item = cell_item:GetItem()
		parent:RemoveItem(item)
		target:AddItem(item)
	else
		item = cell_item:GetAnyItem()
		parent:RemoveItem(item)
		target:AddItem(item)
	end			
end

function can_drop(cell_item)
	local item = cell_item:GetAnyItem()
	return parent_is_actor(item) and not read_if_exists(sys_ini, "r_bool", item:section(), "quest_item", false) and (get_clsid(item) ~= clsid.obj_bolt or read_if_exists(sys_ini, "r_bool", "features", "limited_bolts", false))
end

function drop_cell_item(cell_item, for_all)
	local item
	if for_all then
		for k,v in pairs(cell_item:GetChilds()) do
			item = level.object_by_id(k)
			item:parent():drop_item(item)
		end
		item = cell_item:GetItem()
		item:parent():drop_item(item)
	else
		item = cell_item:GetAnyItem()
		if actor_get_backpack() and actor_get_backpack():id() == item:id() then
			backpack.drop()
		else
			item:parent():drop_item(item)
		end
	end			
end

function transfer_cell_item(cell_item, new_owner, for_all)
	local item
	if for_all then
		for k,v in pairs(cell_item:GetChilds()) do
			item = level.object_by_id(k)
			item:parent():transfer_item(item, new_owner)
		end
		item = cell_item:GetItem()
		item:parent():transfer_item(item, new_owner)
	else
		item = cell_item:GetAnyItem()
		item:parent():transfer_item(item, new_owner)
	end			
end

function can_be_unloaded(cell_item)
	local item = cell_item:GetAnyItem()
	local can_be_unloaded = false
	if item:get_ammo_in_magazine() > 0 then
		can_be_unloaded = true
	end
	if item:get_ammo_in_magazine2() > 0 then
		can_be_unloaded = true
	end
	local wpn = item:get_weapon_m()
	if wpn and wpn:addon_attachable(addon.magazine) and wpn:is_addon_attached(addon.magazine) then
		can_be_unloaded = true
	end		
	local ammo = item:get_weapon_ammo()
	if ammo and ammo:is_magazine() and ammo.box_curr > 0 then
		can_be_unloaded = true
	end
	return can_be_unloaded and (parent_is_actor(item) or actor_menu:GetMode() ~= "trade")
end

function unload_magazine(cell_item, for_all)
	local function try_play_sound(item)
		if item:get_weapon_ammo() then
			local snd_name = read_if_exists(sys_ini, "r_string", item:section(), "unload_sound", nil)
			if snd_name then
				xr_sound.get_safe_sound_object(snd_name):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
			end
		end
	end
	
	local item
	if for_all then
		for k,v in pairs(cell_item:GetChilds()) do
			item = level.object_by_id(k)
			item:unload_magazine_full()
		end
		item = cell_item:GetItem()
		item:unload_magazine_full()
		try_play_sound(item)
	else
		item = cell_item:GetAnyItem()
		item:unload_magazine_full()
		cell_item:ForceUpdate()
		try_play_sound(item)
	end
end

function add_move_to_slot(pbox, item)
	local name, precondition, action
	local slots = read_if_exists(sys_ini, "r_string", item:section(), "slot", nil)
	if slots and parent_is_actor(item) then
		slots = split_string(slots, ",", true)
		for k,i in pairs(slots) do
			name = "st_move_to_slot_"..i
			precondition = function(item, i)
				return actor:can_put_in_slot(item, i)
			end
			action = function(item, i)
				item:set_slot(i)
				actor:move_to_slot(item)
			end
			pbox:AddItem(name, precondition, action, item, i)
		end
	end	
end

function add_move_to_belt(pbox, item)
	local name, precondition, action
	name = "st_move_to_belt"
	precondition = function(item)
		return actor:can_put_in_belt(item) and parent_is_actor(item)
	end
	action = function(item)
		actor:move_to_belt(item)
	end
	pbox:AddItem(name, precondition, action, item)
end

function add_move_to_ruck(pbox, item)
	local name, precondition, action
	name = "st_move_to_bag"
	precondition = function(item)
		return actor:is_in_slot(item) or actor:is_on_belt(item)
	end
	action = function(item)
		actor:move_to_ruck(item)
	end
	pbox:AddItem(name, precondition, action, item)
end

function add_reload_weapon(pbox, cell_item)
	local item = cell_item:GetAnyItem()
	local name, precondition, action
	
	local best_ammo = get_best_ammo(item)
	if not best_ammo then
	return end
	
	for k,_item in pairs(get_best_ammo(item)) do
		name = function(item, _item)
			local str = string.format("%s %s", game.translate_string("st_reload_magazine"), game.translate_string(get_inv_name_short(_item:section())))
			local ammo = _item:get_weapon_ammo()
			if ammo and ammo:is_magazine() then
				str = string.format("%s %s (%s)", game.translate_string("st_reload_magazine"), game.translate_string(get_inv_name_short(_item:section())), game.translate_string(get_inv_name_short(ammo:ammo_sect())))
			end
			return str
		end
		precondition = function(item, _item)
			return can_be_reloaded_by(item, _item)
		end
		action = function(item, _item)
			item:is_direct_reload(_item)
			local snd_name = read_if_exists(sys_ini, "r_string", item:section(), "load_sound", nil)
			if snd_name then
				xr_sound.get_safe_sound_object(snd_name):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
			end
			cell_item:ForceUpdate()
		end
		pbox:AddItem(name, precondition, action, item, _item)
	end
end

function add_unload_weapon(pbox, cell_item)
	local name, precondition, action
	name = "st_unload_magazine"
	precondition = function(cell_item)
		return can_be_unloaded(cell_item)
	end
	action = function(cell_item)
		unload_magazine(cell_item)
	end
	pbox:AddItem(name, precondition, action, cell_item)
	
	if cell_item:GetChildsCount() == 0 then
	return end
	--//all
	name = "st_unload_magazine_all"
	action = function(cell_item)
		unload_magazine(cell_item, true)
	end
	pbox:AddItem(name, precondition, action, cell_item)
end

function add_attach_addon(pbox, cell_item)
	local name, precondition, action
	local item = cell_item:GetAnyItem()
	for i = 0, sys_ini:r_u32("inventory","slots") - 1 do
		local slot_item = actor:item_in_slot(i)
		if slot_item and parent_is_actor(item) then
			local iitem = item:get_inventory_item()
			local slot_iitem = slot_item:get_inventory_item()
			local attach_tip = read_if_exists(sys_ini, "r_string", item:section(), "menu_attach_tip", "st_attach")
			name = string.format("%s %s", game.translate_string(attach_tip), game.translate_string(get_inv_name_short(slot_item:section())))
			precondition = function(iitem, slot_iitem)
				return slot_iitem:can_attach_addon(iitem)
			end
			action = function(iitem, slot_iitem)
				slot_iitem:attach_addon(iitem, true)
				xr_sound.get_safe_sound_object([[interface\inv_attach_addon]]):play(actor, 0, sound_object.s2d)
			end
			pbox:AddItem(name, precondition, action, iitem, slot_iitem)
		end
	end
end

function add_detach_addon(pbox, cell_item)
	local name, precondition, action
	local item = cell_item:GetAnyItem()
	local wpn = item:get_weapon_m()
	if wpn then
		for i=0,7 do --//all addons except magazine
			if wpn:addon_attachable(i) and wpn:is_addon_attached(i) then
				local addon_sect = wpn:get_addon_name(i)
				local detach_tip = read_if_exists(sys_ini, "r_string", addon_sect, "menu_detach_tip", "st_detach")
				name = string.format("%s %s", game.translate_string(detach_tip), game.translate_string(get_inv_name_short(addon_sect)))
				precondition = function(item)
					return parent_is_actor(item) or actor_menu:GetMode() ~= "trade"
				end
				action = function(item, cell_item)
					--wpn:detach_addon(addon_sect, true)
					detach_addon(item, addon_sect)
					xr_sound.get_safe_sound_object([[interface\inv_detach_addon]]):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
					cell_item:ForceUpdate()
					if actor_menu:GetMode() == "trade" then
						actor_menu:UpdatePrices()
					end
				end
				pbox:AddItem(name, precondition, action, item, cell_item)
			end
		end
	end
end

function add_move_to_carbody(pbox, cell_item)
	local name, precondition, action
	local item = cell_item:GetAnyItem()
	local new_owner = parent_is_actor(item) and actor_menu.target or actor
	name = "st_move"
	precondition = function(cell_item)
		return not read_if_exists(sys_ini, "r_bool", item:section(), "quest_item", false) and actor_menu:GetMode() == "carbody"
	end
	action = function(cell_item)
		transfer_cell_item(cell_item, new_owner)
	end
	pbox:AddItem(name, precondition, action, cell_item)
	
	if cell_item:GetChildsCount() == 0 then
	return end
	--//all
	name = "st_move_all"
	action = function(cell_item)
		transfer_cell_item(cell_item, new_owner, true)
	end
	pbox:AddItem(name, precondition, action, cell_item)	
end

function add_drop(pbox, cell_item)
	local name, precondition, action
	
	name = "st_drop"
	precondition = function(cell_item) 
		return can_drop(cell_item)
	end
	action = function(cell_item)
		drop_cell_item(cell_item)
	end
	local idx = pbox:AddItem(name, precondition, action, cell_item)
	pbox:SetItemColorFocused(idx, "red")	
	
	if cell_item:GetChildsCount() == 0 then
	return end	
	--//all
	name = "st_drop_all"
	action = function(cell_item)
		drop_cell_item(cell_item, true)
	end
	local idx = pbox:AddItem(name, precondition, action, cell_item)
	pbox:SetItemColorFocused(idx, "red")
end

function add_move_to_trade(pbox, cell_item)
	local name, precondition, action
	
	name = function(cell_item)
		local item = cell_item:GetAnyItem()
		if parent_is_actor(item) then
			return cell_item:GetOwnerList():GetID() == "sell_list" and "st_move_back" or "st_move_to_sell"
		else
			return cell_item:GetOwnerList():GetID() == "buy_list" and "st_move_back" or "st_move_to_buy"
		end
	end
	precondition = function(cell_item)
		local item = cell_item:GetAnyItem()
		return trade_manager.tradable(item)
	end
	action = function(cell_item)
		local parent = cell_item:GetOwnerList()
		local target = nil
		local item = cell_item:GetAnyItem()
		if parent_is_actor(item) then
			if parent:GetID() ~= "sell_list" then
				target = actor_menu.sell_list
			else
				target = actor_menu.ruck_list
				if actor:is_in_slot(item) then
					target = actor_menu.slot_list[item:get_slot()]
				elseif actor:is_on_belt(item) then
					target = actor_menu.belt_list
				end					
			end
		else
			target = parent:GetID() == "buy_list" and actor_menu.target_list or actor_menu.buy_list
		end
		move_cell_item(cell_item, parent, target)
		actor_menu:UpdatePrices()
	end
	pbox:AddItem(name, precondition, action, cell_item)
	
	if cell_item:GetChildsCount() == 0 then
	return end	
	--//all
	name = function(cell_item)
		local item = cell_item:GetAnyItem()
		if parent_is_actor(item) then
			return cell_item:GetOwnerList():GetID() == "sell_list" and "st_move_back_all" or "st_move_to_sell_all"
		else
			return cell_item:GetOwnerList():GetID() == "buy_list" and "st_move_back_all" or "st_move_to_buy_all"
		end
	end
	action = function(cell_item)
		local parent = cell_item:GetOwnerList()
		local target = nil
		local item = cell_item:GetAnyItem()
		if parent_is_actor(item) then
			if parent:GetID() ~= "sell_list" then
				target = actor_menu.sell_list
			else
				target = actor_menu.ruck_list
				if actor:is_in_slot(item) then
					target = actor_menu.slot_list[item:get_slot()]
				elseif actor:is_on_belt(item) then
					target = actor_menu.belt_list
				end					
			end
		else
			target = parent:GetID() == "buy_list" and actor_menu.target_list or actor_menu.buy_list
		end
		ui_cell_item_utils.move_cell_item(cell_item, parent, target, true)
		actor_menu:UpdatePrices()		
	end
	pbox:AddItem(name, precondition, action, cell_item)	
end

function add_eat(pbox, item)
	local name, precondition, action
	name = script_actions.eat_item_tip
	precondition = script_actions.can_eat
	action = script_actions.eat
	local idx = pbox:AddItem(name, precondition, action, item)
	pbox:SetItemColorFocused(idx, "UI_orange")
end

function add_donate(pbox, cell_item)
	local name, precondition, action
	local item = cell_item:GetAnyItem()
	name = "ui_st_donate"
	precondition = script_actions.can_donate
	action = script_actions.donate
	pbox:AddItem(name, precondition, action, item)
	
	if cell_item:GetChildsCount() == 0 then
	return end	
	--//all
	name = "ui_st_donate_all"
	precondition = function(cell_item)
		local item = cell_item:GetAnyItem()
		return script_actions.can_donate(item)
	end
	action = function(cell_item)
		for k,v in pairs(cell_item:GetChilds()) do
			item = level.object_by_id(k)
			script_actions.donate(item)
		end
		item = cell_item:GetItem()
		script_actions.donate(item)
	end
	pbox:AddItem(name, precondition, action, cell_item)
end

function add_attach_power_source(pbox, cell_item)
	local name, precondition, action
	local item = cell_item:GetAnyItem()
	for i = 0, sys_ini:r_u32("inventory","slots") - 1 do
		local slot_item = actor:item_in_slot(i)
		if slot_item then
			name = string.format("%s %s", game.translate_string("st_attach_to"), game.translate_string(get_inv_name_short(slot_item:section())))
			precondition = function(item, slot_item)
				return recharge.can_recharge(item, slot_item)
			end
			action = function(item, slot_item)
				recharge.recharge(item, slot_item)
			end
			pbox:AddItem(name, precondition, action, item, slot_item)
		end
	end
end

function add_detach_power_source(pbox, cell_item)
	local name, precondition, action
	local item = cell_item:GetAnyItem()
	name = recharge.detach_power_source_tip
	precondition = recharge.can_detach_power_source
	action = recharge.detach_power_source
	pbox:AddItem(name, precondition, action, item)
	
	if cell_item:GetChildsCount() == 0 then
	return end
	--//all
	name = function(cell_item)
		local item = cell_item:GetAnyItem()
		return string.format("%s %s", recharge.detach_power_source_tip(item), game.translate_string("st_from_all"))
	end
	precondition = function(cell_item)
		local item = cell_item:GetAnyItem()
		return recharge.can_detach_power_source(item)
	end
	action = function(cell_item)
		for k,v in pairs(cell_item:GetChilds()) do
			item = level.object_by_id(k)
			recharge.detach_power_source(item)
		end
		item = cell_item:GetItem()
		recharge.detach_power_source(item)
	end
	pbox:AddItem(name, precondition, action, cell_item)	
end

function add_attach_armor_plate(pbox, item)
	local name, precondition, action
	name = vest_plates.attach_plate_tip
	precondition = vest_plates.can_attach_plate
	action = vest_plates.attach_plate
	pbox:AddItem(name, precondition, action, item)
end

function add_detach_armor_plate(pbox, cell_item)
	local name, precondition, action
	local item = cell_item:GetAnyItem()
	name = vest_plates.detach_plate_tip
	precondition = vest_plates.can_detach_plate
	action = vest_plates.detach_plate
	pbox:AddItem(name, precondition, action, item)
	
	if cell_item:GetChildsCount() == 0 then
	return end
	--//all
	name = function(cell_item)
		local item = cell_item:GetAnyItem()
		return string.format("%s %s", vest_plates.detach_plate_tip(item), game.translate_string("st_from_all"))
	end
	precondition = function(cell_item)
		local item = cell_item:GetAnyItem()
		return vest_plates.can_detach_plate(item)
	end
	action = function(cell_item)
		for k,v in pairs(cell_item:GetChilds()) do
			item = level.object_by_id(k)
			vest_plates.detach_plate(item)
		end
		item = cell_item:GetItem()
		vest_plates.detach_plate(item)
	end
	pbox:AddItem(name, precondition, action, cell_item)		
end

function add_set_quick_slot(pbox, item)
	local name, precondition, action
	name = quick_slots.menu_tip_set
	precondition = quick_slots.can_set
	action = quick_slots.set
	pbox:AddItem(name, precondition, action, item)
end

function add_to_loadout(pbox, item)
	local name, precondition, action
	name = loadout.menu_tip_to
	precondition = loadout.can_add
	action = loadout.add
	pbox:AddItem(name, precondition, action, item)
end

function add_from_loadout(pbox, item)
	local name, precondition, action
	name = loadout.menu_tip_from
	precondition = loadout.can_remove
	action = loadout.remove
	pbox:AddItem(name, precondition, action, item)
end

function add_service(pbox, item)
	local name, precondition, action
	for i = 0, sys_ini:r_u32("inventory","slots") - 1 do
		local slot_item = actor:item_in_slot(i)
		if slot_item then
			name = string.format("%s %s", game.translate_string("st_service"), game.translate_string(get_inv_name_short(slot_item:section())))
			precondition = function(item, slot_item)
				return service_kit.can_service(item, slot_item)
			end
			action = function(item, slot_item)
				service_kit.show_service_wnd(item, slot_item)
			end
			pbox:AddItem(name, precondition, action, item, slot_item)
		end
	end	
end

function add_disassemble(pbox, cell_item)
	local name, precondition, action
	local item = cell_item:GetAnyItem()
	name = "st_disassemble"
	precondition = service_kit.can_disassemble
	action = service_kit.disassemble
	local idx = pbox:AddItem(name, precondition, action, item)
	pbox:SetItemColorFocused(idx, "red")
	
	if cell_item:GetChildsCount() == 0 then
	return end
	--//all
	name = "st_disassemble_all"
	precondition = service_kit.can_disassemble
	action = service_kit.disassemble
	local idx = pbox:AddItem(name, precondition, action, item, cell_item)
	pbox:SetItemColorFocused(idx, "red")
end

function add_saw_off(pbox, item)
	local name, precondition, action
	name = "st_saw_off"
	precondition = service_kit.can_saw_off
	action = service_kit.saw_off
	pbox:AddItem(name, precondition, action, item)
end

function add_download_info(pbox, item)
	local name, precondition, action
	name = "ui_st_download_info"
	precondition = pda.can_download_info
	action = pda.download_info
	pbox:AddItem(name, precondition, action, item)
end

function add_heal_injure(pbox, item)
	local name, precondition, action
	
	name = "ui_st_heal_hand_injure"
	precondition = body_health.can_heal_nand
	action = body_health.heal_nand
	pbox:AddItem(name, precondition, action, item)
	
	name = "ui_st_heal_leg_injure"
	precondition = body_health.can_heal_leg
	action = body_health.heal_leg
	pbox:AddItem(name, precondition, action, item)
end

function add_play_music(pbox, item)
	local name, precondition, action
	name = "ui_st_music_play"
	precondition = musical_instruments.can_play_instrument
	action = musical_instruments.play_instrument
	pbox:AddItem(name, precondition, action, item)
end

function add_deploy_landmine(pbox, item)
	local name, precondition, action
	name = landmine.deploy_tip
	precondition = landmine.can_deploy
	action = landmine.deploy
	pbox:AddItem(name, precondition, action, item)
end

function add_deploy_rc_explosive(pbox, item)
	local name, precondition, action
	name = rc_explosive.deploy_tip
	precondition = rc_explosive.can_deploy
	action = rc_explosive.deploy
	pbox:AddItem(name, precondition, action, item)
end

function add_info(pbox, item)
	local name, precondition, action
	name = "st_detail_info"
	precondition = function() return not get_script_option_value("floating_info") end
	action = ui_detail_info.show_hide_wnd
	pbox:AddItem(name, precondition, action, item)
end

function add_custom_info(pbox, item)
	local name, precondition, action
	name = ui_custom_info.tip_text
	precondition = ui_custom_info.has_info
	action = ui_custom_info.show_hide_wnd
	pbox:AddItem(name, precondition, action, item)
end