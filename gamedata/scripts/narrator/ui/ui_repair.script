-- -*- mode: lua; coding: windows-1251-dos -*-
local OVERLAY_XML = "script_overlays\\repair_overlay.xml"

local back_texture 		= "square_light_grey"
local color_default 	= GetARGB(0, 255, 255, 255)
local color_focused 	= GetARGB(70, 200, 200, 200)
local color_selected 	= GetARGB(170, 35, 200, 35)

class "RepairOverlay" (CUIScriptWnd)

local overlay = nil
local repair_sound_weapon = [[interface\item_usage\inv_repair_kit_use_fast]]
local repair_sound_armor = [[interface\item_usage\inv_repair_sewing_kit_fast]]

function create_overlay(condition_limit, cost_k, uniquie_k, armor_repair_infop)
	if not condition_limit then
		condition_limit = 1
	end
	if not cost_k then
		cost_k = 1
	end
	if not uniquie_k then
		uniquie_k = 1
	end
	if not overlay then
		overlay = RepairOverlay()		
		overlay:SetRepairParams(condition_limit, cost_k, uniquie_k, armor_repair_infop)
		overlay:Reinit()
	end
end

function RepairOverlay:__init(owner) super()
	self.owner = level.main_input_receiver()
	self:InitControls()
	self:Subscribe()
	ogse_signals.get_mgr():call("on_repair_show")
	self.owner:FindChild("---UIQuestionsList"):Show(false)
	self.owner:FindChild("---UIAnswersList"):Show(false)
end

function RepairOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_dialog_show", self = self, fun = self.DetachWnd},
			{signal = "on_dialog_hide", self = self, fun = self.DetachWnd},
			{signal = "on_talk_show", self = self, fun = self.DetachWnd},
			{signal = "on_talk_hide", self = self, fun = self.DetachWnd},
			{signal = "on_trade_show", self = self, fun = self.DetachWnd},
			{signal = "on_cell_item_show", self = self, fun = self.OnItemIconShow},
			{signal = "on_cell_item_select", self = self, fun = self.OnItemSelect},
			{signal = "on_cell_item_db_click", self = self, fun = self.ShowRepairRequest},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function RepairOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function RepairOverlay:DetachWnd()
	self:Unsubscribe()
	self:ClearCallbacks()
	self.owner:DetachChild(self)
	overlay = nil
	ogse_signals.get_mgr():call("on_repair_hide")
	self.owner:FindChild("---UIQuestionsList"):Show(true)
	self.owner:FindChild("---UIAnswersList"):Show(true)	
end

function RepairOverlay:InitControls()
	self.owner:AttachChild(self)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	self:Enable(true)
	self:Show(true)
	
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)

	self.repair_back = xml:InitStatic("repair_back", self)
	
	xml:InitAutoStaticGroup("repair_back:auto_static", self.repair_back)
	
	self.item_container = ui_cell_item_container.UICellItemContainer(xml, "repair_back:repair_items", self.repair_back)	

	local name
	
	self.selected_item_back = xml:InitStatic("repair_back:selected_item_back", self.repair_back)
	self.selected_item_st 	= CUIStatic()
	self.selected_item_st:SetStretchTexture(true)
	self.selected_item_back:AttachChild(self.selected_item_st)
	
	--тестове
	-- name = "selected_item"
	-- self:Register(self.selected_item_st, name)
	-- self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnFocusReceived() end, self)
	-- self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnFocusLost() end, self)
	
	self.repair_cost 		= xml:InitStatic("repair_back:repair_cost", self.repair_back)
	
	self.actor_money = xml:InitStatic("repair_back:actor_money", self.repair_back)

	self.repair_button = xml:Init3tButton("repair_back:repair_button", self.repair_back)
	name = "repair_button"
	self:Register(self.repair_button, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.ShowRepairRequest, self)
	
	self.exit_button = xml:Init3tButton("repair_back:exit_button", self.repair_back)
	name = "exit_button"
	self:Register(self.exit_button, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.DetachWnd, self)
	
	--//list item colors
	-- self.color_default 		= GetARGB(255, 255, 255, 255)
	-- self.color_highlight 	= GetARGB(255, 238, 153, 26)
	-- self.color_selected 	= GetARGB(255, 0, 255, 0)
	
	--self:InitItemsList()
end

function RepairOverlay:Update()
	CUIScriptWnd.Update(self)
end

function RepairOverlay:Reinit()
	self.selected_item_back:SetText("")
	self.selected_item_st:Show(false)
	self.repair_cost:Show(false)
	self.repair_button:Enable(false)
	self:InitItemsList()
	self.actor_money:SetText(string.format("%s: %s %s", game.translate_string("ui_inv_money"), actor:money(), game.translate_string("ui_st_money_regional")))
end

function RepairOverlay:InitItemsList()
	local items = {}
	function fill_list(dummy, item)
		if self:RepairAllowed(item) then
			table.insert(items, item)
		end
	end
	actor:iterate_inventory(fill_list, nil)
	self.item_container:Reinit()
	table.sort(items, ui_inv_utils.sort_by_size_type)
	for k, item in pairs(items) do
		self.item_container:AddItem(item)
	end
end

function RepairOverlay:OnFocusReceived()
	self.item_container:Highlight(true)
end

function RepairOverlay:OnFocusLost()
	self.item_container:Highlight(false)
end

function RepairOverlay:OnItemIconShow(item, icon)
	ui_inv_utils.AttachRepairMenuIcons(item, icon)
end

function RepairOverlay:OnItemSelect(item)
	self.selected_item = item
	params = CIconParams(item:section())
	self.selected_item_st:Show(true)
	params:set_shader(self.selected_item_st)
		
	local icon_size = vector2():set(params.grid_width * CELL_W * get_current_kx(), params.grid_height * CELL_H)
	local static_size = vector2():set(self.selected_item_back:GetWidth(), self.selected_item_back:GetHeight())
	local scale_x = static_size.x / icon_size.x
	scale_x = scale_x > 1 and 1 or scale_x
	local scale_y = static_size.y / icon_size.y
	scale_y = scale_y > 1 and 1 or scale_y
	local scale = math.min(scale_x, scale_y)	
	self.selected_item_st:SetWidth(icon_size.x * scale)
	self.selected_item_st:SetHeight(icon_size.y * scale)
		
		
	local offset = ui_inv_utils.GetOffset("center", self.selected_item_st, self.selected_item_back)
	self.selected_item_st:SetWndPos(offset.x, offset.y)
	self.selected_item_back:SetText(game.translate_string(get_inv_name(item:section())))
		
	self:UpdateRepairInfo()
end

function RepairOverlay:UpdateRepairInfo()
	local cost_text
	local color = self:HasMoneyToRepairItem(self.selected_item) and "%c[default]" or "%c[red]"
	cost_text = string.format("%s%s %s %s", 
								color,
								game.translate_string("ui_inv_repair_cost"), 
								self:GetRepairCost(self.selected_item), 
								game.translate_string("ui_st_money_regional"))
	self.repair_cost:SetText(cost_text)
	self.repair_cost:Show(true)
	self.repair_button:Enable(self:CanRepairItem(self.selected_item))
	
	ui_inv_utils.AttachRepairMenuIcons(self.selected_item, self.selected_item_st)
end

function RepairOverlay:SetRepairParams(condition_limit, cost_k, uniquie_k, armor_repair_infop)
	self.condition_limit = condition_limit
	self.cost_k = cost_k
	self.uniquie_k = uniquie_k
	self.repair_armor = (not armor_repair_infop or has_alife_info(armor_repair_infop))
	--log3("armor_repair_infop %s, self.repair_armor %s", armor_repair_infop and armor_repair_infop or "NONE", self.repair_armor)
end

function RepairOverlay:NeedRepairItem(item)
	--log3("item %s | condition %s | cond_limit %s", level.object_by_id(id):name(), level.object_by_id(id):condition(), self.condition_limit)
	return item:condition() < self.condition_limit
end

function RepairOverlay:HasMoneyToRepairItem(item)
	return actor:money() >= self:GetRepairCost(item)
end

function RepairOverlay:RepairAllowed(item)
	local outfit_item = item:is_outfit() or item:is_helmet() or item:get_container()
	local item_allowed = item:is_weapon() or (outfit_item and self.repair_armor)
	return item_allowed and self:NeedRepairItem(item)
end

function RepairOverlay:CanRepairItem(item)
	return self:NeedRepairItem(item) and self:HasMoneyToRepairItem(item)
end

function RepairOverlay:GetRepairCost(item)
	local item_cost = item:cost() * self.cost_k
	local item_corruption = 1 - item:condition()
	local unique_k = read_if_exists(sys_ini, "r_bool", item:section(), "unique_item", false) and self.uniquie_k or 1
	return math.floor(item_cost * item_corruption * unique_k)
end

function RepairOverlay:ShowRepairRequest()
	if not self:CanRepairItem(self.selected_item) then
	return end
	
	local repair_msg_box = ui_message_box.MessageBoxWnd()
	local msg_text = string.format(
		"%s %s\\n%s %s %s ?", 
		game.translate_string("st_repair_item"), 
		game.translate_string(get_inv_name(self.selected_item:section())), 
		game.translate_string("st_repair_with"), 
		self:GetRepairCost(self.selected_item),
		game.translate_string("ui_st_money_regional")
		)
	repair_msg_box:InitAction(msg_text, function() self:Repair() end)
end

function RepairOverlay:Repair()
	dialogs.relocate_money(level.get_second_talker(), self:GetRepairCost(self.selected_item), "out")

	self.selected_item:set_condition(1)
	self:UpdateRepairInfo()
	
	local sound = self.selected_item:is_weapon() and repair_sound_weapon or repair_sound_armor
	xr_sound.get_safe_sound_object(sound):play_at_pos(level.get_second_talker(),level.get_second_talker():position())
	
	self:Reinit()
end