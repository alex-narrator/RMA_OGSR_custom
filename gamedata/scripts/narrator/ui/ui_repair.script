-- -*- mode: lua; coding: windows-1251-dos -*-
local OVERLAY_XML = "script_overlays\\repair_overlay.xml"

local back_texture 		= "square_light_grey"
local color_default 	= GetARGB(0, 255, 255, 255)
local color_focused 	= GetARGB(100, 200, 200, 200)
local color_selected 	= GetARGB(170, 255, 255, 255)

local BASE_DONOR_COND_K = 0.2
local REPAIR_THRESHOLD = 0

class "RepairOverlay" (CUIScriptWnd)

local overlay = nil
local repair_sound_weapon = [[interface\item_usage\inv_repair_kit_use_fast]]
local repair_sound_armor = [[interface\item_usage\inv_repair_sewing_kit_fast]]

function create_overlay(item)
	if not condition_limit then
		condition_limit = 1
	end
	if not cost_k then
		cost_k = 1
	end
	if not uniquie_k then
		uniquie_k = 1
	end
	if not overlay then
		overlay = RepairOverlay()		
		overlay:Reinit(item)
		level.start_stop_menu(overlay, false)
	end
end

function can_repair(item)
	return item and (item:condition() < 1 and item:condition() >= REPAIR_THRESHOLD ) and ( item:is_weapon() or item:is_outfit() or item:is_helmet() or item:get_container() )
end

function RepairOverlay:__init() super()
	self:InitControls()
	self:Subscribe()
end

function RepairOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			-- {signal = "on_dialog_show", self = self, fun = self.DetachWnd},
			-- {signal = "on_dialog_hide", self = self, fun = self.DetachWnd},
			-- {signal = "on_talk_show", self = self, fun = self.DetachWnd},
			-- {signal = "on_talk_hide", self = self, fun = self.DetachWnd},
			-- {signal = "on_actor_menu_show", self = self, fun = self.OnActorMenuShow},
			-- {signal = "on_cell_item_show", self = self, fun = self.OnItemIconShow},
			{signal = "on_cell_item_select", 	self = self, fun = self.OnCellItemSelect},
			{signal = "on_drop", 				self = self, fun = self.OnDrop},
			-- {signal = "on_cell_item_db_click", self = self, fun = self.ShowRepairRequest},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function RepairOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function RepairOverlay:DetachWnd()
	level.start_stop_menu(self, true)
	self:Unsubscribe()
	self:ClearCallbacks()
	overlay = nil
end

function RepairOverlay:InitControls()
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)

	local name, prefix

	self.repair_back = xml:InitStatic("repair_back", self)
	local offset = ui_inv_utils.GetOffset("center", self.repair_back, self)
	self.repair_back:SetWndPos(offset.x, offset.y)
	
	prefix = "repair_back"
	name = "auto_static"
	
	xml:InitAutoStaticGroup(prefix..":"..name, self.repair_back)
	
	name = "repair_item"
	self.repair_item = xml:InitStatic(prefix..":"..name, self.repair_back)
	
	name = "selected_donor"
	self.selected_donor = xml:InitStatic(prefix..":"..name, self.repair_back)
	name = "selected_tool"
	self.selected_tool = xml:InitStatic(prefix..":"..name, self.repair_back)
	
	name = "repair_donors"
	self.repair_donors = ui_cell_item_container.UICellItemContainer(xml, prefix..":"..name, self.repair_back)
	name = "repair_tools"
	self.repair_tools = ui_cell_item_container.UICellItemContainer(xml, prefix..":"..name, self.repair_back)
	
	name = "repair_progress"
	self.repair_progress = xml:InitProgressBar(prefix..":"..name, self.repair_back)
	
	self.list_item_icon_scale = xml:ReadAttribFlt(prefix, "list_item_icon_scale", 1)

	name = "repair_button"
	self.repair_button = xml:Init3tButton(prefix..":"..name, self.repair_back)
	name = "repair_button"
	self:Register(self.repair_button, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.PerformRepair, self)
	
	name = "exit_button"
	self.exit_button = xml:Init3tButton(prefix..":"..name, self.repair_back)
	name = "exit_button"
	self:Register(self.exit_button, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.DetachWnd, self)
end

function RepairOverlay:Update()
	CUIScriptWnd.Update(self)
end

function RepairOverlay:Reinit(item)
	self.repair_button:Enable(false)
	self.item = nil
	self.donor_item = nil
	self.tool_item = nil
	self.res_cond_gain = nil
	self.selected_donor:DetachAll()
	self.selected_donor:SetText("")
	self.selected_tool:DetachAll()
	self.selected_tool:SetText("")
	self:SetItem(item)
	self:InitItemsList()
end

function RepairOverlay:SetItem(item)
	self.item = item
	self:AttachItemIcon(self.item, self.repair_item)
	local text = string.format("%.1f%s", self.item:condition() * 100, game.translate_string("st_percent"))
	self.repair_item:SetText(text)
end

function RepairOverlay:InitItemsList()
	self.repair_donors:Reinit()
	self.repair_tools:Reinit()
	self.repair_progress:Show(false)
	self.donors, self.tools = {}, {}
	function fill_list(dummy, item)
		if item:id() ~= self.item:id() then
			if self:IsDonor(item) then
				table.insert(self.donors, {item = item, back = CUIStatic(), static = CUIStatic()})
			end
			if self:IsRepairTool(item) then
				table.insert(self.tools, {item = item, back = CUIStatic(), static = CUIStatic()})
			end
		end
	end
	actor:iterate_inventory(fill_list, nil)
	table.sort(self.donors, ui_inv_utils.sort_by_size_type)
	table.sort(self.tools, ui_inv_utils.sort_by_size_type)
	for k, v in pairs(self.donors) do
		self.repair_donors:AddItem(v.item)
	end
	for k, v in pairs(self.tools) do
		self.repair_tools:AddItem(v.item)
	end	
end

function RepairOverlay:IsDonor(item)
	local res = item:section() == self.item:section() and not item:is_knife()
	if res then return res end
	
	local repair_compat = read_if_exists(sys_ini, "r_string", item:section(), "repair_compat", nil)
	if repair_compat then
		repair_compat = split_string(repair_compat, ",")
		for k,v in pairs (repair_compat) do
			if k == self.item:section() then
				return true
			end
		end
	end
	
	local service_type = read_if_exists(sys_ini, "r_string", item:section(), "service_type", nil)
	if service_type then
		local service_cond_threshold = read_if_exists(sys_ini, "r_float", item:section(), "service_cond_threshold", 0)
		return self.item:condition() >= service_cond_threshold and 
		(	
			(service_type == "knife" and self.item:is_knife()) or 
			(service_type == "weapon" and self.item:is_weapon() and not self.item:is_knife()) or 
			(service_type == "helmet" and self.item:is_helmet()) or 
			(service_type == "outfit" and (self.item:is_outfit() or self.item:get_container()))
		)
	end
	
	return res
end

function RepairOverlay:IsRepairTool(item)
	local repair_bonus = read_if_exists(sys_ini, "r_float", item:section(), "repair_bonus", nil)
	if not repair_bonus then
	return false end
	local repair_type = read_if_exists(sys_ini, "r_string", item:section(), "repair_type", nil)
	if not repair_type then
	return true end
	if (repair_type == "weapon" and self.item:is_weapon()) or (repair_type == "helmet" and self.item:is_helmet()) or (repair_type == "outfit" and (self.item:is_outfit() or self.item:get_container())) then
	return true end
	return false
end

function RepairOverlay:OnCellItemSelect(item, cell_item)
	if cell_item:GetOwnerID() == self.repair_donors:GetID() then
		if self.donor_item and self.donor_item:id() == item:id() then
			self.donor_item = nil
			self.selected_donor:DetachAll()
			self.selected_donor:SetText("")
			cell_item:SetSelected(false)
		else
			self.donor_item = item
			self:AttachItemIcon(self.donor_item, self.selected_donor)		
		end
	else
		if self.tool_item and self.tool_item:id() == item:id() then
			self.tool_item = nil
			self.selected_tool:DetachAll()
			self.selected_tool:SetText("")
			cell_item:SetSelected(false)
		else
			self.tool_item = item
			self:AttachItemIcon(self.tool_item, self.selected_tool)		
		end
	end
	self:UpdateRepairInfo()
end

function RepairOverlay:OnDrop(item)
	if self.repair_donors:FindItem(item) then
		self.repair_donors:RemoveItem(item)
	end
	if self.repair_tools:FindItem(item) then
		self.repair_tools:RemoveItem(item)
	end	
end

function RepairOverlay:AttachItemIcon(item, parent_wnd)
	parent_wnd:DetachAll()
	local item_static = CUIStatic()
	local icon_sect = read_if_exists(sys_ini, "r_string", item:section(), "repair_icon_sect", item:section())
	local params = CIconParams(icon_sect)
	parent_wnd:AttachChild(item_static)
	params:set_shader(item_static)
	ui_inv_utils.CellItemFitToSize(params, item_static, parent_wnd)
	local offset = ui_inv_utils.GetOffset("center", item_static, parent_wnd)
	item_static:SetWndPos(offset.x, offset.y)
end

function RepairOverlay:UpdateRepairInfo()
	self.repair_button:Enable(self.donor_item)
	
	self.res_cond_gain = 0
	if self.donor_item then
		self.res_cond_gain = read_if_exists(sys_ini, "r_float", self.donor_item:section(), "service_condition_gain", math.clamp(self.donor_item:condition() * BASE_DONOR_COND_K, 0.01, 1))
		self.res_cond_gain = self.res_cond_gain + self.res_cond_gain * campfire_effects.repair_bonus()
		local text = string.format("%+.1f%s", self.res_cond_gain * 100, game.translate_string("st_percent"))
		self.selected_donor:SetText(text)
		
		
	end
	if self.tool_item then
		local bonus = read_if_exists(sys_ini, "r_float", self.tool_item:section(), "repair_bonus", 0)
		
		if self.donor_item then
			self.res_cond_gain = self.res_cond_gain * bonus
		end
		text = string.format("x%.1f", bonus)
		self.selected_tool:SetText(text)
	end
	
	local text
	if self.res_cond_gain > 0 then
		text = string.format("%.1f%s (%+.1f%s)", math.clamp(self.item:condition() + self.res_cond_gain, 0, 1) * 100, game.translate_string("st_percent"), self.res_cond_gain * 100, game.translate_string("st_percent"))
	else
		text = string.format("%.1f%s", self.item:condition() * 100, game.translate_string("st_percent"))
	end
	self.repair_item:SetText(text)
end

function RepairOverlay:PerformRepair()
	local sound = read_if_exists(sys_ini, "r_string", self.donor_item:section(), "use_sound", self.item:is_weapon() and repair_sound_weapon or repair_sound_armor)
	local snd = xr_sound.get_safe_sound_object(sound)
	local length = snd:length()
	local snd_end_time = time_global() + length
	snd:play_at_pos(actor, actor:position())
	
	self.repair_progress:Show(true)
	
	if self.donor_item then
		service_kit.prepair(self.donor_item)
		local use_count = read_if_exists(sys_ini, "r_u32", self.donor_item:section(), "use_count", 1)
		if use_count > 0 then
			self.donor_item:change_condition(-1/use_count)
			if self.donor_item:condition() == 0 then
				if self.donor_item:parent() then
					self.donor_item:parent():drop_item(self.donor_item)
				end			
				alife():release(alife():object(self.donor_item:id()), true)
			end
		end		
	end
	
	if self.tool_item then
		local use_count = read_if_exists(sys_ini, "r_u32", self.tool_item:section(), "use_count", 0)
		if use_count > 0 then
			self.tool_item:change_condition(-1/use_count)
			if self.tool_item:condition() == 0 then
				if self.tool_item:parent() then
					self.tool_item:parent():drop_item(self.tool_item)
				end			
				alife():release(alife():object(self.tool_item:id()), true)
			end
		end
	end	
	
	level.disable_input()
	
	level.add_call(
		function()
			local val = math.clamp((snd_end_time - time_global()) / length, 0, 1)
			val = 1 - val
			self.repair_progress:SetProgressPos(val)
			return not snd or not snd:playing()
		end,
		function()
			level.enable_input()
			self.item:change_condition(self.res_cond_gain)
			-- local cell_item = actor_menu:GetCellItem(self.item)
			-- if cell_item then
				-- cell_item:ForceUpdate()
			-- end
			if can_repair(self.item) then
				self:Reinit(self.item)
			else
				self:DetachWnd()
			end
			--actor_menu:ReinitLists()
		end		
	)
end