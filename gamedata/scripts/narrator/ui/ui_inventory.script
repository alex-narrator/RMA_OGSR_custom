local overlay = nil

function attach(sm)
	sm:subscribe({signal = "on_spawn",   fun = this.create_window})
	sm:subscribe({signal = "on_destroy",   fun = this.destroy_window})
end

local subscribed = false

function create_window()
	if not overlay then
		overlay = InventoryOverlay(level.get_inventory_wnd())
	end
end

function destroy_window()
	if overlay then
		overlay:DetachWnd()
		overlay = nil
	end
end

class "InventoryOverlay" (CUIScriptWnd)

function InventoryOverlay:__init(owner) super()
	self.owner = owner
	self:InitControls()
	self:Subscribe()
end

function InventoryOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_cell_item_focus", self = self, fun = self.OnCellItemFocus},
			{signal = "on_cell_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
			{signal = "on_quick_item_set", self = self, fun = self.OnQuickItemSet},
			{signal = "on_use", self = self, fun = self.UpdateSlots},
			--{signal = "on_item_to_loadout", self = self, fun = self.UpdateSlots},
			--{signal = "on_item_from_loadout", self = self, fun = self.UpdateSlots},
			{signal = "on_loadout_update_count", self = self, fun = self.UpdateSlots},
			{signal = "on_loadout_update_max_count", self = self, fun = self.UpdateSlots},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function InventoryOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function InventoryOverlay:DetachWnd()
	quick_slots.set_selected(nil)
	self:Unsubscribe()
	self:ClearCallbacks()
	for k, v in pairs(self.slot_keys) do
		v.parent:DetachChild(v.static)
	end
	self.owner:DetachChild(self)
end

function InventoryOverlay:InitControls()
	self.owner:AttachChild(self)
	self:Init(0, 0, 1024, 768)
	self:Enable(true)
	self:Show(true)
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\inventory_overlay.xml")

	self.background = xml:InitStatic("background", self)
	
	--// actor condition progressbars
	self.conditions = {
		["health_"] 	= { condition = function() return actor.health end },
		["psy_"] 		= { condition = function() return actor.psy_health end },
		["power_"] 		= { condition = function() return actor.power end },
		["satiety_"] 	= { condition = function() return actor.satiety end },
		["alcohol_"] 	= { condition = function() return actor.alcohol end },
		["radiation_"] 	= { condition = function() return actor.radiation end },
	}
	
	for k, v in pairs(self.conditions) do
		v.static = xml:InitStatic(k.."static", self.background)
		v.icon = xml:InitStatic(k.."icon", v.static)
		v.progress = xml:InitProgressBar(k.."progress", v.static)	
		v.hint = xml:InitStatic("condition_hint", v.static)
		v.hint:Show(false)

		self:Register(v.static, k)
		self:AddCallback(k, ui_events.STATIC_FOCUS_RECEIVED, function() self:ConditionOnFocusReceived(k) end)
		self:AddCallback(k, ui_events.STATIC_FOCUS_LOST, function() self:ConditionOnFocusLost(k) end)
	end
	
	--// quick slots
	self.quick_slots_back = xml:InitStatic("quick_slots_back", self)
	
	--//slot colors
	self.quick_color_default 	= GetARGB(0, 255, 255, 255)
	self.quick_color_highlight 	= GetARGB(45, 255, 255, 255)
	self.quick_color_has_item 	= GetARGB(255, 255, 255, 255)
	self.quick_color_no_item 	= GetARGB(120, 255, 255, 255)
	
	self.slots = {}
	for i=0,3 do
		local s = xml:InitStatic("quick_slot_"..i, self.quick_slots_back)
		self.slots[i] = s
		s:SetColor(self.quick_color_default)
		
		local key_text = "ui_quick_slot_"..i
		s:SetText(game.translate_string(key_text))
		
		s.icon = xml:InitStatic("slot_icon", s)
		s.icon:InitTexture("ui\\ui_icon_equipment")
		
		s.count = xml:InitStatic("slot_count", s)
		
		local name = "quick_"..i
		self:Register(s, name)
		self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:QuickOnFocusReceived(i) end, self)
		self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:QuickOnFocusLost(i) end, self)
		self:AddCallback(name, ui_events.WINDOW_LBUTTON_DB_CLICK, function() self:QuickOnDbClick(i) end, self)
		
		self:DrawSlotIcon(i)
	end
	
	self.slot_keys = {
		[0] = {parent = self.owner:FindChild("dragdrop_knife")},
		[1] = {parent = self.owner:FindChild("dragdrop_first_weapon")},
		[2] = {parent = self.owner:FindChild("dragdrop_second_weapon")},
		[3] = {parent = self.owner:FindChild("dragdrop_grenade")},
		[4] = {parent = self.owner:FindChild("dragdrop_binocular")},
		[8] = {parent = self.owner:FindChild("dragdrop_detector")},
		[10] = {parent = self.owner:FindChild("dragdrop_artefact")},
	}
	for k, v in pairs(self.slot_keys) do
		v.static = xml:InitStatic("slot_key", v.parent)
		local key_text = "ui_use_slot_"..k
		v.static:SetText(game.translate_string(key_text))
	end
	
	--//loadout
	--//loadout colors
	self.loadout_color_default 		= GetARGB(255, 255, 255, 255)
	self.loadout_color_highlight 	= GetARGB(255, 0, 255, 0)
	self.loadout_color_blocked 		= GetARGB(255, 255, 0, 0)
	self.loadout_color_equiped 		= GetARGB(255, 238, 153, 26)
	self.loadout_color_hidden 		= GetARGB(0, 255, 255, 255)
	
	self.loadout = loadout.slot_space
	self.loadout_back = xml:InitStatic("loadout_back", self)
	self.clear_loadout = xml:Init3tButton("clear_loadout_button", self.loadout_back)
	self:Register(self.clear_loadout, "clear_loadout")
	self:AddCallback("clear_loadout", ui_events.BUTTON_CLICKED, self.ClearLoadout, self)
	for k,v in pairs(self.loadout) do
		v.static = xml:InitStatic(k.."_static", self.loadout_back)
		v.static:SetTextColor(self.loadout_color_default)
		v.icon = xml:InitStatic(k.."_icon", v.static)
		--v.icon:SetColor(self.loadout_color_default)
		v.max = function() return loadout.slot_space[k].max_count end
		v.curr = function() return loadout.slot_space[k].current_count end
		
		v.hint = xml:InitStatic("loadout_hint", self.loadout_back)--v.static)
		v.hint:SetText(game.translate_string(string.format("%s%s%s","st_", k, "_hint")))
		v.hint:Show(false)
		self:Register(v.static, k)
		self:AddCallback(k, ui_events.STATIC_FOCUS_RECEIVED, function() self:LoadoutOnFocusReceived(k) end)
		self:AddCallback(k, ui_events.STATIC_FOCUS_LOST, function() self:LoadoutOnFocusLost(k) end)		
	end
	self:UpdateSlots()
end

function InventoryOverlay:QuickOnFocusReceived(slot_num)
	quick_slots.set_selected(slot_num)
	self.slots[slot_num]:SetColor(self.quick_color_highlight)
end

function InventoryOverlay:QuickOnFocusLost(slot_num)
	quick_slots.set_selected(nil)
	self.slots[slot_num]:SetColor(self.quick_color_default)
end

function InventoryOverlay:OnCellItemFocus(obj)
	local highlight_quick_slots = read_if_exists(sys_ini, "r_bool", obj:section(), "quick_slot", false)
	if highlight_quick_slots then
		for i=0,3 do
			self.slots[i]:SetColor(self.quick_color_highlight)
		end
	end
	local slot_type = loadout.get_slot_type(obj)
	if slot_type then
		for k,v in pairs(self.loadout) do
			if slot_type == k then
				local color = self.loadout_color_blocked
				if obj.marked then
					color = self.loadout_color_equiped
				end
				if loadout.can_take(obj) then
					color = self.loadout_color_highlight
				end
				v.static:SetTextColor(color)
				--v.icon:SetColor(color)
			end
		end
	end
end

function InventoryOverlay:OnCellItemFocusLost(obj)
	for i=0,3 do
		self.slots[i]:SetColor(self.quick_color_default)
	end
	for k,v in pairs(self.loadout) do
		v.static:SetTextColor(self.loadout_color_default)
		--v.icon:SetColor(self.loadout_color_default)
	end
end


function InventoryOverlay:DrawSlotIcon(slot_num)
	local s = self.slots[slot_num]
	local sect = quick_slots.get_item_sect(slot_num)
	local params = GetIconParams(sect)
	
	local count = quick_slots.get_item_count(slot_num)
	local count_text = string.format("x%s", count)
	s.count:SetText(count_text)
	s.count:Show(count > 0)
	
	s.icon:SetOriginalRect(params.x, params.y, params.w, params.h)
			
	if count > 0 then
		s.icon:SetColor(self.quick_color_has_item)
	else
		s.icon:SetColor(self.quick_color_no_item)
	end
end

function InventoryOverlay:OnQuickItemSet(section, slot_num)
	self:UpdateSlots()
end

function InventoryOverlay:QuickOnDbClick(slot_num)
	quick_slots.set_item("", slot_num)
	self:UpdateSlots()
end

function InventoryOverlay:UpdateSlots()
	for i=0,3 do
		self:DrawSlotIcon(i)
	end
	
	local loadout_slot_text
	for k,v in pairs(self.loadout) do
		loadout_slot_text = string.format("[%s/%s] %s", v.curr(), v.max(), game.translate_string(k))
		v.static:SetText(loadout_slot_text)
	end
end

function InventoryOverlay:CheckNeedUpdate(obj, prev_place)
	local item_allowed = read_if_exists(sys_ini, "r_bool", obj:section(), "quick_slot", false)
	if not item_allowed then
		return
	end
	self:UpdateSlots()
end

function InventoryOverlay:ConditionOnFocusReceived(cond_name)
	self.conditions[cond_name].hint:Show(true)
	self.conditions[cond_name].progress:Show(false)
end

function InventoryOverlay:ConditionOnFocusLost(cond_name)
	self.conditions[cond_name].hint:Show(false)
	self.conditions[cond_name].progress:Show(true)
end

function InventoryOverlay:LoadoutOnFocusReceived(slot_name)
	self.loadout[slot_name].hint:Show(true)
	self.loadout[slot_name].static:SetTextColor(self.loadout_color_equiped)
end

function InventoryOverlay:LoadoutOnFocusLost(slot_name)
	self.loadout[slot_name].hint:Show(false)
	self.loadout[slot_name].static:SetTextColor(self.loadout_color_default)
end

function InventoryOverlay:Update()
	CUIScriptWnd.Update(self)
	
	local hint_text
	local cond_descr
	for k,v in pairs(self.conditions) do
		local val = v.condition() * 100
		v.progress:SetProgressPos(val)
		cond_descr = game.translate_string(string.format("%s%s%s","st_", k, "hint"))
		hint_text = string.format("%s %.0f%s",cond_descr, val, "%")
		v.hint:SetText(hint_text)
	end
end

function InventoryOverlay:ClearLoadout()
	loadout.clear_all()
end