local overlay = nil
local actor

function attach(sm)
	sm:subscribe({signal = "on_inventory_show",   fun = this.process_show})
end

local subscribed = false

function process_show()
	if not subscribed then
		subscribed = {
			{signal = "on_inventory_hide", fun = this.process_hide},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:subscribe( s )
		end
	end
	
	actor = db.actor
	if not overlay then
		overlay = InventoryOverlay(level.main_input_receiver())
	end
end

function process_hide()
	if subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:unsubscribe( s )
		end
		subscribed = false
	end
	
	if overlay then
		overlay:DetachWnd()
		overlay = nil
	end
end

class "InventoryOverlay" (CUIScriptWnd)

function InventoryOverlay:__init(owner) super()
	self.owner = owner
	self:Init(0, 0, 1024, 768)
	self:InitControls()
	self:Subscribe()
end

function InventoryOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_update", self = self, fun = self.UpdateOverlay},
			{signal = "on_cell_item_focus", self = self, fun = self.OnCellItemFocus},
			{signal = "on_cell_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
			{signal = "on_quick_item_set", self = self, fun = self.OnQuickItemSet},
			{signal = "on_eat", self = self, fun = self.UpdateSlots},
			{signal = "on_slot", self = self, fun = self.UpdateSlots},
			{signal = "on_ruck", self = self, fun = self.UpdateSlots},
			{signal = "on_belt", self = self, fun = self.UpdateSlots},
			{signal = "on_vest", self = self, fun = self.UpdateSlots},
			{signal = "on_drop", self = self, fun = self.UpdateSlots},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function InventoryOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function InventoryOverlay:DetachWnd()
	quick_slots.set_selected(nil)
	self:Unsubscribe()
	if self.main then
		self:ClearCallbacks()
		self.owner:DetachChild(self.main)
	end
end

function InventoryOverlay:InitControls()
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\inventory_overlay.xml")

	self.main = CUIStatic()
	self.main:Init(0, 0, 1024, 768)
	self.owner:AttachChild(self.main)
	
	self.background = xml:InitStatic("background", self.main)
	
	--// actor condition progressbars
	self.health_st = xml:InitStatic("static_health", self.background)
	self.health_bar = xml:InitProgressBar("progress_health", self.health_st)
	
	self.psy_st = xml:InitStatic("static_psy", self.background)
	self.psy_bar = xml:InitProgressBar("progress_psy", self.psy_st)
	
	self.power_st = xml:InitStatic("static_power", self.background)
	self.power_bar = xml:InitProgressBar("progress_power", self.power_st)
	
	self.satiety_st = xml:InitStatic("static_satiety", self.background)
	self.satiety_bar = xml:InitProgressBar("progress_satiety", self.satiety_st)
	
	self.alcohol_st = xml:InitStatic("static_alcohol", self.background)
	self.alcohol_bar = xml:InitProgressBar("progress_alcohol", self.alcohol_st)
	
	self.radiation_st = xml:InitStatic("static_radiation", self.background)
	self.radiation_bar = xml:InitProgressBar("progress_radiation", self.radiation_st)
	
	--// quick slots
	self.quick_slots_back = xml:InitStatic("quick_slots_back", self.main)
	self.slots = {}
	local indent = 2 --відступ між елементами
	local pos_x = 4 --початкова позиція по х
	for i=0,3 do
		local s = xml:InitStatic("quick_slot", self.quick_slots_back)
		self.slots[i] = s
		s:SetColor(GetARGB(0, 255, 255, 255))
		
		local key_text = "ui_quick_slot_"..i
		s:SetText(game.translate_string(key_text))
		
		s:SetWndPos(pos_x, s:GetPosTop())
		pos_x = pos_x + s:GetWidth() + indent
		
		s.icon = xml:InitStatic("slot_icon", s)
		s.icon:InitTexture("ui\\ui_icon_equipment")
		
		s.count = xml:InitStatic("slot_count", s)
		
		local name = "quick_"..i
		self:Register(s, name)
		self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:QuickOnFocusReceived(i) end, self)
		self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:QuickOnFocusLost(i) end, self)
		self:AddCallback(name, ui_events.WINDOW_LBUTTON_DB_CLICK, function() self:QuickOnDbClick(i) end, self)
		
		self:DrawSlotIcon(i)
	end
end

function InventoryOverlay:QuickOnFocusReceived(slot_num)
	quick_slots.set_selected(slot_num)
	self.slots[slot_num]:SetColor(GetARGB(45, 255, 255, 255))
end

function InventoryOverlay:QuickOnFocusLost(slot_num)
	quick_slots.set_selected(nil)
	self.slots[slot_num]:SetColor(GetARGB(0, 255, 255, 255))
end

function InventoryOverlay:OnCellItemFocus(obj)
	local highlight_quick_slots = read_if_exists(sys_ini, "r_bool", obj:section(), "quick_slot", false)
	if not highlight_quick_slots then return
	end
	for i=0,3 do
		self.slots[i]:SetColor(GetARGB(45, 255, 255, 255))
	end
end

function InventoryOverlay:OnCellItemFocusLost(obj)
	for i=0,3 do
		self.slots[i]:SetColor(GetARGB(0, 255, 255, 255))
	end
end

function InventoryOverlay:DrawSlotIcon(slot_num)
	local s = self.slots[slot_num]
	local sect = quick_slots.get_item_sect(slot_num)
	local params = GetIconParams(sect)
	
	local count = quick_slots.get_item_count(slot_num)
	local count_text = string.format("x%s", count)
	s.count:SetText(count_text)
	s.count:Show(count > 0)
	
	s.icon:SetOriginalRect(params.x, params.y, params.w, params.h)
	if count > 0 then
		s.icon:SetColor(GetARGB(255, 255, 255, 255))
	else
		s.icon:SetColor(GetARGB(120, 255, 255, 255))
	end
end

function InventoryOverlay:OnQuickItemSet(section, slot_num)
	self:UpdateSlots()
end

function InventoryOverlay:QuickOnDbClick(slot_num)
	quick_slots.set_item("", slot_num)
	self:UpdateSlots()
end

function InventoryOverlay:UpdateSlots()
	for i=0,3 do
		self:DrawSlotIcon(i)
	end
end

function InventoryOverlay:CheckNeedUpdate(obj, prev_place)
	local item_allowed = read_if_exists(sys_ini, "r_bool", obj:section(), "quick_slot", false)
	if not item_allowed then
		return
	end
	self:UpdateSlots()
end

function InventoryOverlay:UpdateOverlay()
	local pos = actor.health
	self.health_bar:SetProgressPos(pos * 100)
	pos = actor.psy_health
	self.psy_bar:SetProgressPos(pos * 100)
	pos = actor.power
	self.power_bar:SetProgressPos(pos * 100)
	pos = actor.satiety
	self.satiety_bar:SetProgressPos(pos * 100)
	pos = actor.alcohol
	self.alcohol_bar:SetProgressPos(pos * 100)
	pos = actor.radiation
	self.radiation_bar:SetProgressPos(pos * 100)
end