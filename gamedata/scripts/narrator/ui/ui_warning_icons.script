-- -*- mode: lua; coding: windows-1251-dos -*-
local DEBUG_WARNING_SHOW = false

local thresholds_sect = "main_ingame_indicators_thresholds"

class "WarningIcons" (CUIScriptWnd)

function WarningIcons:__init(xml, owner) super()
	self.sm = ogse_signals.get_mgr()
	self:InitWnd(xml, owner)
end

function WarningIcons:DetachWnd()
	self:ClearCallbacks()
end

function WarningIcons:InitWnd(xml, owner)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	owner:AttachChild(self)
	self:Enable(true)
	self:Show(true)
	
	self.warning_icons_back = xml:InitStatic("warning_icons_back", self)
	self.warning_icons_horz = (xml:ReadAttribInt("warning_icons_back", "horz", 0) > 0) and true or false
	self.warning_icons = {
		--//actor conditions
		{ name = "bleeding", 		val = function() return actor:get_bleeding() end },
		{ name = "radiation", 		val = function() return dosimeter.can_detect_radiation() and actor.radiation or 0 end },
		{ name = "psy_health", 		val = function() return 1 - actor.psy_health end },
		{ name = "starvation", 		val = function() return 1 - actor.satiety end },
		{ name = "alcohol", 		val = function() return actor.alcohol end },
		{ name = "somnolence", 		val = function() return somnolence.get_val() end },
		{ name = "limbs_injure", 	val = function() return body_health.get_injured_limb() end },
		{ name = "overweight", 		val = function() return inventory.get_overweight() end },
		--//gear
		{ name = "weapon", 			val = function() return (actor:active_item() and not actor:active_item():is_knife()) and 1 - actor:active_item():condition() or 0 end },
		{ name = "knife", 			val = function() return (actor:active_item() and actor:active_item():is_knife()) and 1 - actor:active_item():condition() or 0 end },
		{ name = "armor", 			val = function() return actor_get_outfit() and 1 - actor_get_outfit():condition() or 0 end },
		{ name = "helmet", 			val = function() return actor_get_helmet() and 1 - actor_get_helmet():condition() or 0 end },
		--//states
		{ name = "safehouse", 		val = function() return actor:has_info("safehouse") end },		
		{ name = "use_campfire", 	val = function() return campfire_effects.actor_used_campfire() end },
		--//dev mode
		{ name = "godmode", 		val = function() return is_god_mode() end },
		{ name = "unlimited_ammo", 	val = function() return is_unlimited_ammo() end },		
	}
	for k,v in ipairs(self.warning_icons) do
		v.icon = xml:InitStatic("warning_icons_back:"..v.name, self.warning_icons_back)
		v.icon:Show(false)
		//v.threshold = split_string(xml:ReadAttrib("warning_icons_back:"..v.name, "threshold", nil), ",", true)
		v.threshold = split_string(read_if_exists(sys_ini, "string", thresholds_sect, v.name, nil), ",", true)
		
		self:Register(v.icon, v.name)
		self:AddCallback(v.name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnFocusReceived(v.name, v.icon) end)
		self:AddCallback(v.name, ui_events.STATIC_FOCUS_LOST, function() self:OnFocusLost(v.name, v.icon) end)
		
		if v.icon:GetHeight() > self.warning_icons_back:GetHeight() then
			self.warning_icons_back:SetHeight(v.icon:GetHeight())
		end
		if v.icon:GetWidth() > self.warning_icons_back:GetWidth() then
			self.warning_icons_back:SetWidth(v.icon:GetWidth())
		end		
	end
end

function WarningIcons:Update()
	CUIScriptWnd.Update(self)
	
	local color, val, _v, _min, _max, size
	local pos = vector2():set(0,0)
	for k,v in ipairs(self.warning_icons) do
		if DEBUG_WARNING_SHOW then
			v.icon:Show(true)
		elseif not v.threshold then
			if v.name == "limbs_injure" then
				v.icon:Show(v.val() ~= "none")
				if v.icon:IsShown() then
					local actual_icon = "ui_hud_trauma_"..v.val()
					if self.limbs_injure_icon ~= actual_icon then
						v.icon:InitTexture(actual_icon)
						self.limbs_injure_icon = actual_icon
					end
					color = GetARGB(100, 238, 153, 26)
					local pain_eff = body_health.get_pain_effect()
					if pain_eff > 0 then
						color = GetARGB(100, 255, 0, 0)
					elseif pain_eff < 0 then
						color = GetARGB(100, 0, 255, 0)
					end
					v.icon:SetColor(color)
				end
			else
				v.icon:Show(v.val())
			end
		else
			size = table.size(v.threshold)
			_min = v.threshold[1]
			if size > 1 then
				val = v.val()
				if val < _min then
					v.icon:Show(false)
				else
					_max = v.threshold[size]
					for i=1, size do
						if (val >= v.threshold[i]) and (not v.threshold[i+1] or val < v.threshold[i+1]) then
							val = v.threshold[i]
							break
						end
					end
					_v = (val - _min) / (_max - _min) * 2
					color = GetARGB(255, math.clamp(255 * _v, 0, 255), math.clamp(255 * (2 - _v), 0, 255), 0)
					v.icon:SetColor(color)
					v.icon:Show(true)
				end
			else
				val = 1 - v.val();
				local threshold = 1 - _min
				threshold = math.clamp(threshold, 0.01, 1)
				if val <= threshold then
					_v = val / threshold
					_v = math.clamp(_v, 0, 1)
					color = GetARGB(255, 255, 255 * _v, 0)
					v.icon:SetColor(color)
					v.icon:Show(true)
				else
					v.icon:Show(false)
				end
			end
		end
		
		if v.icon:IsShown() then
			v.icon:SetWndPos(pos.x, pos.y)
			if self.warning_icons_horz then
				pos.x = pos.x + v.icon:GetWidth()
				self.warning_icons_back:SetWidth(pos.x)
			else
				pos.y = pos.y + v.icon:GetHeight()
				self.warning_icons_back:SetHeight(pos.y)
			end
		end
	end	
end

function WarningIcons:OnFocusReceived(name, icon)
	self.sm:call("on_warning_icon_focus", name, icon)
	--log3("~WarningIcons:OnFocusReceived %s", name)
end

function WarningIcons:OnFocusLost(name, icon)
	self.sm:call("on_warning_icon_focus_lost", name, icon)
	--log3("~WarningIcons:OnFocusLost %s", name)
end