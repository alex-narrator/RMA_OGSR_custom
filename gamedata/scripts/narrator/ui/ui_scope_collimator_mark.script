-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press", 				fun = this.on_key_press})
	sm:subscribe({signal = "on_first_update", 			fun = this.on_first_update})
	sm:subscribe({signal = "on_save", 					fun = this.on_save})
	sm:subscribe({signal = "on_load",   				fun = this.on_load})
	sm:subscribe({signal = "on_hud_state_switch",   	fun = this.on_state_switch})
	sm:subscribe({signal = "on_before_addon_detach", 	fun = this.on_before_addon_detach})
	sm:subscribe({signal = "on_actor_weapon_scope_mode_change",  fun = this.on_scope_mode_change})
end

local switch_mark_action = {
	[key_bindings.kSWITCH_MARK] = true,
}

local effector_id = 5559
local effector_name = [[camera_effects\item_use\mark_adjust.anm]]
local sound = xr_sound.get_safe_sound_object("interface\\mark_adjust")

local selected_marks = {}

function on_save(packet)
	xr_vars.save_var("selected_marks", selected_marks)
end

function on_load(reader)
	selected_marks = xr_vars.load_var("selected_marks", selected_marks)
end

function get_current_mark_num(id)
	return selected_marks[id]
end

function set_current_mark_num(id, mark_num)
	selected_marks[id] = mark_num
end

function on_first_update()
	for id,_ in pairs(selected_marks) do
		local se_item = alife():object(id)
		if not se_item or not se_item:get_weapon() then
			set_current_mark_num(id, nil)
			--log3("~remove item id %s from marks list", id)
		end
	end
end

function get_marks_count(item)
	local wpn = item:get_weapon()
	if not wpn or (wpn:aim_alt_mode() and not read_if_exists(sys_ini, "r_bool", item:section(), "collimator_mark_alt_enable", false)) then
	return 0 end
	local sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or item:section()
	return read_if_exists(sys_ini, "r_u32", sect, "collimator_mark_count", 0)
end

function can_switch_marks(item)
	return get_marks_count(item) > 0
end

function apply_mark(current, count)
	set_markswitch_params(current, count, 0, 0)
	--set_markswitch_current(current)
	--set_markswitch_count(count)
	--log3("~apply mark %s | count %s", current, count)
end

function on_key_press(key, game_action)
	if not switch_mark_action[game_action] then
	return end
	local act_item = actor:active_item()
	if not act_item then
	return end
	local marks_count = get_marks_count(act_item)
	if marks_count == 0 then
	return end
	
	local fwd = not level.get_key_state(bind_to_dik(key_bindings.kADDITIONAL_ACTION))
	
	local mark_num = get_current_mark_num(act_item:id()) or 0
	
	mark_num = fwd and mark_num + 1 or mark_num - 1
	
	local max_mark = marks_count - 1
	
	if mark_num > max_mark then
		mark_num = 0
	elseif mark_num < 0 then
		mark_num = max_mark
	end
	
	apply_mark(mark_num, marks_count)
	
	set_current_mark_num(act_item:id(), mark_num)
	
	level.add_cam_effector(effector_name, effector_id, false, "")
	sound:play(actor, 0, sound_object.s2d)		
end

function try_apply_mark(weapon)
	local marks_count = get_marks_count(weapon)
	if marks_count == 0 then
		apply_mark(0, 0)
	return end
	local current_mark = get_current_mark_num(weapon:id()) or 0
	apply_mark(current_mark, marks_count)
end

function on_state_switch(item, state, old_state)
	local process = state == global_flags.eIdle and old_state == global_flags.eShowing
	if not process then
	return end
	try_apply_mark(item)
end

function on_before_addon_detach(item, addon_sect)
	local scopes = read_if_exists(sys_ini, "r_string", item:section(), "scope_name", nil)
	if not scopes then
	return end
	if not string.find(scopes, addon_sect) then
	return end
	if not can_switch_marks(item) then
	return end
	apply_mark(0, 0)
	if get_current_mark_num(item:id()) then
		set_current_mark_num(item:id(), nil)
	end
end

function on_scope_mode_change(weapon)
	try_apply_mark(weapon)
end