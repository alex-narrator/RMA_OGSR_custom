-- -*- mode: lua; coding: windows-1251-dos -*-
local OVERLAY_XML = "script_overlays\\sleep_overlay.xml"

local subscribed = false

function show_sleep_window()
	level.start_stop_menu(SleepOverlay(),true)
end

class "SleepOverlay" (CUIScriptWnd)

function SleepOverlay:__init() super()
	self.sleep_h = 1
	self.sleep_m = 0	
	self:InitControls()
end

function SleepOverlay:InitControls()
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	
	local name
	--//background
	self.back = xml:InitStatic("background", self)
	xml:InitAutoStaticGroup("background:auto_static", self.back)

	--//date/time
	self.date_time = xml:InitFrameLine("time_frame_line", self.back)
	self.date = xml:InitStatic("date", self.date_time)
	self.time = xml:InitStatic("time", self.date_time)
	
	name = "sleep_track"
	self.time_track = xml:InitTrackBar("time_track", self.back)
	self:Register(self.time_track, name)
	self:AddCallback(name, ui_events.TRACKBAR_CHANGED, self.ChangeTime, self)
	
	--//skip timer
	self.timer_line = xml:InitFrameLine("timer_frame_line", self.back)
	self.time_value = xml:InitStatic("time_value", self.timer_line)
	
	name = "sleep_button"
	self.skip_time = xml:Init3tButton("sleep_button", self.back)
	self:Register(self.skip_time, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.StartSleep, self)
		
	--// quit button
	name = "quit_button"
	self.quit_button = xml:Init3tButton("quit_button", self.back)
	self:Register(self.quit_button, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.Hide, self)
	
	--//НЕ ВИДАЛЯТИ!
	--//без встановлення значення трекбар буде працювати в режимі тригера true/false
	self.time_track:SetTrackValue(self.sleep_h)
	self:ChangeTime()
end

function SleepOverlay:Update()
	CUIScriptWnd.Update(self)
	local pda = actor_get_pda()
	
	local has_pda_power = pda and pda:is_power_on()
	self.date_time:Show(has_pda_power)
	
	local _time = game.get_game_time()
	local date_text = string.format("%s %s", get_current_weekday_name(true), _time:dateToString(game.CTime.DateToDay))
	self.date:SetText(date_text)
	self.time:SetText(_time:timeToString(game.CTime.TimeToMinutes))
end

function SleepOverlay:ChangeTime()
	self.sleep_h = self.time_track:GetTrackValue()
	local tmp = string.format("%d %s", self.sleep_h, game.translate_string("ui_st_hours"))
	self.time_value:SetText(tmp)
end

function SleepOverlay:StartSleep()
	if not sleep_manager.can_sleep() then
		sleep_manager.show_cant_sleep_msg()
		self:Hide()
	return end
	if self.sleep_h == 0 and self.sleep_m == 0 then
	return end
	sleep_manager.start_sleep(self.sleep_h, self.sleep_m)
	self:Hide()
end

local actions = {
	[key_bindings.kLEFT] = true,
	[key_bindings.kRIGHT] = true,
}
local keys = {
	[DIK_keys.DIK_A] = true,
	[DIK_keys.DIK_D] = true,
}

function SleepOverlay:OnKeyboard(dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		local dk = dik_to_bind(dik)
		if actions[dk] or keys[dik] then
			local add = (dk == key_bindings.kLEFT or dik == DIK_keys.DIK_A) and -1 or 1
			self.sleep_h = math.clamp(self.sleep_h + add, 1, 24)
			self.time_track:SetTrackValue(self.sleep_h)
			self:ChangeTime()
			return true
		end
	end
	return CUIScriptWnd.OnKeyboard( self, dik, keyboard_action )
end

function SleepOverlay:Hide()
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self,true)
end