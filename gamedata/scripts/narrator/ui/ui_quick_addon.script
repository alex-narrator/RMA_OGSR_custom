-- -*- mode: lua; coding: windows-1251-dos -*-
local OVERLAY_XML = "script_overlays\\ui_quick_addon_overlay.xml"

local subscribed = false
local sm = ogse_signals.get_mgr()

local color_focused = GetARGB(255, 255, 255, 0)

class "QuickAddonOverlay" (CUIScriptWnd)

function QuickAddonOverlay:__init() super()
	self:InitControls()
	--self:Subscribe()
end

function QuickAddonOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			--{signal = "on_key_release", self = self, fun = self.OnKeyRelease},
			{signal = "on_quick_addon_show", self = self, fun = self.OnShow},
			{signal = "on_quick_addon_hide", self = self, fun = self.OnHide},
			{signal = "on_drop", self = self, fun = self.UpdateCompatible},
			{signal = "on_hud_state_switch", self = self, fun = self.UpdateCompatible},
		}
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function QuickAddonOverlay:Unsubscribe()
	if self.subscribed then
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function QuickAddonOverlay:InitControls()
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	
	local name
	--//background
	self.back = xml:InitStatic("background", self)
	xml:InitAutoStaticGroup("background:auto_static", self.back)
	
	self.menu_time_factor = xml:ReadAttribFlt("background", "menu_time_factor", 1)
	self.items_indent = xml:ReadAttribFlt("background", "items_indent", 0)
	self.back_texture = xml:ReadAttrib("background", "back_texture", "ui_inv_back_gray")
	
	local name = "central"
	self.central = xml:InitStatic(name, self)
	self.central.color = self.central:GetColor()
	self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnCentralFocusReceived() end)
	self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnCentralFocusLost() end)
	self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:ShowHide() end)
	
	name = "close"
	self.close = xml:InitStatic("central:"..name, self.central)
	local offset = ui_inv_utils.GetOffset("center", self.close, self.central)
	self.close:SetWndPos(offset.x, offset.y)
	
	self.tip_scopes = xml:InitStatic("tip_scopes", self)
	self.tip_silencers = xml:InitStatic("tip_silencers", self)
	self.tip_launchers = xml:InitStatic("tip_launchers", self)
	self.tip_items = xml:InitStatic("tip_items", self)
end

function QuickAddonOverlay:Update()
	CUIScriptWnd.Update(self)
	if not self.target_item_id then
		self:ShowHide()
	end
end

function QuickAddonOverlay:CheckBelt(check_item)
	local base_pos = self.central:GetWndPos()
	local base_size = vector2():set(self.central:GetWidth(), self.central:GetHeight())
	local pos_down = vector2():set(base_pos.x, base_pos.y + base_size.y + self.items_indent)
	
	for i = 0, actor:belt_count() - 1 do
		local can_set = false
		local item = actor:item_on_belt(i)
		local slots = item:get_inventory_item().slots
		for k,v in pairs(slots) do
			if v == check_item:get_slot() then
				can_set = true
				break
			end
		end
		if can_set then
			self.target_item_id = check_item:id()
				
			local name = "belt_"..i
			
			local item_back = CUIStatic()
			item_back:Init(pos_down.x, pos_down.y, base_size.x, base_size.y)
			item_back:InitTexture(self.back_texture)
			item_back:SetStretchTexture(true)
			
			local params = CIconParams(item:section())
			local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
				
			local item_icon = CUIStatic()
			item_icon:Init(pos_down.x, pos_down.y, icon_size.x, icon_size.y)
			
			ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)
			
			params:set_shader(item_icon)
			ui_inv_utils.AttachPanelIcons(item, item_icon)

			local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
			item_icon:SetWndPos(pos_down.x + offset.x, pos_down.y + offset.y)

			self.belt_items[i] = {back = item_back, icon = item_icon}
			
			pos_down.y = pos_down.y + item_back:GetHeight() + self.items_indent
			
			self:AttachChild(item_back)
			self:AttachChild(item_icon)
			
			self:Register(item_back, name)
			
			self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnBeltFocusReceived(i) end)
			self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnBeltFocusLost(i) end)
			self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnBeltClick(i) end)
		end			
	end
end

function QuickAddonOverlay:CheckLoadout(check_item)
	local base_pos = self.central:GetWndPos()
	local base_size = vector2():set(self.central:GetWidth(), self.central:GetHeight())
	local pos_down = vector2():set(base_pos.x, base_pos.y + base_size.y + self.items_indent)
	
	local items = {}
	for id,v in pairs(loadout.get_loaded_items()) do
		local item = level.object_by_id(id)
		ui_inv_utils.try_add_to_list(item, items, true)
	end	
	
	for k,v in pairs(items) do
		local item = v.item
		local id = item:id()
		
		local can_set = false
		local slots = item:get_inventory_item().slots
		for k,v in pairs(slots) do
			if v == check_item:get_slot() then
				can_set = true
				break
			end
		end
		
		can_set = can_set and item:section() ~= check_item:section()
		
		if can_set then
			self.target_item_id = check_item:id()
				
			local name = "loadout_"..id
			
			local item_back = CUIStatic()
			item_back:Init(pos_down.x, pos_down.y, base_size.x, base_size.y)
			item_back:InitTexture(self.back_texture)
			item_back:SetStretchTexture(true)
			
			local params = CIconParams(item:section())
			local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
				
			local item_icon = CUIStatic()
			item_icon:Init(pos_down.x, pos_down.y, icon_size.x, icon_size.y)
			
			ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)	
			
			local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
			item_icon:SetWndPos(pos_down.x + offset.x, pos_down.y + offset.y)
		
			params:set_shader(item_icon)
			ui_inv_utils.AttachPanelIcons(item, item_icon)

			self.loadout_items[id] = {back = item_back, icon = item_icon}
			
			pos_down.y = pos_down.y + item_back:GetHeight() + self.items_indent
			
			self:AttachChild(item_back)
			self:AttachChild(item_icon)
			
			self:Register(item_back, name)
			
			self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnLoadoutFocusReceived(id) end)
			self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnLoadoutFocusLost(id) end)
			self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnLoadoutClick(id) end)
		end			
	end
end

function QuickAddonOverlay:CheckAmmo(check_item)
	local weapon = check_item:get_weapon()
	if not weapon then
	return end
	
	local base_pos = self.central:GetWndPos()
	local base_size = vector2():set(self.central:GetWidth(), self.central:GetHeight())
	local pos_down = vector2():set(base_pos.x, base_pos.y + base_size.y + self.items_indent)
	
	local items = {}
	for id,v in pairs(loadout.get_loaded_items()) do
		local item = level.object_by_id(id)
		
		local can_set = false
		
		local ammo_sects = get_ammo_sects(check_item)
		for k,v in pairs(ammo_sects) do
			if v == item:section() then
				can_set = true
				break
			end
		end		
		
		if weapon:addon_attachable(addon.magazine) then
			local magazine_sect = get_magazine_sects(check_item)
			for k,v in pairs(magazine_sect) do
				if v == item:section() then
					can_set = true
					break
				end
			end
		end
		
		if weapon:is_addon_attached(addon.launcher) then
			local ammo_sects2 = get_ammo_sects(check_item)
			for k,v in pairs(ammo_sects2) do
				if v == item:section() then
					can_set = true
					break
				end
			end
		end		
		
		local ammo = item:get_weapon_ammo()
		if ammo then
			can_set = can_set and ammo.box_curr > 0 and ( (item:section() ~= get_cur_ammo_sect(check_item) and (item:get_weapon_ammo():is_magazine() or check_item:get_ammo_in_magazine() < check_item:get_magazine_size()) ) or check_item:get_ammo_in_magazine() == 0)
		end		
		
		if can_set then
			ui_inv_utils.try_add_to_list(item, items, true)
		end
	end	
	
	for k,v in pairs(items) do
		local item = v.item
		local id = item:id()
		
		self.target_item_id = check_item:id()
			
		local name = "loadout_"..id
		
		local item_back = CUIStatic()
		item_back:Init(pos_down.x, pos_down.y, base_size.x, base_size.y)
		item_back:InitTexture(self.back_texture)
		item_back:SetStretchTexture(true)
		
		local params = CIconParams(item:section())
		local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
			
		local item_icon = CUIStatic()
		item_icon:Init(pos_down.x, pos_down.y, icon_size.x, icon_size.y)
		
		ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)
		
		local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
		item_icon:SetWndPos(pos_down.x + offset.x, pos_down.y + offset.y)
		
		params:set_shader(item_icon)
		ui_inv_utils.AttachPanelIcons(item, item_icon)

		self.loadout_items[id] = {back = item_back, icon = item_icon}
			
		pos_down.y = pos_down.y + item_back:GetHeight() + self.items_indent
			
		self:AttachChild(item_back)
		self:AttachChild(item_icon)
			
		self:Register(item_back, name)
			
		self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnLoadoutFocusReceived(id) end)
		self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnLoadoutFocusLost(id) end)
		self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnLoadoutClick(id) end)			
	end
end

function QuickAddonOverlay:CheckScopes(check_item)
	local weapon = check_item:get_weapon()
	if not weapon then
	return end
	
	local base_pos = self.central:GetWndPos()
	local base_size = vector2():set(self.central:GetWidth(), self.central:GetHeight())
	local pos_up = vector2():set(base_pos.x, base_pos.y - base_size.y - self.items_indent)
	local addon_type = addon.scope
	
	if weapon:is_addon_attached(addon_type) and weapon:addon_attachable(addon_type) then
		self.target_item_id = check_item:id()
		local addon_sect = weapon:get_addon_name(addon_type)
		local name = "scope_"..addon_sect
		
		local item_back = CUIStatic()
		item_back:Init(pos_up.x, pos_up.y, base_size.x, base_size.y)
		item_back:InitTexture(self.back_texture)
		item_back:SetStretchTexture(true)
			
		local params = CIconParams(addon_sect)
		local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
			
		local item_icon = CUIStatic()
		item_icon:Init(pos_up.x, pos_up.y, icon_size.x, icon_size.y)
			
		ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)	
			
		local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
		item_icon:SetWndPos(pos_up.x + offset.x, pos_up.y + offset.y)
		
		params:set_shader(item_icon)
		ui_inv_utils.UpdateDetachAddonIcon(item_back)		

		self.scope_items[addon_sect] = {back = item_back, icon = item_icon}
		
		pos_up.y = pos_up.y - item_back:GetHeight() - self.items_indent
		
		self:AttachChild(item_back)
		self:AttachChild(item_icon)
		
		self:Register(item_back, name)
		
		self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnDetachFocusReceived(addon_sect) end)
		self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnDetachFocusLost(addon_sect) end)
		self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnDetachClick(addon_sect) end)		
	end
	
	local items = {}
	local addons = read_if_exists(sys_ini, "r_string", check_item:section(), "scope_name", nil)
	local addons_list = split_string(addons, ",")
	if addons_list and weapon:addon_attachable(addon_type) then
		for k,addon_sect in pairs(addons_list) do
			local item = actor:object(addon_sect)
			if item then
				ui_inv_utils.try_add_to_list(item, items, true)
			end
		end		
	end
	
	for k,v in pairs(items) do
		local item = v.item
		local id = item:id()
		
		local can_set = item:section() ~= weapon:get_addon_name(addon_type) or not weapon:is_addon_attached(addon_type)
		
		if can_set then
			self.target_item_id = check_item:id()
				
			local name = "scope_"..id
			
			local item_back = CUIStatic()
			item_back:Init(pos_up.x, pos_up.y, base_size.x, base_size.y)
			item_back:InitTexture(self.back_texture)
			item_back:SetStretchTexture(true)
			
			local params = CIconParams(item:section())
			local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
				
			local item_icon = CUIStatic()
			item_icon:Init(pos_up.x, pos_up.y, icon_size.x, icon_size.y)
			
			ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)	
			
			local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
			item_icon:SetWndPos(pos_up.x + offset.x, pos_up.y + offset.y)
		
			params:set_shader(item_icon)
			ui_inv_utils.UpdateAttachAddonIcon(item_back)				

			self.scope_items[id] = {back = item_back, icon = item_icon}
			
			pos_up.y = pos_up.y - item_back:GetHeight() - self.items_indent
			
			self:AttachChild(item_back)
			self:AttachChild(item_icon)
			
			self:Register(item_back, name)
			
			self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnAttachFocusReceived(id) end)
			self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnAttachFocusLost(id) end)
			self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnAttachClick(id) end)
		end			
	end
end

function QuickAddonOverlay:CheckSilencers(check_item)
	local weapon = check_item:get_weapon()
	if not weapon then
	return end
	
	local base_pos = self.central:GetWndPos()
	local base_size = vector2():set(self.central:GetWidth(), self.central:GetHeight())
	local pos_left = vector2():set(base_pos.x - base_size.x - self.items_indent, base_pos.y)
	local addon_type = addon.silencer
	
	if weapon:is_addon_attached(addon_type) and weapon:addon_attachable(addon_type) then
		self.target_item_id = check_item:id()
		local addon_sect = weapon:get_addon_name(addon_type)
		local name = "silencer_"..addon_sect
		
		local item_back = CUIStatic()
		item_back:Init(pos_left.x, pos_left.y, base_size.x, base_size.y)
		item_back:InitTexture(self.back_texture)
		item_back:SetStretchTexture(true)
			
		local params = CIconParams(addon_sect)
		local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
			
		local item_icon = CUIStatic()
		item_icon:Init(pos_left.x, pos_left.y, icon_size.x, icon_size.y)
			
		ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)	
			
		local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
		item_icon:SetWndPos(pos_left.x + offset.x, pos_left.y + offset.y)
		
		params:set_shader(item_icon)
		ui_inv_utils.UpdateDetachAddonIcon(item_back)		

		self.silencer_items[addon_sect] = {back = item_back, icon = item_icon}
		
		pos_left.x = pos_left.x - item_back:GetWidth() - self.items_indent
		
		self:AttachChild(item_back)
		self:AttachChild(item_icon)
		
		self:Register(item_back, name)
		
		self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnDetachFocusReceived(addon_sect) end)
		self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnDetachFocusLost(addon_sect) end)
		self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnDetachClick(addon_sect) end)		
	end
	
	local items = {}
	local addons = read_if_exists(sys_ini, "r_string", check_item:section(), "silencer_name", nil)
	local addons_list = split_string(addons, ",")
	if addons_list and weapon:addon_attachable(addon_type) then
		for k,addon_sect in pairs(addons_list) do
			local item = actor:object(addon_sect)
			if item then
				ui_inv_utils.try_add_to_list(item, items, true)
			end
		end		
	end
	
	for k,v in pairs(items) do
		local item = v.item
		local id = item:id()
		
		local can_set = item:section() ~= weapon:get_addon_name(addon_type) or not weapon:is_addon_attached(addon_type)
		
		if can_set then
			self.target_item_id = check_item:id()
			
			local name = "silencer_"..id
			
			local item_back = CUIStatic()
			item_back:Init(pos_left.x, pos_left.y, base_size.x, base_size.y)
			item_back:InitTexture(self.back_texture)
			item_back:SetStretchTexture(true)
			
			local params = CIconParams(item:section())
			local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
				
			local item_icon = CUIStatic()
			item_icon:Init(pos_left.x, pos_left.y, icon_size.x, icon_size.y)
			
			ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)	
			
			local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
			item_icon:SetWndPos(pos_left.x + offset.x, pos_left.y + offset.y)
		
			params:set_shader(item_icon)
			ui_inv_utils.UpdateAttachAddonIcon(item_back)				

			self.silencer_items[id] = {back = item_back, icon = item_icon}
			
			pos_left.x = pos_left.x - item_back:GetWidth() - self.items_indent
			
			self:AttachChild(item_back)
			self:AttachChild(item_icon)
			
			self:Register(item_back, name)
			
			self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnAttachFocusReceived(id) end)
			self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnAttachFocusLost(id) end)
			self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnAttachClick(id) end)
		end			
	end
end

function QuickAddonOverlay:CheckLaunchers(check_item)
	local weapon = check_item:get_weapon()
	if not weapon then
	return end
	
	local base_pos = self.central:GetWndPos()
	local base_size = vector2():set(self.central:GetWidth(), self.central:GetHeight())
	local pos_right = vector2():set(base_pos.x + base_size.x + self.items_indent, base_pos.y)
	local addon_type = addon.launcher
	
	if weapon:is_addon_attached(addon_type) and weapon:addon_attachable(addon_type) then
		self.target_item_id = check_item:id()
		local addon_sect = weapon:get_addon_name(addon_type)
		local name = "grenade_launcher_"..addon_sect
		
		local item_back = CUIStatic()
		item_back:Init(pos_right.x, pos_right.y, base_size.x, base_size.y)
		item_back:InitTexture(self.back_texture)
		item_back:SetStretchTexture(true)
			
		local params = CIconParams(addon_sect)
		local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
			
		local item_icon = CUIStatic()
		item_icon:Init(pos_right.x, pos_right.y, icon_size.x, icon_size.y)
			
		ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)	
			
		local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
		item_icon:SetWndPos(pos_right.x + offset.x, pos_right.y + offset.y)
		
		params:set_shader(item_icon)
		ui_inv_utils.UpdateDetachAddonIcon(item_back)		

		self.launcher_items[addon_sect] = {back = item_back, icon = item_icon}
		
		pos_right.x = pos_right.x + item_back:GetWidth() + self.items_indent
		
		self:AttachChild(item_back)
		self:AttachChild(item_icon)
		
		self:Register(item_back, name)
		
		self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnDetachFocusReceived(addon_sect) end)
		self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnDetachFocusLost(addon_sect) end)
		self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnDetachClick(addon_sect) end)		
	end
	
	local items = {}
	local addons = read_if_exists(sys_ini, "r_string", check_item:section(), "grenade_launcher_name", nil)
	local addons_list = split_string(addons, ",")
	if addons_list and weapon:addon_attachable(addon_type) then
		for k,addon_sect in pairs(addons_list) do
			local item = actor:object(addon_sect)
			if item then
				ui_inv_utils.try_add_to_list(item, items, true)
			end
		end		
	end
	
	for k,v in pairs(items) do
		local item = v.item
		local id = item:id()
		
		local can_set = item:section() ~= weapon:get_addon_name(addon_type) or not weapon:is_addon_attached(addon_type)
		
		if can_set then
			self.target_item_id = check_item:id()
				
			local name = "grenade_launcher_"..id
			
			local item_back = CUIStatic()
			item_back:Init(pos_right.x, pos_right.y, base_size.x, base_size.y)
			item_back:InitTexture(self.back_texture)
			item_back:SetStretchTexture(true)
			
			local params = CIconParams(item:section())
			local icon_size = vector2():set(params.grid_width * base_size.x, params.grid_height * base_size.y)
				
			local item_icon = CUIStatic()
			item_icon:Init(pos_right.x, pos_right.y, icon_size.x, icon_size.y)
			
			ui_inv_utils.CellItemFitToSize(params, item_icon, nil, base_size)	
			
			local offset = ui_inv_utils.GetOffset("center", item_icon, item_back)
			item_icon:SetWndPos(pos_right.x + offset.x, pos_right.y + offset.y)
		
			params:set_shader(item_icon)
			ui_inv_utils.UpdateAttachAddonIcon(item_back)				

			self.launcher_items[id] = {back = item_back, icon = item_icon}
			
			pos_right.x = pos_right.x + item_back:GetWidth() + self.items_indent
			
			self:AttachChild(item_back)
			self:AttachChild(item_icon)
			
			self:Register(item_back, name)
			
			self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnAttachFocusReceived(id) end)
			self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnAttachFocusLost(id) end)
			self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnAttachClick(id) end)
		end			
	end
end

function QuickAddonOverlay:ClearLists()
	if self.belt_items then
		for k,v in pairs (self.belt_items) do
			self:DetachChild(v.back)
			self:DetachChild(v.icon)
		end
	end
	self.belt_items = {}
	if self.loadout_items then
		for k,v in pairs (self.loadout_items) do
			self:DetachChild(v.back)
			self:DetachChild(v.icon)
		end
	end
	self.loadout_items = {}
	if self.scope_items then
		for k,v in pairs (self.scope_items) do
			self:DetachChild(v.back)
			self:DetachChild(v.icon)
		end
	end
	self.scope_items = {}
	if self.silencer_items then
		for k,v in pairs (self.silencer_items) do
			self:DetachChild(v.back)
			self:DetachChild(v.icon)
		end
	end
	self.silencer_items = {}
	if self.launcher_items then
		for k,v in pairs (self.launcher_items) do
			self:DetachChild(v.back)
			self:DetachChild(v.icon)
		end
	end
	self.launcher_items = {}
end

function QuickAddonOverlay:UpdateCompatible()
	self.target_item_id = false
	
	local central_pos = self.central:GetWndPos()
	local cursor_pos = vector2():set(central_pos.x + self.central:GetWidth() * 0.5, central_pos.y + self.central:GetHeight() * 0.5)
	level.set_cursor_pos(cursor_pos)
	
	self.tip_scopes:Show(false)
	self.tip_silencers:Show(false)
	self.tip_launchers:Show(false)
	self.tip_items:Show(false)
	
	self:ClearLists()
	
	local check_item = actor:active_item()
	if check_item then
		self:CheckScopes(check_item)
		self:CheckSilencers(check_item)
		self:CheckLaunchers(check_item)
		self:CheckAmmo(check_item)
		self:CheckLoadout(check_item)
		self:CheckBelt(check_item)
	end
	if not self.target_item_id then
		check_item = actor:active_device()
		if check_item then
			self:CheckBelt(check_item)
		end
	end
end

function QuickAddonOverlay:HighlightStatic(static, color)
	static:SetColor(color)
end

function QuickAddonOverlay:OnCentralFocusReceived()
	self:HighlightStatic(self.close, color_focused)
end

function QuickAddonOverlay:OnCentralFocusLost()
	self:HighlightStatic(self.close, self.central.color)
end

function QuickAddonOverlay:OnBeltFocusReceived(idx)
	local item = actor:item_on_belt(idx)
	local static = self.belt_items[idx].back
	self:HighlightStatic(static, color_focused)
	sm:call("on_cell_item_focus", item)
	
	local text = game.translate_string("ui_st_take").."\\n"..game.translate_string(get_inv_name_short(item:section()))
	self.tip_items:Show(true)
	self.tip_items:SetText(text)
end

function QuickAddonOverlay:OnBeltFocusLost(idx)
	local item = actor:item_on_belt(idx)
	local static = self.belt_items[idx].back
	self:HighlightStatic(static, GetARGB(255, 255, 255, 255))
	sm:call("on_cell_item_focus_lost", item)
	
	self.tip_items:Show(false)
end

function QuickAddonOverlay:OnBeltClick(idx)
	local desired_item = actor:item_on_belt(idx)
	if not desired_item then
	return end
	local slot_item = level.object_by_id(self.target_item_id)
	if not slot_item then
	return end
	
	local slot = slot_item:get_slot()
	actor:move_to_ruck(slot_item)
	actor:move_to_slot(desired_item)
	actor:activate_slot(slot, false)
	actor:move_to_belt(slot_item)
	
	self:ShowHide()
end

function QuickAddonOverlay:OnLoadoutFocusReceived(id)
	local item = level.object_by_id(id)
	local static = self.loadout_items[id].back
	self:HighlightStatic(static, color_focused)
	sm:call("on_cell_item_focus", item)
	
	local text = (item:get_weapon_ammo() and game.translate_string("ui_st_reload") or game.translate_string("ui_st_take")).."\\n"..game.translate_string(get_inv_name_short(item:section()))
	self.tip_items:Show(true)
	self.tip_items:SetText(text)
end

function QuickAddonOverlay:OnLoadoutFocusLost(id)
	local item = level.object_by_id(id)
	local static = self.loadout_items[id].back
	self:HighlightStatic(static, GetARGB(255, 255, 255, 255))
	sm:call("on_cell_item_focus_lost", item)
	
	self.tip_items:Show(false)
end

function QuickAddonOverlay:OnLoadoutClick(id)
	local desired_item = level.object_by_id(id)
	if not desired_item then
	return end
	local slot_item = level.object_by_id(self.target_item_id)
	if not slot_item then
	return end
	
	if slot_item:is_direct_reload(desired_item) then
		self:ShowHide()
	return end
	
	-- if desired_item:get_weapon_ammo() then
		-- self:ShowHide()
	-- return end
	
	local slot = slot_item:get_slot()
	actor:move_to_ruck(slot_item)
	actor:move_to_slot(desired_item)
	--actor:activate_slot(slot, false)
	sm:call("on_grenade_type_switch", slot_item, desired_item)
	
	self:ShowHide()
end

function QuickAddonOverlay:OnDetachFocusReceived(sect)
	local static = self.scope_items[sect] and self.scope_items[sect].back 
				or self.silencer_items[sect] and self.silencer_items[sect].back 
				or self.launcher_items[sect] and self.launcher_items[sect].back
	self:HighlightStatic(static, color_focused)
	
	local text = game.translate_string("ui_st_detach").."\\n"..game.translate_string(get_inv_name_short(sect))
	if self.scope_items[sect] and self.scope_items[sect].back then
		self.tip_scopes:Show(true)
		self.tip_scopes:SetText(text)		
	elseif self.silencer_items[sect] and self.silencer_items[sect].back then
		self.tip_silencers:Show(true)
		self.tip_silencers:SetText(text)
	else
		self.tip_launchers:Show(true)
		self.tip_launchers:SetText(text)	
	end
end

function QuickAddonOverlay:OnDetachFocusLost(sect)
	local static = self.scope_items[sect] and self.scope_items[sect].back 
				or self.silencer_items[sect] and self.silencer_items[sect].back 
				or self.launcher_items[sect] and self.launcher_items[sect].back
	self:HighlightStatic(static, GetARGB(255, 255, 255, 255))
	
	self.tip_scopes:Show(false)
	self.tip_silencers:Show(false)
	self.tip_launchers:Show(false)
end

function QuickAddonOverlay:OnDetachClick(sect)
	local slot_item = level.object_by_id(self.target_item_id)
	local slot_wpn = slot_item:get_weapon_m()
	
	actor:hide_weapon()
	level.add_call(
		function()
			return not actor:active_item()
		end,
		function()
			--slot_wpn:detach_addon(sect, true)
			detach_addon(slot_item, sect)
			xr_sound.get_safe_sound_object([[interface\inv_detach_addon]]):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
			actor:restore_weapon()
		end
	)		
	
	self:ShowHide()
end

function QuickAddonOverlay:OnAttachFocusReceived(id)
	local item = level.object_by_id(id)
	local static = self.scope_items[id] and self.scope_items[id].back 
				or self.silencer_items[id] and self.silencer_items[id].back 
				or self.launcher_items[id] and self.launcher_items[id].back
	self:HighlightStatic(static, color_focused)
	sm:call("on_cell_item_focus", item)
	
	local text = game.translate_string("ui_st_attach").."\\n"..game.translate_string(get_inv_name_short(item:section()))
	if self.scope_items[id] and self.scope_items[id].back then
		self.tip_scopes:Show(true)
		self.tip_scopes:SetText(text)		
	elseif self.silencer_items[id] and self.silencer_items[id].back then
		self.tip_silencers:Show(true)
		self.tip_silencers:SetText(text)
	else
		self.tip_launchers:Show(true)
		self.tip_launchers:SetText(text)	
	end	
end

function QuickAddonOverlay:OnAttachFocusLost(id)
	local item = level.object_by_id(id)
	local static = self.scope_items[id] and self.scope_items[id].back 
				or self.silencer_items[id] and self.silencer_items[id].back 
				or self.launcher_items[id] and self.launcher_items[id].back
	self:HighlightStatic(static, GetARGB(255, 255, 255, 255))
	sm:call("on_cell_item_focus_lost", item)
	
	self.tip_scopes:Show(false)
	self.tip_silencers:Show(false)
	self.tip_launchers:Show(false)	
end

function QuickAddonOverlay:OnAttachClick(id)
	local desired_item = level.object_by_id(id)
	if not desired_item then
	return end
	local slot_item = level.object_by_id(self.target_item_id)
	if not slot_item then
	return end
	
	local desired_iitem = desired_item:get_inventory_item()
	local slot_iitem = slot_item:get_inventory_item()
	
	local detach_addon_type = nil
	
	if not slot_iitem:can_attach_addon(desired_iitem) then
		for k, addon in pairs(ADDON_TYPES) do
			local addons = read_if_exists(sys_ini, "r_string", slot_item:section(), addon.."_name", nil)
			local addons_list = split_string(addons, ",")
			if addons_list then
				for _, addon_sect in pairs(addons_list) do
					if addon_sect == desired_item:section() then
						detach_addon_type = k-1
						break
					end
				end		
			end
		end		
	end
	
	actor:hide_weapon()
	level.add_call(
		function()
			return not actor:active_item()
		end,
		function()
			if detach_addon_type then
				detach_addon(slot_item, slot_item:get_weapon():get_addon_name(detach_addon_type))
			end
			slot_iitem:attach_addon(desired_iitem, true)
			xr_sound.get_safe_sound_object([[interface\inv_attach_addon]]):play(actor, 0, sound_object.s2d)
			actor:restore_weapon()
		end
	)	
	
	self:ShowHide()
end

function QuickAddonOverlay:TrySignalHide()
	if self.was_shown and not self:IsShown() then
		self.was_shown = false
		sm:call("on_quick_addon_hide")
		self:Unsubscribe()
	end
end

function QuickAddonOverlay:ShowHide()
	if not level.main_input_receiver() or self:IsShown() then
		level.start_stop_menu(self,false)
		self.was_shown = self:IsShown()
		if self.was_shown then
			self:UpdateCompatible()
			if not self.target_item_id then
			return end
			self:Subscribe()
			sm:call("on_quick_addon_show")
		else
			sm:call("on_quick_addon_hide")
			self:Unsubscribe()
		end
	end
end

function QuickAddonOverlay:ProcessSlowMotion()
	local console = get_console()
	local timefactor = self:IsShown() and self.menu_time_factor or 1
	console:execute("time_factor "..timefactor)
end

function QuickAddonOverlay:OnShow()
	-- local act_item = actor:active_item()
	-- if act_item then
		-- local wpn = act_item:get_weapon()
		-- if wpn and wpn.zoom_mode then
			-- wpn:zoom_out()
		-- end		
	-- end
	self:ProcessSlowMotion()
end

function QuickAddonOverlay:OnHide()
	self:ProcessSlowMotion()
end

function QuickAddonOverlay:StopAnyMove()
	CUIScriptWnd.StopAnyMove(self)
	return false
end

local restricted_actions = {
	[key_bindings.kWPN_FIRE] = true,
	[key_bindings.kWPN_ZOOM] = true,
}

function QuickAddonOverlay:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
	
	local game_action = dik_to_bind(dik)
	
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if restricted_actions[game_action] then
			return true
		end
	end

	return false
end