local displayr_ui = nil
local workIndicatorTimer = 0
local updateTimer = 0
local updateFreq = 500 -- in milliseconds
local led_turn_off_time = 0

local OVERLAY_XML = "script_overlays\\ui_gilka.xml"

class "ui_display" (CUIScriptWnd)
function ui_display:__init(item) super()
	self:Show					(true)
	self:Enable					(true)

	local xml					= CScriptXmlInit()
	self.xml = xml
	xml:ParseFile				(OVERLAY_XML)
	xml:InitWindow				("display", 0, self)

	self.m_wrk_area				= xml:InitStatic("display:wrk_area", self)
	
	self.m_seg1					= xml:InitStatic("display:seg1", self.m_wrk_area)
	self.m_seg2					= xml:InitStatic("display:seg2", self.m_wrk_area)
	self.m_seg3					= xml:InitStatic("display:seg3", self.m_wrk_area)
	self.m_seg4					= xml:InitStatic("display:seg4", self.m_wrk_area)
	
	self.m_workIndicator		= xml:InitStatic("display:work", self.m_wrk_area)
	self.m_workIndicator:Show(false)
	
	self.ui_enabled 			= true
	
	self.item 					= item
	self.item_sect 				= item:section()
	
	--self.detect_r 			= read_if_exists(sys_ini, "r_float", self.item_sect, "detect_radius", 10)
	-- self.detect_zones 		= {}
	-- local zone_sect
	-- for i = 1, 255 do
		-- zone_sect = read_if_exists(sys_ini, "r_string", self.item_sect, "zone_class_"..i, nil)
		-- if zone_sect then
			-- self.detect_zones[zone_sect] = true
		-- end
	-- end
	
	self.detect_r 				= read_if_exists(sys_ini, "r_float", self.item_sect, "af_radius", 10)
	self.detect_artefacts 			= {}
	local af_sect
	for i = 1, 255 do
		af_sect = read_if_exists(sys_ini, "r_string", self.item_sect, "af_class_"..i, nil)
		if af_sect then
			self.detect_artefacts[af_sect] = true
		end
	end
end

function ui_display:__finalize() 
	displayr_ui = nil
end

function ui_display:Update()
	
	CUIScriptWnd.Update(self)
	
	if is_power_device(self.item) then
		local power_lvl = self.item:binded_object():get_power_level()
		if power_lvl > 0 and not self.ui_enabled then
			self.ui_enabled = true
		elseif power_lvl == 0 and self.ui_enabled then
			self.ui_enabled = false
		end
		self.m_wrk_area:Show(self.ui_enabled)
	end
	
	if not self.ui_enabled then
	return end
	
	local tg = time_global()
	
	if (led_turn_off_time > 0 and led_turn_off_time < tg) then
		self:FlashLed(nil)
	end	
	
	if (tg < updateTimer) then
		return
	else
		updateTimer = tg + updateFreq
	end	

	-- local near_anom_dist = 10000
	-- function perform_action(obj)
		-- if obj:is_anomaly() and self.detect_zones[obj:section()] then
			-- local dist = distance_between_safe(self.item, obj) - obj:radius()
			-- if dist < near_anom_dist then
				-- near_anom_dist = dist
			-- end
		-- end
	-- end
	-- level.iterate_nearest(self.item:position(), self.detect_r, perform_action)	

	-- local value = near_anom_dist <= self.detect_r and math.floor(near_anom_dist) or 0
	
	local near_artefact_dist = 10000
	function perform_action(obj)
		if obj:is_artefact() and not obj:parent() and self.detect_artefacts[obj:section()] then
			local dist = distance_between_safe(self.item, obj) - obj:radius()
			if dist <= near_artefact_dist then
				near_artefact_dist = dist
			end
		end
	end
	level.iterate_nearest(self.item:position(), self.detect_r, perform_action)	

	local value = near_artefact_dist <= self.detect_r and math.floor(near_artefact_dist) or 0
	if value > 0 then
		self:FlashLed(value/self.detect_r)
	end
	
	local s_value = tostring(value)
	local seg1, seg2, seg3, seg4
	
	if (value > 999) then
		seg1 = string.format("green_%s", s_value:sub(1, 1))
		seg2 = string.format("green_%s", s_value:sub(2, 2))
		seg3 = string.format("green_%s", s_value:sub(3, 3))
		seg4 = string.format("green_%s", s_value:sub(4, 4))
	elseif (value > 99) then
		seg1 = "green_0"
		seg2 = string.format("green_%s", s_value:sub(1, 1))
		seg3 = string.format("green_%s", s_value:sub(2, 2))
		seg4 = string.format("green_%s", s_value:sub(3, 3))
	elseif (value > 9) then
		seg1 = "green_0"
		seg2 = "green_0"
		seg3 = string.format("green_%s", s_value:sub(1, 1))
		seg4 = string.format("green_%s", s_value:sub(2, 2))
	elseif (value > 0) then
		seg1 = "green_0"
		seg2 = "green_0"
		seg3 = "green_0"
		seg4 = string.format("green_%s", s_value:sub(1, 1))
	else
		seg1 = "green_0"
		seg2 = "green_0"
		seg3 = "green_0"
		seg4 = "green_0"
	end
	
	self.m_seg1:InitTextureEx(seg1, "hud\\p3d")
	self.m_seg2:InitTextureEx(seg2, "hud\\p3d")
	self.m_seg3:InitTextureEx(seg3, "hud\\p3d")
	self.m_seg4:InitTextureEx(seg4, "hud\\p3d")
end

function ui_display:FlashLed(dt)
	if not dt then
		self.m_workIndicator:Show(false)
		led_turn_off_time = 0
	return end
	self.m_workIndicator:Show(not self.m_workIndicator:IsShown())
	local light_time = dt*1000
	log3("~light_time %s", light_time)
	if math.fsimilar(updateFreq, light_time, 0.1) then
		light_time = light_time - light_time*0.1
	end
	led_turn_off_time = time_global() + light_time
end

function get_UI(item)
	if(displayr_ui==nil) then
		displayr_ui = ui_display(item)
	end
	
	return displayr_ui
end