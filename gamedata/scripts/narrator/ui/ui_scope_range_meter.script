-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   	fun = this.on_zoom_in})
	sm:subscribe({signal = "on_actor_weapon_zoom_out",   	fun = this.on_zoom_out})
	sm:subscribe({signal = "on_death",   					fun = this.on_death})
end

local main_wnd = get_main_window()
local range_meter_static = false
local DEBUG_DISABLE = false
local subscribed = false

function create_range_meter_static(weapon)
	if range_meter_static and main_wnd:IsChild(range_meter_static) then
		main_wnd:DetachChild(range_meter_static)
	end
	range_meter_static = false
	if DEBUG_DISABLE then
	return false end
	if weapon:get_gl_mode() then
	return false end
	local wpn = weapon:get_weapon()
	if not wpn:is_addon_attached(addon.scope) then
	return false end
	local sect = weapon:section()
	local range_meter_sect = wpn:addon_attachable(addon.scope) and wpn:get_addon_name(addon.scope) or sect
	local range_meter_forced = (range_meter_sect ~= sect) and read_if_exists(sys_ini, "r_string", sect, range_meter_sect.."_range_meter", false) or false
	if read_if_exists(sys_ini, "r_bool", range_meter_sect, "ignore_range_meter", false) and not range_meter_forced then
	return false end
	local range_meter_type = wpn:aim_alt_mode() and "range_meter_second" or "range_meter"	
	local range_meter = range_meter_forced or read_if_exists(sys_ini, "r_string", range_meter_sect, range_meter_type, false)
	if not range_meter then
	return false end
	local static = CUIStatic()
	static:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	static:SetStretchTexture(true)
	static:SetTextComplexMode(true)
	local offset = read_if_exists(sys_ini, "r_string", range_meter_sect, range_meter_type.."_offset", "0,0")
	offset = split_string(offset, ",", true)
	local center = get_screen_center()
	static:SetTextPos(center.x + offset[1], center.y + offset[2])
	local font = read_if_exists(sys_ini, "r_string", range_meter_sect, range_meter_type.."_font", "letterica16")
	static:SetFont(GetFontCustom(font))
	local color = read_if_exists(sys_ini, "r_string", range_meter_sect, range_meter_type.."_color", "255,255,255,255")
	color = split_string(color, ",", true)
	static:SetTextColor(GetARGB(color[1], color[2], color[3], color[4]))
	return static
end

function on_zoom_in(weapon)
	range_meter_static = create_range_meter_static(weapon)
	if not range_meter_static then
	return end
	level.add_call(
		function()
			return not wpn_IsRotatingToZoom(weapon) or not range_meter_static
		end,
		function()
			if not range_meter_static then
			return end
			if not main_wnd:IsChild(range_meter_static) then
				main_wnd:AttachChild(range_meter_static)
				subscribe()
			end
			main_wnd:BringToBottom(range_meter_static)		
		end		
	)		
end

function on_zoom_out(weapon)
	if range_meter_static and main_wnd:IsChild(range_meter_static) then
		main_wnd:DetachChild(range_meter_static)
		unsubscribe()
	end
	range_meter_static = false
end

function on_death(victim, killer)
	if victim:id() ~= actor:id() then
	return end
	if actor:active_item() then
		actor:drop_item(actor:active_item())
	end
end

function on_update()
	local rm_text = string.format("%.1f %s", level.get_target_dist(), game.translate_string("st_m"))
	range_meter_static:SetText(rm_text)
end

function subscribe()
	if not subscribed then
		subscribed = {
			{ signal = "on_update", fun = this.on_update },
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:subscribe( s )
		end
	end
end

function unsubscribe()
	if subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:unsubscribe( s )
		end
		subscribed = false
	end
end