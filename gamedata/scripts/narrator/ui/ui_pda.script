local step_time = 1500
local overlay = nil

local color_by_relation = {
	[0] = "%c[green]",
	[1] = "%c[UI_orange]",
	[2] = "%c[red]",
}

function attach(sm)
	sm:subscribe({signal = "on_pda_show",   fun = this.process_show})
	sm:subscribe({signal = "on_map_relation_location_added",   fun = this.customize_relation_spot})
end

local subscribed = false

function process_show()
	if not subscribed then
		subscribed = {
			{signal = "on_pda_hide", fun = this.process_hide},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:subscribe( s )
		end
	end
	
	if not overlay then
		overlay = PDAOverlay(level.main_input_receiver())
	end
end

function process_hide()
	if subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:unsubscribe( s )
		end
		subscribed = false
	end
	
	if overlay then
		overlay:DetachWnd()
		overlay = nil
	end
end

function skip_time(h, m)
	local actor = db.actor
	level.add_pp_effector("blink.ppe", 999, false)
	level.change_game_time(0, h, m)
	xr_sound.get_safe_sound_object("device\\pda\\pda_alarm",sound_object.s2d):play_at_pos(actor,actor:position())
end

function customize_relation_spot(spot, id)
	log3("id %s spot %s", id, spot)
	local npc = level.object_by_id(id)
	local actor = db.actor
	local hint_text = string.format("%s\\n%s%s", npc:character_name(), color_by_relation[npc:relation(actor)], game.translate_string(npc:character_community()))
	level.map_change_spot_hint(id, spot, hint_text)
end

class "PDAOverlay" (CUIScriptWnd)

function PDAOverlay:__init(owner) super()
	self.owner = owner
	self:Init(0, 0, 1024, 768)
	self:InitControls()
	self:UpdateTimer()
	self:Subscribe()
end

function PDAOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_update", self = self, fun = self.Update},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function PDAOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function PDAOverlay:DetachWnd()
	self:Unsubscribe()
	if self.main then
		self:ClearCallbacks()
		self.owner:DetachChild(self.main)
	end
end

function PDAOverlay:InitControls()
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\pda_overlay.xml")

	self.main = CUIStatic()
	self.main:Init(0, 0, 1024, 768)
	self.owner:AttachChild(self.main)
	
	self.power_static = xml:InitStatic("power_level", self.main)
	
	self.btn_off = xml:Init3tButton("off_button", self.main)
	self:Register(self.btn_off, "off_btn")
	self:AddCallback("off_btn", ui_events.BUTTON_CLICKED, self.HidePda, self)
	
	--// actor info overlay	
	self.info = CUIStatic()
	self.info:Init(0, 0, 1024, 768)
	self.main:AttachChild(self.info)
	self.info:Show(false)
	
	self.days_text = xml:InitStatic("days_in_zone_text", self.info)
	self.days_text:SetText(game.translate_string("st_days_in_zone"))
	self.days_count = xml:InitStatic("days_in_zone_count", self.info)
	
	--//skip timer
	self.wait_background = xml:InitStatic("timer_background", self.info)
	
	self.hour_st = xml:InitStatic("hour_static", self.wait_background)
	self.minute_st = xml:InitStatic("minute_static", self.wait_background)
	
	self.minus_h = xml:InitButton("minus_button_h", self.hour_st)
	self:Register(self.minus_h, "minus_hour")
	self:AddCallback("minus_hour", ui_events.BUTTON_CLICKED, self.DecHour, self)
	
	self.plus_h = xml:InitButton("plus_button_h", self.hour_st)
	self:Register(self.plus_h, "plus_hour")
	self:AddCallback("plus_hour", ui_events.BUTTON_CLICKED, self.IncHour, self)
	
	self.minus_m = xml:InitButton("minus_button_m", self.minute_st)
	self:Register(self.minus_m, "minus_minute")
	self:AddCallback("minus_minute", ui_events.BUTTON_CLICKED, self.DecMinute, self)
	
	self.plus_m = xml:InitButton("plus_button_m", self.minute_st)
	self:Register(self.plus_m, "plus_minute")
	self:AddCallback("plus_minute", ui_events.BUTTON_CLICKED, self.IncMinute, self)
	
	self.skip_time = xml:InitButton("wait_button", self.wait_background)
	self:Register(self.skip_time, "skip_time")
	self:AddCallback("skip_time", ui_events.BUTTON_CLICKED, self.SkipTime, self)
end

function PDAOverlay:Update()
	local actor = db.actor
	local pda = actor:item_in_slot(7)
	if not pda then
		process_hide()
		return
	end
	
	local power = pda:get_power_level()
	if power == 0 then
		process_hide()
		return
	end
	
	local text = string.format("%.0f %s", power * 100, "%")	
	self.power_static:SetText(text)
	if power <= 0.1 then
		self.power_static:SetTextColor(255, 255, 0, 0)
	end
	
	text = string.format("%d", level.get_time_days())
	self.days_count:SetText(text)
	
	local show = has_alife_info("ui_pda_actor_info")
	self.info:Show(show)
end

function PDAOverlay:UpdateTimer()
	if not self.wait_h then
		self.wait_h = 0
	end
	if not self.wait_m then
		self.wait_m = 0
	end
	
	self.hour_st:SetText(self.wait_h)
	self.minute_st:SetText(self.wait_m)
end

function PDAOverlay:DecHour()
	self.wait_h = self.wait_h - 1
	if self.wait_h < 0 then
		self.wait_h = 24
	end
	self:UpdateTimer()
end

function PDAOverlay:IncHour()
	self.wait_h = self.wait_h + 1
	if self.wait_h > 24 then
		self.wait_h = 0
	end
	self:UpdateTimer()
end

function PDAOverlay:DecMinute()
	self.wait_m = self.wait_m - 5
	if self.wait_m < 0 then
		self.wait_m = 55
	end
	self:UpdateTimer()
end

function PDAOverlay:IncMinute()
	self.wait_m = self.wait_m + 5
	if self.wait_m > 55 then
		self.wait_m = 0
	end
	self:UpdateTimer()
end

function PDAOverlay:SkipTime()
	if self.wait_h == 0 and self.wait_m == 0 then
	return end
	
	skip_time(self.wait_h, self.wait_m)
	self.wait_h = 0
	self.wait_m = 0
	self:UpdateTimer()
end

function PDAOverlay:HidePda()
	level.start_stop_menu(level.main_input_receiver(), true)
end