-- -*- mode: lua; coding: windows-1251-dos -*-
local overlay = nil
local OVERLAY_XML = "script_overlays\\pda_overlay.xml"

function attach(sm)
	sm:subscribe({signal = "on_spawn",   	fun = this.create_window})
	sm:subscribe({signal = "on_destroy",   	fun = this.destroy_window})
	sm:subscribe({signal = "on_save",   	fun = this.on_save})
	sm:subscribe({signal = "on_load",   	fun = this.on_load})
end

local subscribed = false

local user_notes = {}

function add_note(name, text)
	if not text then
	return end
	
	if not name or name == "" then
		name = string.format("%s %s", game.translate_string("st_new_note"), table.size(user_notes) + 1)
	end
	
	local entry = {
		name = name,
		text = text,
		time = game.get_game_time()
	}
	
	table.insert(user_notes, entry)
	
	overlay:UpdateNotes()
end

function remove_note(i)
	table.remove(user_notes, i)
	overlay:UpdateNotes()
end

function edit_note(i, name, text)
	local entry = user_notes[i]
	if not entry then
	return end
	entry.name = name
	entry.text = text
	overlay:UpdateNotes()
end

function remove_all_notes()
	user_notes = {}
	overlay:UpdateNotes()
end

function on_save()
	local saved_notes = {}
	for k,v in ipairs(user_notes) do
		local entry = {
			name = v.name,
			text = v.text,
			time = ctime_to_table(v.time)
		}
		table.insert(saved_notes, entry)
	end
	xr_vars.save_var("saved_notes", saved_notes)
end

function on_load()
	local saved_notes = xr_vars.load_var("saved_notes", {})
	user_notes = {}
	for k,v in ipairs(saved_notes) do
		local entry = {
			name = v.name,
			text = v.text,
			time = table_to_ctime(v.time)
		}
		table.insert(user_notes, entry)
	end
end

function create_window()
	if not overlay then
		overlay = PDAOverlay(level.get_pda_wnd())
	end
end

function destroy_window()
	if overlay then
		overlay:DetachWnd()
		overlay = nil
	end
end

function skip_time(h, m)
	level.add_pp_effector("blink.ppe", 999, false)
	change_game_time(0, h, m)
	--xr_sound.get_safe_sound_object("device\\pda\\pda_alarm"):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
end

class "PDAOverlay" (CUIScriptWnd)

function PDAOverlay:__init(owner) super()
	self.owner = owner
	self:InitControls()
	self:Subscribe()
	self.wait_h = 0
	self.wait_m = 0
	self:UpdateTimer()
end

function PDAOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_pda_show", self = self, fun = self.OnShow},
			{signal = "on_pda_hide", self = self, fun = self.OnHide},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function PDAOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function PDAOverlay:DetachWnd()
	self:Unsubscribe()
	self:ClearCallbacks()
	self.owner:DetachChild(self)
end

function PDAOverlay:InitControls()
	self.owner:AttachChild(self)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	self:Enable(true)
	self:Show(true)
	
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	
	self.xml = xml

	--//date/time
	self.date_time = xml:InitFrameLine("time_frame_line", self)
	self.time = xml:InitStatic("time", self.date_time)	
	self.date = xml:InitStatic("date", self.date_time)
	self:Register(self.date, "date")
	self:AddCallback("date", ui_events.WINDOW_LBUTTON_DOWN, self.ShowSkipTimer, self)
	self:Register(self.time, "date")
	self:AddCallback("time", ui_events.WINDOW_LBUTTON_DOWN, self.ShowSkipTimer, self)	
	
	--//power level
	self.power_static = xml:InitStatic("power_level", self.date_time)
	self.def_power_color = self.power_static:GetTextColor()
	self.power_icon = xml:InitStatic("power_level:power_level_icon", self.power_static)
	self.power_progress = xml:InitProgressBar("power_level:power_level_progress", self.power_static)
	
	self.money_static = xml:InitStatic("money", self.date_time)
	
	--// off button
	self.btn_off = xml:Init3tButton("off_button", self)
	self:Register(self.btn_off, "off_btn")
	self:AddCallback("off_btn", ui_events.BUTTON_CLICKED, self.HidePda, self)
	
	--//skip timer
	self.skip_time_frame = xml:InitFrame("timer_frame", self)
	self.skip_time_frame:Show(false)
	
	self.skip_time_header = xml:InitStatic("timer_header", self.skip_time_frame)
	self.hour_st = xml:InitStatic("hour_static", self.skip_time_frame)
	self.minute_st = xml:InitStatic("minute_static", self.skip_time_frame)
	self.hm_separator = xml:InitStatic("separator_static", self.skip_time_frame)
	
	self.minus_h = xml:Init3tButton("minus_button_h", self.hour_st)
	self:Register(self.minus_h, "minus_hour")
	self:AddCallback("minus_hour", ui_events.BUTTON_CLICKED, self.DecHour, self)
	
	self.plus_h = xml:Init3tButton("plus_button_h", self.hour_st)
	self:Register(self.plus_h, "plus_hour")
	self:AddCallback("plus_hour", ui_events.BUTTON_CLICKED, self.IncHour, self)
	
	self.minus_m = xml:Init3tButton("minus_button_m", self.minute_st)
	self:Register(self.minus_m, "minus_minute")
	self:AddCallback("minus_minute", ui_events.BUTTON_CLICKED, self.DecMinute, self)
	
	self.plus_m = xml:Init3tButton("plus_button_m", self.minute_st)
	self:Register(self.plus_m, "plus_minute")
	self:AddCallback("plus_minute", ui_events.BUTTON_CLICKED, self.IncMinute, self)
	
	self.skip_time = xml:Init3tButton("wait_button", self.skip_time_frame)
	self:Register(self.skip_time, "skip_time")
	self:AddCallback("skip_time", ui_events.BUTTON_CLICKED, self.SkipTime, self)
	
	self.clear_time = xml:Init3tButton("clear_button", self.skip_time_frame)
	self:Register(self.clear_time, "clear_time")
	self:AddCallback("clear_time", ui_events.BUTTON_CLICKED, self.ClearTime, self)
	
	--//personal notes
	self.notes_left_frame = xml:InitFrame("notes_left_frame", self)
	--self.notes_left_header = xml:InitFrameLine("notes_left_frame:header_frame_line", self.notes_left_frame)
	
	self.add_note_btn = xml:Init3tButton("notes_left_frame:add_note_btn", self.notes_left_frame)
	self:Register(self.add_note_btn, "add_note")
	self:AddCallback("add_note", ui_events.BUTTON_CLICKED, self.OnAddNoteClick, self)
	
	self.del_all_notes_btn = xml:Init3tButton("notes_left_frame:del_all_notes_btn", self.notes_left_frame)
	self:Register(self.del_all_notes_btn, "del_all_notes")
	self:AddCallback("del_all_notes", ui_events.BUTTON_CLICKED, self.OnDelAllNotesClick, self)	
	
	self.notes_list = xml:InitScrollView("notes_left_frame:scroll_view", self.notes_left_frame)
	
	self.notes_right_frame = xml:InitFrame("notes_right_frame", self)
	self.notes_right_header = xml:InitStatic("notes_right_frame:header", self.notes_right_frame)--xml:InitFrameLine("notes_right_frame:header_frame_line", self.notes_right_frame)
	
	self.del_note_btn = self.xml:Init3tButton("notes_right_frame:del_note_btn", self.notes_right_frame)
	self:Register(self.del_note_btn, "del_note_btn")
	self:AddCallback("del_note_btn", ui_events.BUTTON_CLICKED, function() self:OnRemoveNoteBtn() end, self)
	
	self.edit_note_btn = self.xml:Init3tButton("notes_right_frame:edit_note_btn", self.notes_right_frame)
	self:Register(self.edit_note_btn, "edit_note_btn")
	self:AddCallback("edit_note_btn", ui_events.BUTTON_CLICKED, function() self:OnEditNoteBtn() end, self)	
	
	self.notes_text = xml:InitScrollView("notes_right_frame:scroll_view", self.notes_right_frame)
	
	self:UpdateNotes()
end

function PDAOverlay:Update()
	CUIScriptWnd.Update(self)
	local pda = actor_get_pda()
	
	local has_pda_power = pda and pda:is_power_on()
	self.btn_off:Show(has_pda_power)
	self.date_time:Show(has_pda_power)
	
	-- local show = has_pda_power and actor:has_info("ui_pda_actor_info")--self.owner:FindChild("detail_days_in_game")
	-- self.skip_time_frame:Show(show)

	local power = is_power_device(pda) and pda:binded_object():get_power_level() or 1
	local text = string.format("%.0f%s", power * 100, "%")	
	self.power_static:SetText(text)
	self.power_progress:SetProgressPos(power)
	if power <= 0.1 then
		self.power_static:SetTextColor(255, 255, 0, 0)
	elseif self.power_static:GetTextColor() ~= self.def_power_color then
		self.power_static:SetTextColor(self.def_power_color)
	end
	
	text = string.format("%.0f %s", actor:money(), game.translate_string("ui_st_money_regional"))	
	self.money_static:SetText(text)
	
	local _time = game.get_game_time()
	self.time:SetText(_time:timeToString(game.CTime.TimeToMinutes))
	local date_text = string.format("%s %s", get_current_weekday_name(true), _time:dateToString(game.CTime.DateToDay))
	self.date:SetText(date_text)
	
	local show = has_pda_power and actor:has_info("ui_pda_notes")
	self.notes_left_frame:Show(show)
	self.notes_right_frame:Show(show)
	self.del_all_notes_btn:Show(table.size(user_notes) > 0)
	self.del_note_btn:Show(not not self.selected_note)
	self.edit_note_btn:Show(not not self.selected_note)
	
	self:UpdateRelationSpotText()
end

local spot_type = {
	neutral_location = true,
	friend_location = true,
	enemy_location = true,
	deadbody_location = true,
}

function PDAOverlay:UpdateRelationSpotText()
	function perform_action(obj)
		if not obj:is_actor() and (obj:is_stalker() or obj:is_trader()) then
			for spot, v in pairs(spot_type) do
				if level.map_has_object_spot(obj:id(), spot) then
					local hint_text = string.format("%s%s\\n%s%s\\n%s", color_by_relation[obj:relation(actor)], obj:character_name(), "%c[white]", game.translate_string(obj:character_community()), game.translate_string(ranks.get_obj_rank_name(obj)))
					level.map_change_spot_hint(obj:id(), spot, hint_text)
				end
			end			
		end
	end	
	local detect_radius = read_if_exists(sys_ini, "float", actor_get_pda():section(), "radius", 50)
	level.iterate_nearest(actor:position(), detect_radius, perform_action)
end

function PDAOverlay:UpdateTimer()
	self.hour_st:SetText(self.wait_h)
	self.minute_st:SetText(self.wait_m)
end

function PDAOverlay:DecHour()
	self.wait_h = self.wait_h - 1
	if self.wait_h < 0 then
		self.wait_h = 24
	end
	self:UpdateTimer()
end

function PDAOverlay:IncHour()
	self.wait_h = self.wait_h + 1
	if self.wait_h > 24 then
		self.wait_h = 0
	end
	self:UpdateTimer()
end

function PDAOverlay:DecMinute()
	self.wait_m = self.wait_m - 5
	if self.wait_m < 0 then
		self.wait_m = 55
	end
	self:UpdateTimer()
end

function PDAOverlay:IncMinute()
	self.wait_m = self.wait_m + 5
	if self.wait_m > 55 then
		self.wait_m = 0
	end
	self:UpdateTimer()
end

function PDAOverlay:SkipTime()
	if self.wait_h == 0 and self.wait_m == 0 then
	return end
	
	skip_time(self.wait_h, self.wait_m)
	self:ClearTime()
	self:ShowSkipTimer()
end

function PDAOverlay:ClearTime()
	self.wait_h = 0
	self.wait_m = 0
	self:UpdateTimer()
end

function PDAOverlay:ShowSkipTimer()
	local is_shown = self.skip_time_frame:IsShown()
	self.skip_time_frame:Show(not is_shown)
end

function PDAOverlay:OnNotesClick()
	--log3("~button state %s", self.notes_btn:GetCheck())
end

function PDAOverlay:OnAddNoteClick()
	if self.msg_box then
		self.msg_box:HideWnd()
	end
	self.msg_box = ui_message_box.MessageBoxUserNoteWnd(is_3d_pda())
	self.msg_box:InitAction(game.translate_string("st_add_note"), add_note)
end

function PDAOverlay:OnDelAllNotesClick()
	if self.msg_box then
		self.msg_box:HideWnd()
	end
	self.msg_box = ui_message_box.MessageBoxWnd("red", is_3d_pda())
	local text = string.format("%s?", game.translate_string("st_del_all_notes"))
	self.msg_box:InitAction(text, remove_all_notes)	
end

function PDAOverlay:UpdateNotes()
	self.selected_note = nil
	self.notes_right_header:SetText("")
	self.notes_list:Clear()
	self.notes_text:Clear()
	
	table.sort( user_notes, function(a,b) return a.time > b.time end )
	
	for k,v in ipairs(user_notes) do
		local list_prefix = "%c[UI_orange]["..k.."]%c[default]"
		local note_name_st = self.xml:InitStatic("notes_left_frame:scroll_view:static_item", self.notes_list)
		local text = string.format("%s %s", list_prefix, v.name)
		note_name_st:SetText(text)
		note_name_st:AdjustHeightToText()
		
		local name = "note_name_"..k
		self:Register(note_name_st, name)
		self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnNoteNameLButton(k) end, self)
		--self:AddCallback(name, ui_events.WINDOW_LBUTTON_DB_CLICK, function() self:OnEditNoteBtn(k) end, self)
		
		-- name = "remove_btn_"..k
		-- local del_note_btn = self.xml:Init3tButton("notes_left_frame:scroll_view:del_note_btn", note_name_st)
		-- self:Register(del_note_btn, name)
		-- self:AddCallback(name, ui_events.BUTTON_CLICKED, function() self:OnRemoveNoteBtn(k) end, self)
		-- --del_note_btn:Show(false)
		
		-- name = "edit_btn_"..k
		-- local edit_note_btn = self.xml:Init3tButton("notes_left_frame:scroll_view:edit_note_btn", note_name_st)
		-- self:Register(edit_note_btn, name)
		-- self:AddCallback(name, ui_events.BUTTON_CLICKED, function() self:OnEditNoteBtn(k) end, self)
		-- --edit_note_btn:Show(false)
		
		-- name = "note_name_"..k
		-- self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnNoteNameFocus(del_note_btn, edit_note_btn, k) end, self)
		-- self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnNoteNameFocusLost(del_note_btn, edit_note_btn, k) end, self)
	end
end

function PDAOverlay:OnNoteNameLButton(i)
	self.selected_note = i
	self.notes_text:Clear()
	local note = user_notes[i]
	local note_text = self.xml:InitStatic("notes_right_frame:scroll_view:static_item", self.notes_text)
	note_text:SetText(note.text)
	note_text:AdjustHeightToText()
	
	local text = string.format("[%s] %s\\n%s %s", i, note.name, get_weekday_name(note.time), note.time:dateToString(game.CTime.DateToDay))
	self.notes_right_header:SetText(text)
end

function PDAOverlay:OnEditNoteBtn()
	if not self.selected_note then return end
	local i = self.selected_note
	local note = user_notes[i]
	if not note then
	return end
	if self.msg_box then
		self.msg_box:HideWnd()
	end	
	self.msg_box = ui_message_box.MessageBoxUserNoteWnd(is_3d_pda())
	self.msg_box:SetEditText(note.name, note.text)
	self.msg_box:InitAction(game.translate_string("st_edit_note"), edit_note, i)	
end

function PDAOverlay:OnRemoveNoteBtn()
	if not self.selected_note then return end
	local i = self.selected_note
	local note = user_notes[i]
	if self.msg_box then
		self.msg_box:HideWnd()
	end	
	self.msg_box = ui_message_box.MessageBoxWnd("red", is_3d_pda())
	local text = string.format("%s %s ?", game.translate_string("st_del_note"), note.name)
	self.msg_box:InitAction(text, remove_note, i)
end

function PDAOverlay:OnNoteNameFocus(del_btn, edit_btn, i)
	if not del_btn or not edit_btn then
	return end
	del_btn:Show(true)
	edit_btn:Show(true)
end

function PDAOverlay:OnNoteNameFocusLost(del_btn, edit_btn, i)
	if not del_btn or not edit_btn then
	return end
	del_btn:Show(false)
	edit_btn:Show(false)
end

function PDAOverlay:HidePda()
	if is_3d_pda() then
		actor:activate_slot(NO_ACTIVE_SLOT)
	else
		level.start_stop_menu(level.main_input_receiver(), true)
	end	
end

function PDAOverlay:OnShow()
	self.prev_active_slot = actor:active_slot()
	local cursor_pos = vector2():set(UI_BASE_WIDTH * 0.5, UI_BASE_HEIGHT * 0.7)
	level.set_cursor_pos(cursor_pos)	
end

function PDAOverlay:OnHide()
	self.skip_time_frame:Show(false)
	if self.msg_box then
		self.msg_box:HideWnd()
	end
	self.msg_box = nil
	level.add_call(
		function()
			return actor:active_slot() == NO_ACTIVE_SLOT
		end,
		function()
			actor:activate_slot(self.prev_active_slot)
		end
	)
end


----------------------------------------------------------CUSTOM PDA TABS-------------------------------------------------------------------------
local custom_tabs = {
	[7] = {init_func = function(idx) return UICustomTab7(idx) end, overlay_xml = "script_overlays\\ui_pda_custom_tab_7.xml"}
}

function get_custom_tab(idx)
	if not custom_tabs[idx] then
		log3("!PDA CUSTOM TAB %s IS NOT DESCRIBED IN %s", idx, script_name())
	return end
	if not custom_tabs[idx].wnd then
		custom_tabs[idx].wnd = custom_tabs[idx].init_func(idx)
	end
	return custom_tabs[idx].wnd
end


class "UICustomTab7" (CUIScriptWnd)
function UICustomTab7:__init(idx) super()
	self:InitControls(idx)
	self:Subscribe()
end

function UICustomTab7:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			-- {signal = "on_cell_item_focus", self = self, fun = self.OnCellItemFocus},
			-- {signal = "on_cell_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
			-- {signal = "on_quick_item_focus", self = self, fun = self.OnCellItemFocus},
			-- {signal = "on_quick_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
			-- {signal = "on_repair_list_item_focus", self = self, fun = self.OnCellItemFocus},
			-- {signal = "on_repair_list_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
			-- {signal = "on_key_press", self = self, fun = self.OnCellItemFocusLost},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function UICustomTab7:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function UICustomTab7:InitControls(idx)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	local xml = CScriptXmlInit()
	xml:ParseFile(custom_tabs[idx].overlay_xml)

	self.background_frame = xml:InitFrame("background_frame", self)	
end