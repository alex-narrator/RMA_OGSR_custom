-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press", 					fun = this.on_key_press})
	sm:subscribe({signal = "on_hud_state_switch", 			fun = this.on_state_switch})
	sm:subscribe({signal = "on_test_key_press", 			fun = this.log_dump_params})
	sm:subscribe({signal = "on_actor_weapon_zoom_in", 		fun = this.on_zoom_in})
	sm:subscribe({signal = "on_actor_weapon_zoom_out", 		fun = this.on_zoom_out})
	sm:subscribe({signal = "on_weapon_fire", 				fun = this.on_fire})
end

local DEBUG_LOG = true
local DEBUG_DOF_INENSITY = nil

local sm = ogse_signals.get_mgr()

local params = nil

function log_dump_params()
	log_news("#DUMP 3DSS SHADER SCOPE PARAMS TO LOG")
	log3("################################ 3DSS PARAMS LOG START ################################")
	local s3ds_param_1 = shader_get_custom_param_vector("s3ds_param_1")
	log3("#s3ds_param_1")
	log3("s3ds_reticle_size = %s", s3ds_param_1.x)
	log3("s3ds_eye_relief = %s", s3ds_param_1.y)
	log3("s3ds_exit_pupil = %s", s3ds_param_1.z)
	log3("s3ds_ffp = %s", s3ds_param_1.w)
	log3("---------------------------------------------------------------------------------------")
	local s3ds_param_2 = shader_get_custom_param_vector("s3ds_param_2")
	log3("#s3ds_param_2")
	log3("s3ds_reflection_hue = %s", s3ds_param_2.x)
	log3("s3ds_precision_mode = %s", s3ds_param_2.y)
	log3("s3ds_min_zoom_1x = %s", s3ds_param_2.z)
	log3("s3ds_fake_zoom = %s", s3ds_param_2.w)
	log3("---------------------------------------------------------------------------------------")
	local s3ds_param_3 = shader_get_custom_param_vector("s3ds_param_3")
	log3("#s3ds_param_3")
	log3("s3ds_image_type = %s", s3ds_param_3.x)
	log3("s3ds_reticle_type = %s", s3ds_param_3.y)
	log3("s3ds_dirt_intensity = %s", s3ds_param_3.z)
	log3("s3ds_chroma_power = %s", s3ds_param_3.w)
	log3("---------------------------------------------------------------------------------------")
	local s3ds_param_4 = shader_get_custom_param_vector("s3ds_param_4")
	log3("#s3ds_param_4")
	log3("s3ds_lens_color R = %s", s3ds_param_4.x)
	log3("s3ds_lens_color G = %s", s3ds_param_4.y)
	log3("s3ds_lens_color B = %s", s3ds_param_4.z)
	log3("PACKED SETTINGS = %s", s3ds_param_4.w)
	log3("---------------------------------------------------------------------------------------")	
	log3("################################ 3DSS PARAMS LOG END ##################################")
end

local function reset_shader_zoom_params()
	shader_set_custom_param("s3ds_param_1", 0, 0, 0, 0)
	shader_set_custom_param("s3ds_param_2", 0, 0, 0, 0) --обязательно обнуляем когда прицел неактивен, w используется в двиге для определения, активен ли 3д прицел.
	shader_set_custom_param("s3ds_param_3", 0, 0, 0, 0)
	shader_set_custom_param("s3ds_param_4", 0, 0, 0, 0)
	shader_set_custom_param("s3ds_param_5", 0, 0, 0, 0)
	params = nil
end

local process_states = {
	[global_flags.eShowing] = true,
	-- [global_flags.eIdle] = true,
}
function on_state_switch(item, state, old_state)
	if not process_states[state] or item:get_slot() == DETECTOR_SLOT then
	return end
	try_apply_params(item)
end

function try_apply_params(item)
	--set_pda_params(vector():set(0,0,0)) --//якщо так не зробити то зникне марка коліматора у шейдері models_lfo_light_dot_weapons_simple
	
	if not is_3d_scopes_enabled() then
		reset_shader_zoom_params()
	return end
	
	local wpn = item:get_weapon()
	if not wpn then
		reset_shader_zoom_params()
	return end
	
	local sect = item:section()
	
	local param_sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or sect
	local fake_zoom = read_if_exists(sys_ini, "r_float", param_sect, sect.."_s3ds_fake_zoom", read_if_exists(sys_ini, "r_float", param_sect, "s3ds_fake_zoom", nil))
	if not fake_zoom then
		reset_shader_zoom_params()
		--log_news("~return with item %s | sect %s", sect, param_sect)
	return end
	
	local zoom_params = get_zoom_data(item)
	if not zoom_params then
		reset_shader_zoom_params()
	return end
	
	if params and params.weapon_id and params.weapon_id == item:id() and params.param_sect and params.param_sect == param_sect then
	return end
	
	params = {}
	
	params.weapon_id = item:id()
	params.param_sect = param_sect
	
	local reticle_size = read_if_exists(sys_ini, "r_float", param_sect, sect.."_s3ds_reticle_size", read_if_exists(sys_ini, "r_float", param_sect, "s3ds_reticle_size", 4))
	local eye_relief = read_if_exists(sys_ini, "r_float", param_sect, sect.."_s3ds_eye_relief", read_if_exists(sys_ini, "r_float", param_sect, "s3ds_eye_relief", 4))
	local exit_pupil = read_if_exists(sys_ini, "r_float", param_sect, sect.."_s3ds_exit_pupil", read_if_exists(sys_ini, "r_float", param_sect, "s3ds_exit_pupil", 0.3))
	local ffp = read_if_exists(sys_ini, "r_u32", param_sect, sect.."_s3ds_ffp", read_if_exists(sys_ini, "r_u32", param_sect, "s3ds_ffp", 0))
	
	local reflection_hue = read_if_exists(sys_ini, "r_float", param_sect, sect.."_s3ds_reflection_hue", read_if_exists(sys_ini, "r_float", param_sect, "s3ds_reflection_hue", 0))
	local precision_mode = read_if_exists(sys_ini, "r_u32", param_sect, sect.."_s3ds_precision_mode", read_if_exists(sys_ini, "r_u32", param_sect, "s3ds_precision_mode", 0))
	local min_zoom_1x = read_if_exists(sys_ini, "r_u32", param_sect, sect.."_s3ds_min_zoom_1x", read_if_exists(sys_ini, "r_u32", param_sect, "s3ds_min_zoom_1x", 0))
	local fake_zoom = read_if_exists(sys_ini, "r_float", param_sect, sect.."_s3ds_fake_zoom", read_if_exists(sys_ini, "r_float", param_sect, "s3ds_fake_zoom", 1))
	
	local image_type = read_if_exists(sys_ini, "r_u32", param_sect, sect.."_s3ds_image_type", read_if_exists(sys_ini, "r_u32", param_sect, "s3ds_image_type", 0))
	local reticle_type = read_if_exists(sys_ini, "r_u32", param_sect, sect.."_s3ds_reticle_type", read_if_exists(sys_ini, "r_u32", param_sect, "s3ds_reticle_type", 0))
	local dirt_intensity = read_if_exists(sys_ini, "r_float", param_sect, sect.."_s3ds_dirt_intensity", read_if_exists(sys_ini, "r_float", param_sect, "s3ds_dirt_intensity", 0))
	local chroma_power = read_if_exists(sys_ini, "r_float", param_sect, sect.."_s3ds_chroma_power", read_if_exists(sys_ini, "r_float", param_sect, "s3ds_chroma_power", 0.02))

	local lens_color = read_if_exists(sys_ini, "r_vector", param_sect, sect.."_s3ds_lens_color", read_if_exists(sys_ini, "r_vector", param_sect, "s3ds_lens_color", vector():set(1,1,1)))
	
	local mark_color = read_if_exists(sys_ini, "r_vector", param_sect, sect.."_s3ds_mark_color", read_if_exists(sys_ini, "r_vector", param_sect, "s3ds_mark_color", nil))

	-- local mark_number = get_float(scope_name, "mark_number", 0)
	
	-- if image_type == IT_NONE then
		-- params.nv_mode = read_if_exists(sys_ini, "r_float", param_sect, "s3ds_param_5", nil)
	-- end

	local function pack_binary_settings()
		local NVG_BLUR = read_if_exists(sys_ini, "r_bool", param_sect, sect.."_s3ds_nvg_blur", read_if_exists(sys_ini, "r_bool", param_sect, "s3ds_nvg_blur", false))
		local PARALLAX_SHADOW = read_if_exists(sys_ini, "r_bool", param_sect, sect.."_s3ds_parallax_shadow", read_if_exists(sys_ini, "r_bool", param_sect, "s3ds_parallax_shadow", true))
		local SEE_THROUGH = read_if_exists(sys_ini, "r_bool", param_sect, sect.."_s3ds_see_through", read_if_exists(sys_ini, "r_bool", param_sect, "s3ds_see_through", true))
		local THERMAL_PIXELATION = read_if_exists(sys_ini, "r_bool", param_sect, sect.."_s3ds_thermal_pixelation", read_if_exists(sys_ini, "r_bool", param_sect, "s3ds_thermal_pixelation", true))
		local CHROMATISM = read_if_exists(sys_ini, "r_bool", param_sect, sect.."_s3ds_chromatism", read_if_exists(sys_ini, "r_bool", param_sect, "s3ds_chromatism", true))
		local THERMAL_PIXELATION_ZOOM_SCALE = read_if_exists(sys_ini, "r_bool", param_sect, sect.."_s3ds_thermal_pixelation", read_if_exists(sys_ini, "r_bool", param_sect, "s3ds_thermal_pixelation_zoom_scale", false))

		return (NVG_BLUR and 1 or 0)
			+ (PARALLAX_SHADOW and 1 or 0) * 2
			+ (SEE_THROUGH and 1 or 0) * 4
			+ (THERMAL_PIXELATION and 1 or 0) * 8
			+ (CHROMATISM and 1 or 0) * 16
			+ (THERMAL_PIXELATION_ZOOM_SCALE and 1 or 0) * 32
	end

	shader_set_custom_param("s3ds_param_1", reticle_size, eye_relief, exit_pupil, ffp)
	shader_set_custom_param("s3ds_param_2", reflection_hue, precision_mode, min_zoom_1x, fake_zoom)
	shader_set_custom_param("s3ds_param_3", image_type, reticle_type, dirt_intensity, chroma_power)
	shader_set_custom_param("s3ds_param_4", lens_color.x, lens_color.y, lens_color.z, pack_binary_settings())
	
	shader_set_custom_param("s3ds_param_5", zoom_params[2] or zoom_params[1], 0, 0, 0)
	if mark_color then
		shader_set_custom_param("mark_color", mark_color.x, mark_color.y, mark_color.z, 0)
	end
	-- shader_set_custom_param("mark_number", mark_number, 0, 0, 0)
	
	if alife():object(item:id()).is_nvd_on and image_type > IT_NONE then
		local s3ds_param_5 = shader_get_custom_param_vector("s3ds_param_5")
		s3ds_param_5.z = 1
		shader_set_custom_param_vector("s3ds_param_5", s3ds_param_5)
		-- log3("~item %s | section %s | NV %s", sect, param_sect, s3ds_param_5.z)
	end
	
	--log_news("~item %s | sect %s | reticle_type %s", sect, param_sect, reticle_type)
	--log_news("~item %s | sect %s - zoom_params: min_zoom_1x %s | precision_mode %s | fake_zoom %s", sect, param_sect, min_zoom_1x, precision_mode, fake_zoom)
end

local nvd_action = {
	[key_bindings.kNIGHT_VISION] = true,
}
function on_key_press(key, game_action)
	if level.main_input_receiver() or not actor_hands_free() then
	return end
	
	if not nvd_action[game_action] then
	return end
	
	local act_item = actor:active_item()
	if not act_item then
	return end
	
	if not act_item:is_zoomed() or act_item:get_gl_mode() then
	return end
	
	local wpn = act_item:get_weapon()
	if not wpn or wpn:aim_alt_mode() then
	return end
	
	if not params then
	return end
	
	local s3ds_param_3 = shader_get_custom_param_vector("s3ds_param_3")
	if s3ds_param_3.x == IT_NONE then
	return end

	local add_act = key_state(bind_to_dik(key_bindings.kADDITIONAL_ACTION))
	
	local s3ds_param_5 = shader_get_custom_param_vector("s3ds_param_5")
	
	local switch_on = s3ds_param_5.z == 0
	
	if add_act and s3ds_param_3.x > IT_NV then
		s3ds_param_5.z = s3ds_param_5.z == 2 and 1 or 2
		if switch_on then
			nvd.play_nvd_sound(params.param_sect, true)
		else
			nvd.play_switch_sound(params.param_sect)
		end
	else
		nvd.play_nvd_sound(params.param_sect, switch_on)
		s3ds_param_5.z = switch_on and 1 or 0
	end
	
	shader_set_custom_param_vector("s3ds_param_5", s3ds_param_5)
	level.add_complex_effector("fire_mode", 1918)
	
	alife():object(act_item:id()).is_nvd_on = s3ds_param_5.z > 0
	
	--//далі це натискання клавіші не обробляємо у скрипті ПНБ
	-- return true
end

function on_zoom_in(weapon)
	local wpn = weapon:get_weapon()
	if not wpn:is_3dss_enabled() or wpn:aim_alt_mode() then
	return end
	
	local sect = weapon:section()
	local param_sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or sect
	local dof_aim_intensity = DEBUG_DOF_INENSITY or read_if_exists(sys_ini, "r_string", param_sect, sect.."_s3ds_dof_aim_intensity", read_if_exists(sys_ini, "r_string", param_sect, "s3ds_dof_aim_intensity", 1))
	
	level.add_call(
		function()
			--log3("~zoom_inc called for weapon %s", weapon:section())
			local zrt = weapon:get_weapon().zoom_rotation_factor
			set_dof_params(0, 0, dof_aim_intensity*zrt, 0)
			return zrt == 1 or zrt == 0
		end,
		function()
		end
	)
	
	sm:subscribe( { signal = "on_update", fun = this.on_update } )
end

function on_zoom_out(weapon)
	local wpn = weapon:get_weapon()
	if not wpn:is_3dss_enabled() or wpn:aim_alt_mode() then
	return end
	
	local sect = weapon:section()
	local param_sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or sect
	local dof_aim_intensity = DEBUG_DOF_INENSITY or read_if_exists(sys_ini, "r_string", param_sect, sect.."_s3ds_dof_aim_intensity", read_if_exists(sys_ini, "r_string", param_sect, "s3ds_dof_aim_intensity", 1))
	
	level.add_call(
		function()
			--log3("~zoom_dec called for weapon %s", weapon:section())
			local zrt = weapon:get_weapon().zoom_rotation_factor
			if level.main_input_receiver() then
				zrt = 0
			end			
			set_dof_params(0, 0, dof_aim_intensity*zrt, 0)
			return zrt == 0
		end,
		function()
		end		
	)
	sm:unsubscribe( { signal = "on_update", fun = this.on_update } )
end

--//для особливого випадку гвинтівки Мосіна-Нагана
--//при її анімаціях пересмикування затвору після пострілу лінза 3D-прицілу "просвічує" крізь руку, тож будемо тимчасово вимикати 3D-приціл і повертати в потрібний момент анімації
local temporary_disable_s3ds = {
	["wpn_mosin"] = {0.8, 1.8},
}

function on_fire(weapon)
	if not weapon:is_zoomed() then
	return end
	local wpn = weapon:get_weapon()
	if not wpn:is_3dss_enabled() or wpn:aim_alt_mode() then
	return end
	local timing = temporary_disable_s3ds[weapon:section()]
	if not timing then
	return end
	local s3ds_param_2 = shader_get_custom_param_vector("s3ds_param_2")
	local fake_zoom = s3ds_param_2.w
	add_time_delayed_action(
		timing[1],
		function()
			s3ds_param_2.w = 0
			shader_set_custom_param_vector("s3ds_param_2", s3ds_param_2)
		end
	)
	add_time_delayed_action(
		timing[2],
		function()
			s3ds_param_2.w = fake_zoom
			shader_set_custom_param_vector("s3ds_param_2", s3ds_param_2)
		end
	)	
end

function on_update()
	local s3ds_param_5 = shader_get_custom_param_vector("s3ds_param_5")
	s3ds_param_5.y = actor:get_camera_fov() / device().fov
	shader_set_custom_param_vector("s3ds_param_5", s3ds_param_5)
end