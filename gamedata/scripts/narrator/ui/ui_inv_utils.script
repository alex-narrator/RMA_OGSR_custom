-- -*- mode: lua; coding: windows-1251-dos -*-
function GetOffset(offset_type, icon, parent_icon)
	local offset = vector2():set(0,0)
	if offset_type == "center" then
		return offset:set(
			(parent_icon:GetWidth() / 2) - (icon:GetWidth() / 2), 
			(parent_icon:GetHeight() / 2) - (icon:GetHeight() / 2))
	elseif offset_type == "left_down" then
		return offset:set(
			0, 
			parent_icon:GetHeight() - icon:GetHeight())
	elseif offset_type == "left_top" then
		return offset
	elseif offset_type == "left_center" then
		return offset:set(
			0, 
			(parent_icon:GetHeight() / 2) - (icon:GetHeight() / 2))
	elseif offset_type == "right_top" then
		return offset:set(
			parent_icon:GetWidth() - icon:GetWidth(),
			0)
	elseif offset_type == "right_down" then
		return offset:set(
			parent_icon:GetWidth() - icon:GetWidth(),
			parent_icon:GetHeight() - icon:GetHeight())
	elseif offset_type == "right_center" then
		return offset:set(
			parent_icon:GetWidth() - icon:GetWidth(),
			(parent_icon:GetHeight() / 2) - (icon:GetHeight() / 2))
	elseif offset_type == "center_top" then
		return offset:set(
			(parent_icon:GetWidth() / 2) - (icon:GetWidth() / 2),
			0)
	elseif offset_type == "center_down" then
		return offset:set(
			(parent_icon:GetWidth() / 2) - (icon:GetWidth() / 2),
			parent_icon:GetHeight() - icon:GetHeight())			
	end
	log3("!incorrect offset type %s", offset_type or "NONE")
	return offset
end

function CellItemFitToSize(params, icon, parent_icon, size)
	
	local icon_size = vector2():set(params.grid_width * CELL_W * get_current_kx(), params.grid_height * CELL_H)
	local static_size = parent_icon and vector2():set(parent_icon:GetWidth(), parent_icon:GetHeight()) or size
	
	local scale_x = static_size.x / icon_size.x
	scale_x = scale_x > 1 and 1 or scale_x
	local scale_y = static_size.y / icon_size.y
	scale_y = scale_y > 1 and 1 or scale_y
	local scale = math.min(scale_x, scale_y)
	
	icon:SetWidth(icon_size.x * scale)
	icon:SetHeight(icon_size.y * scale)	
end

function try_add_to_list(item, tbl, group_similar)
	local ammo = item:get_weapon_ammo()
	local item_count = (not ammo or ammo:is_magazine()) and 1 or ammo.box_curr
	if not group_similar then
		table.insert(tbl, {item = item, count = item_count})
	return end
	for k, v in pairs(tbl) do
		if similar_item(v.item, item) then
			v.count = v.count + item_count
		return end
	end
	table.insert(tbl, {item = item, count = item_count})
end

function similar_item(item1, item2)
	-- local t = profile_timer()
	-- t:start()
	
	local fsim = math.fsimilar
	local cmp = 0.01
	local iitem1, iitem2 = item1:get_inventory_item(), item2:get_inventory_item()
	
	local function same_effect(item1, item2)
		for i=0,10 do
			local eff1 = iitem1:item_effect(i)
			local eff2 = iitem2:item_effect(i)
			if i == 4 and is_rad_absolute() then
				eff1 = eff1*get_rad_absolute_eqivalent()*3600
				eff2 = eff2*get_rad_absolute_eqivalent()*3600
			end
			if not fsim(eff1, eff2, cmp) then
				return false 
			end
		end
		return true
	end

	local similar = fsim(item1:condition(), item2:condition(), cmp) 
		and fsim(item1:weight(), item2:weight(), cmp) 
		and fsim(item1:cost(), item2:cost(), cmp) 
		and item1:section() == item2:section() 
		and loadout.can_remove(item1) == loadout.can_remove(item2) 
		and same_effect(item1, item2)
		--//для NPC не треба розділяти предмети по місцезнаходженню в інвентарі, щоб у торгівлі вони групувалися
		--and (not (parent_is_actor(item1) and parent_is_actor(item2)) or iitem1.item_place == iitem2.item_place)
	
	local ammo1, ammo2 = item1:get_weapon_ammo(), item2:get_weapon_ammo()
	if ammo1 and ammo2 then
		if ammo1:is_magazine() and ammo2:is_magazine() then
			local similar_magazine = (ammo1:ammo_sect() == ammo2:ammo_sect() and ammo1.box_curr > 0 and ammo2.box_curr > 0) or (ammo1.box_curr == 0 and ammo2.box_curr == 0)
			return similar and similar_magazine
		-- else
			-- return item1:section() == item2:section()
		end
	end
	
	local eatable1, eatable2 = item1:get_eatable_item(), item2:get_eatable_item()
	if eatable1 and eatable2 then
		similar = similar and eatable1.eat_portions_num == eatable2.eat_portions_num
	end
	
	if item1:is_weapon() and item2:is_weapon() then
		similar = similar and item1:get_addon_flags() == item2:get_addon_flags()
	end
	
	if is_power_device(item1) and is_power_device(item2) then
		similar = similar and fsim(item1:binded_object():get_power_level(), item2:binded_object():get_power_level(), cmp)
	end
	
	--if item1:get_pda() and item2:get_pda() then
	if is_pda_hackable(item1) and is_pda_hackable(item2) then
		local se_item1, se_item2 = alife():object(item1:id()), alife():object(item2:id())
		similar = similar and se_item1.lock_state == 0 and se_item2.lock_state == 0
	end
	
	-- t:stop()
	-- log3("~similar_item profiled time %s micro-seconds | %s seconds", t:time(), t:time() * 0.000001)	
	
	return similar
end

local OVERLAY_XML = "script_overlays\\actor_menu_overlay.xml"
local addon_name = {
	"silencer",
	"scope",
	"grenade_launcher",
	"laser",
	"flashlight",
	"stock",
	"extender",
	"forend",
	"magazine",
}

function get_addon_offset(i, addon_sect, weapon_sect)
	local x = read_if_exists(sys_ini, "r_float", weapon_sect, addon_sect.."_x", read_if_exists(sys_ini, "r_float", weapon_sect, addon_name[i].."_x", 0))
	local y = read_if_exists(sys_ini, "r_float", weapon_sect, addon_sect.."_y", read_if_exists(sys_ini, "r_float", weapon_sect, addon_name[i].."_y", 0))
	return vector2():set(x,y)
end

function UpdateWpnIcons(item, icon)
	local wpn = item:get_weapon_m()
	if not wpn then
	return end
	
	local addon_st, offset, icon_sect, params, width, height, cell_w, cell_h
	local heading = icon:GetCUIStatic():GetHeading()
	local rotate = heading ~= 0
	local sect = item:section()
	--log3("~heading %s for item %s", heading, sect)	
	local wpn_params = CIconParams(sect)			
	local i
	for k,v in ipairs(addon_name) do
		i = k-1
		if wpn:addon_attachable(i) then
			
			if not wpn:is_addon_attached(i) then
				local static = icon:FindChild(v)
				if static then
					icon:DetachChild(static)
				end
			else
				local addon_sect = wpn:get_addon_name(i)
				icon_sect = read_if_exists(sys_ini, "r_string", addon_sect, sect.."_icon_sect", read_if_exists(sys_ini, "r_string", addon_sect, "addon_icon_sect", v ~= "magazine" and addon_sect or nil))
				offset = get_addon_offset(k, addon_sect, sect)
				--log3("wpn %s, addon %s, icon_sect %s, offset.x %s, offset.y %s", item:name(), v, icon_sect, offset.x, offset.y)
				if icon_sect then
					--log3("icon sect %s", icon_sect or "NONE")
					params = CIconParams(icon_sect)
					addon_st = icon:FindChild(v)
					if addon_st then
						addon_st = addon_st:GetCUIStatic()
					else
						addon_st = CUIStatic()
						params:set_shader(addon_st)
						addon_st:SetWindowName(v)
						icon:AttachChild(addon_st)
					end

					addon_st:EnableHeading(rotate)
				
					if rotate then
						cell_w = icon:GetHeight() / wpn_params.grid_width
						cell_h = icon:GetWidth() / wpn_params.grid_height
						width = params.grid_height * cell_w
						height = params.grid_width * cell_h
						addon_st:SetWidth(width)
						addon_st:SetHeight(height)
						if heading > 0 then
							addon_st:SetWndPos(offset.y * (cell_w/CELL_W) * get_current_kx(), icon:GetHeight() - height - offset.x * (cell_h/CELL_H))
						else
							addon_st:SetWndPos(icon:GetWidth() - width - offset.y * (cell_w/CELL_W) * get_current_kx(), offset.x * (cell_h/CELL_H))
						end
						addon_st:SetHeading(heading)
						local pivot = vector2():set(cell_w * 0.5, cell_h * 0.5) --//обертаємо навколо центру лівої верхньої клітинки сітки
						local offset = heading > 0 and vector2():set(0, height - cell_h) or vector2():set(width - cell_w, 0)
						addon_st:SetHeadingPivot(pivot, offset, true)						
					
						--log3("~item %s | width %s | height %s | params.grid_width %s | params.grid_height %s | wpn_params.grid_width %s | wpn_params.grid_height %s", item:section(), width, height, params.grid_width, params.grid_height, wpn_params.grid_width, wpn_params.grid_height)
					else
						cell_w = icon:GetWidth() / wpn_params.grid_width
						cell_h = icon:GetHeight() / wpn_params.grid_height
						width = params.grid_width * cell_w
						height = params.grid_height * cell_h
						addon_st:SetWidth(width)
						addon_st:SetHeight(height)
						addon_st:SetWndPos(offset.x * (cell_w/CELL_W), offset.y * (cell_h/CELL_H))
					end
				end
			end
		end
	end
	
	if get_clsid(item) == clsid.wpn_rpg7_s and item:get_ammo_in_magazine() > 0 then
	
		if item:get_ammo_in_magazine() == 0 then
			local static = icon:FindChild("grenade")
			if static then
				icon:DetachChild(static)
			end
		else
			icon_sect = get_cur_ammo_sect(item)
			offset = vector2():set(read_if_exists(sys_ini, "r_float", sect, "grenade_x", 0), read_if_exists(sys_ini, "r_float", sect, "grenade_y", 0))
			if icon_sect then
				params = CIconParams(icon_sect)
				addon_st = icon:FindChild("grenade")
				if addon_st then
					addon_st = addon_st:GetCUIStatic()
				else
					addon_st = CUIStatic()
					params:set_shader(addon_st)
					addon_st:SetWindowName("grenade")
					icon:AttachChild(addon_st)
				end

				addon_st:EnableHeading(rotate)
				
				if rotate then
					cell_w = icon:GetHeight() / wpn_params.grid_width
					cell_h = icon:GetWidth() / wpn_params.grid_height
					width = params.grid_height * cell_w
					height = params.grid_width * cell_h
					addon_st:SetWidth(width)
					addon_st:SetHeight(height)
					if heading > 0 then
						addon_st:SetWndPos(offset.y * (cell_w/CELL_W) * get_current_kx(), icon:GetHeight() - height - offset.x * (cell_h/CELL_H))
					else
						addon_st:SetWndPos(icon:GetWidth() - width - offset.y * (cell_w/CELL_W) * get_current_kx(), offset.x * (cell_h/CELL_H))
					end
					addon_st:SetHeading(heading)
					local pivot = vector2():set(cell_w * 0.5, cell_h * 0.5) --//обертаємо навколо центру лівої верхньої клітинки сітки
					local offset = heading > 0 and vector2():set(0, height - cell_h) or vector2():set(width - cell_w, 0)
					addon_st:SetHeadingPivot(pivot, offset, true)	
				else
					cell_w = icon:GetWidth() / wpn_params.grid_width
					cell_h = icon:GetHeight() / wpn_params.grid_height
					width = params.grid_width * cell_w
					height = params.grid_height * cell_h
					addon_st:SetWidth(width)
					addon_st:SetHeight(height)
					addon_st:SetWndPos(offset.x * (cell_w/CELL_W), offset.y * (cell_h/CELL_H))
				end
			end
		end		
	end
end

function UpdateAdditionalStatic(icon, text)
	if not text then
	return end

	local function update(static)
		local offset = GetOffset("right_down", static, icon)
		static:SetText(text)
		static:SetWndPos(offset.x, offset.y)
		icon:BringToTop(static)
	end
	
	local icon_custom = icon:FindChild("icon_custom")
	if icon_custom then
		icon_custom = icon_custom:GetCUIStatic()
		update(icon_custom)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	icon_custom = xml:InitStatic("cell_item_custom", icon)
	icon_custom:SetWindowName("icon_custom")
	icon_custom:SetTextComplexMode(true)
	update(icon_custom)
end

function UpdateAdditionalText(item, icon)
	local sect = type(item) == "string" and item or item:section()
	local text = read_if_exists(sys_ini, "r_string", sect, "icon_text", nil)
	if not text then
	return end
	text = game.translate_string(text)
	
	local function update(static)
		local offset = GetOffset("right_top", static, icon)
		static:SetText(text)
		static:SetWndPos(offset.x, offset.y)
		icon:BringToTop(static)
	end

	local icon_text = icon:FindChild("icon_text")
	if icon_text then
		icon_text = icon_text:GetCUIStatic()
		update(icon_text)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	icon_text = xml:InitStatic("icon_text", icon)
	icon_text:SetWindowName("icon_text")
	update(icon_text)
end

function UpdateCellItemCount(item, icon, count)
	local for_ammo = item:get_weapon_ammo() and not item:get_weapon_ammo():is_magazine() and item:get_weapon_ammo().box_size > 1
	if not count then
	return end

	local function update(static)
		local offset = GetOffset("left_top", static, icon)
		local str = for_ammo and " %s" or "x%s"
		static:Show(for_ammo or count > 1)
		static:SetText(string.format(str, count))
		static:SetWndPos(offset.x, offset.y)
		static:AdjustHeightToText()
		static:AdjustWidthToText()
		icon:BringToTop(static)
	end
	
	local cell_item_count = icon:FindChild("cell_item_count")
	if cell_item_count then
		cell_item_count = cell_item_count:GetCUIStatic()
		update(cell_item_count)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	cell_item_count = xml:InitStatic("cell_item_count", icon)
	cell_item_count:SetWindowName("cell_item_count")
	update(cell_item_count)
end

function UpdateConditionStatic(item, icon)
	if not read_if_exists(sys_ini, "r_bool", item:section(), "use_condition", false) then
	return end
	local text = string.format("%.0f%s", item:condition() * 100, "%")

	local function update(static)
		local offset = GetOffset("right_down", static, icon)
		static:SetText(text)
		static:SetWndPos(offset.x, offset.y)
		icon:BringToTop(static)
	end

	local icon_condition = icon:FindChild("icon_condition")
	if icon_condition then
		icon_condition = icon_condition:GetCUIStatic()
		update(icon_condition)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	icon_condition = xml:InitStatic("cell_item_condition", icon)
	icon_condition:SetWindowName("icon_condition")
	update(icon_condition)
end

function UpdateConditionProgress(item, icon)
	if not get_script_option_value("inv_item_condition") then
	return end
	local condition_progess_bar = icon:FindChild("condition_progess_bar")
	--if not read_if_exists(sys_ini, "r_bool", item:section(), "use_condition", false) and not is_power_device(item) then
	if item:condition() == 1 and not is_power_device(item) then
		if condition_progess_bar then
			icon:DetachChild(condition_progess_bar)
		end
	return end
	local pos = (is_power_device(item) and not read_if_exists(sys_ini, "r_bool", item:section(), "condition_as_power", false)) and item:binded_object():get_power_level() or item:condition()

	local function update(progress_bar)
		-- progress_bar:Show(actor:is_in_slot(item))
		-- if not actor:is_in_slot(item) then
		-- return end
		local offset = GetOffset("left_down", progress_bar, icon)
		offset.y = offset.y - 1
		progress_bar:SetWndPos(offset.x, offset.y)
		progress_bar:SetWidth(icon:GetWidth() - 1)
		--progress_bar:SetWidth(icon:GetWidth() / CIconParams(item:section()).grid_width - 1)
		icon:BringToTop(progress_bar)
		progress_bar:SetProgressPos(pos)
	end

	if condition_progess_bar then
		condition_progess_bar = condition_progess_bar:GetProgressBar()
		update(condition_progess_bar)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	condition_progess_bar = xml:InitProgressBar("condition_progess_bar", icon)
	condition_progess_bar:SetWindowName("condition_progess_bar")
	update(condition_progess_bar)
end

function UpdateAmmoInBoxIcon(item, icon)
	local ammo = item:get_weapon_ammo()
	if not ammo or not ammo:is_magazine() then
	return end
	local sect = item:section()
	local ammo_in_box = icon:FindChild("ammo_in_box")
	if ammo_in_box then
		ammo_in_box:Show(ammo.box_curr > 0)
		if ammo_in_box:IsShown() then
			local params = CIconParams(ammo:ammo_sect())
			params:set_shader(ammo_in_box)		
		end
		return
	end
	
	if ammo.box_curr == 0 then
	return end
	
	local params = CIconParams(ammo:ammo_sect())
	local icon_params = CIconParams(sect)
	
	local cell_w = icon:GetWidth() / icon_params.grid_width
	local cell_h = icon:GetHeight() / icon_params.grid_height
	local scale = read_if_exists(sys_ini, "r_float", sect, "ammo_icon_scale", 1)
	local width = params.grid_width * cell_w * scale
	local height = params.grid_height * cell_h * scale
	
	ammo_in_box = CUIStatic()
	params:set_shader(ammo_in_box)
	
	ammo_in_box:SetWidth(width)
	ammo_in_box:SetHeight(height)
	
	local offset = GetOffset(read_if_exists(sys_ini, "r_string", sect, "ammo_icon_offset", "center"), ammo_in_box, icon)

	ammo_in_box:SetWndPos(offset.x, offset.y)
	ammo_in_box:SetWindowName("ammo_in_box")
	icon:AttachChild(ammo_in_box)
end

function UpdateArmorPlateIcon(item, icon)
	if not item:is_outfit() then
	return end
	
	local sect = item:section()
	local armor_plate = icon:FindChild("armor_plate")
	if armor_plate then
		armor_plate:Show(vest_plates.can_detach_plate(item))
		return
	end
	
	if not vest_plates.can_detach_plate(item) then
	return end
	
	local sect = item:section()
	local plate_sect = item:binded_object():get_plate_sect()
	
	local params = CIconParams(plate_sect)
	local icon_params = CIconParams(sect)
	
	local cell_w = icon:GetWidth() / icon_params.grid_width
	local cell_h = icon:GetHeight() / icon_params.grid_height
	local scale = read_if_exists(sys_ini, "r_float", sect, "plate_icon_scale", 0.7)
	local width = params.grid_width * cell_w * scale
	local height = params.grid_height * cell_h * scale
	
	armor_plate = CUIStatic()
	params:set_shader(armor_plate)
	
	armor_plate:SetWidth(width)
	armor_plate:SetHeight(height)
	
	local offset = GetOffset(read_if_exists(sys_ini, "r_string", sect, "plate_icon_offset", "center"), armor_plate, icon)

	armor_plate:SetWndPos(offset.x, offset.y)
	armor_plate:SetWindowName("armor_plate")
	--UpdateAdditionalText(plate_sect, armor_plate)
	UpdateArmorPlateCondition(item, armor_plate)
	icon:AttachChild(armor_plate)
end

function UpdateArmorPlateCondition(item, icon)
	if not is_plate_carrier(item) or not item:binded_object() then
	return end
	
	local pos = item:binded_object():get_plate_condition()

	local function update(progress_bar)
		local offset = GetOffset("left_down", progress_bar, icon)
		offset.y = offset.y - 1
		progress_bar:SetWndPos(offset.x, offset.y)
		progress_bar:SetWidth(icon:GetWidth() - 1)
		icon:BringToTop(progress_bar)
		progress_bar:SetProgressPos(pos)
	end

	local plate_condition_progess_bar = icon:FindChild("plate_condition_progess_bar")
	if plate_condition_progess_bar then
		plate_condition_progess_bar = plate_condition_progess_bar:GetProgressBar()
		update(plate_condition_progess_bar)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	plate_condition_progess_bar = xml:InitProgressBar("plate_condition_progess_bar", icon)
	plate_condition_progess_bar:SetWindowName("plate_condition_progess_bar")
	update(plate_condition_progess_bar)
end

function UpdateMarkedIcon(item, icon)
	local sect = item:section()
	local marked_icon = icon:FindChild("marked_icon")
	if marked_icon then
		marked_icon:Show(loadout.can_remove(item))
		return
	end
	if not loadout.can_remove(item) then
	return end
	
	local marked_icon_sect = read_if_exists(sys_ini, "r_string", sect, "marked_icon_sect", nil)
	if not marked_icon_sect then
	return end
	
	local params = CIconParams(marked_icon_sect)
	local icon_params = CIconParams(sect)

	local cell_w = icon:GetWidth() / icon_params.grid_width
	local cell_h = icon:GetHeight() / icon_params.grid_height
	local width = params.grid_width * cell_w
	local height = params.grid_height * cell_h
	
	marked_icon = CUIStatic()
	params:set_shader(marked_icon)
	
	marked_icon:SetWidth(width)
	marked_icon:SetHeight(height)
	
	local offset = GetOffset(read_if_exists(sys_ini, "r_string", sect, "marked_icon_offset", "right_top"), marked_icon, icon)
	
	marked_icon:SetWndPos(offset.x, offset.y)
	marked_icon:SetWindowName("marked_icon")
	icon:AttachChild(marked_icon)	
end

function UpdateUpgrageIcon(item, icon)
	local sect = item:section()
	
	local upgrade_icon_sect = read_if_exists(sys_ini, "r_string", sect, "upgrade_icon_sect", nil)
	if not upgrade_icon_sect then
	return end
	
	local params = CIconParams(upgrade_icon_sect)
	local icon_params = CIconParams(sect)
	
	local heading = icon:GetCUIStatic():GetHeading()
	
	local offset_type = read_if_exists(sys_ini, "r_string", sect, "upgrade_icon_offset", "left_down")
	local function update(static)
		local cell_w = icon:GetWidth() / icon_params.grid_width
		local cell_h = icon:GetHeight() / icon_params.grid_height
		if heading > 0 then
			cell_h = icon:GetWidth() / icon_params.grid_height * get_current_kx()
			cell_w = icon:GetHeight() / icon_params.grid_width
		end		
		local width = params.grid_width * cell_w
		local height = params.grid_height * cell_h
		
		static:SetWidth(width)
		static:SetHeight(height)
		local offset = GetOffset(offset_type, static, icon)
		static:SetWndPos(offset.x, offset.y)
	end
	
	local upgrade_icon = icon:FindChild("upgrade_icon")
	if upgrade_icon then
		update(upgrade_icon)
		return
	end
		
	upgrade_icon = CUIStatic()
	params:set_shader(upgrade_icon)
	
	update(upgrade_icon)
	
	upgrade_icon:SetWindowName("upgrade_icon")
	icon:AttachChild(upgrade_icon)
end

local green = GetARGB(175, 0, 255, 0)
local red = GetARGB(175, 255, 0, 0)
local orange = GetARGB(175, 238, 153, 26)
function UpdatePdaLockIcon(item, icon)
	if not is_pda_hackable(item) then
	return end
	
	local sect = item:section()
	
	local pda_lock_icon_sect = read_if_exists(sys_ini, "r_string", sect, "pda_lock_icon_sect", "pda_lock_icon")
	if not pda_lock_icon_sect then
	return end
	
	local params = CIconParams(pda_lock_icon_sect)
	local icon_params = CIconParams(sect)
	
	local heading = icon:GetCUIStatic():GetHeading()
	
	local lock_state = alife():object(item:id()).lock_state
	local icon_color = green
	if lock_state == 1 then
		icon_color = orange
	elseif lock_state == 2 then
		icon_color = red
	end
	
	local offset_type = read_if_exists(sys_ini, "r_string", sect, "pda_lock_offset", "left_down")
	local function update(static)
		local cell_w = icon:GetWidth() / icon_params.grid_width
		local cell_h = icon:GetHeight() / icon_params.grid_height
		if heading > 0 then
			cell_h = icon:GetWidth() / icon_params.grid_height * get_current_kx()
			cell_w = icon:GetHeight() / icon_params.grid_width
		end		
		local width = params.grid_width * cell_w
		local height = params.grid_height * cell_h
		
		static:SetWidth(width)
		static:SetHeight(height)
		local offset = GetOffset(offset_type, static, icon)
		static:SetWndPos(offset.x, offset.y)
	end
	
	local pda_lock_icon = icon:FindChild("pda_lock_icon")
	if pda_lock_icon then
		update(pda_lock_icon)
		return
	end

	pda_lock_icon = CUIStatic()
	pda_lock_icon:SetColor(icon_color)
	params:set_shader(pda_lock_icon)
	
	update(pda_lock_icon)
	
	pda_lock_icon:SetWindowName("pda_lock_icon")
	icon:AttachChild(pda_lock_icon)
end

function UpdateQuestIcon(item, icon)
	local sect = item:section()
	
	if not read_if_exists(sys_ini, "r_bool", sect, "quest_item", false) then
	return end
	
	local quest_icon_sect = read_if_exists(sys_ini, "r_string", sect, "quest_icon_sect", "quest_icon")
	if not quest_icon_sect then
	return end
	
	local params = CIconParams(quest_icon_sect)
	local icon_params = CIconParams(sect)
	
	local heading = icon:GetCUIStatic():GetHeading()
	
	local offset_type = read_if_exists(sys_ini, "r_string", sect, "quest_icon_sect", "right_top")
	local function update(static)
		local cell_w = icon:GetWidth() / icon_params.grid_width
		local cell_h = icon:GetHeight() / icon_params.grid_height
		if heading > 0 then
			cell_h = icon:GetWidth() / icon_params.grid_height * get_current_kx()
			cell_w = icon:GetHeight() / icon_params.grid_width
		end		
		local width = params.grid_width * cell_w
		local height = params.grid_height * cell_h
		
		static:SetWidth(width)
		static:SetHeight(height)
		local offset = GetOffset(offset_type, static, icon)
		static:SetWndPos(offset.x, offset.y)
	end
	
	local quest_icon = icon:FindChild("quest_icon")
	if quest_icon then
		update(quest_icon)
		return
	end
		
	quest_icon = CUIStatic()
	params:set_shader(quest_icon)
	
	update(quest_icon)
	
	quest_icon:SetWindowName("quest_icon")
	icon:AttachChild(quest_icon)
end

function UpdateInSlotIcon(item, icon)
	local sect = item:section()
	local in_slot_icon = icon:FindChild("in_slot_icon")
	if in_slot_icon then
		in_slot_icon:Show(actor:is_in_slot(item))
		return
	end
	if not actor:is_in_slot(item) then
	return end
	
	local params = CIconParams("icon_in_slot")
	local icon_params = CIconParams(sect)

	local cell_w = icon:GetWidth() / icon_params.grid_width
	local cell_h = icon:GetHeight() / icon_params.grid_height
	local width = params.grid_width * cell_w
	local height = params.grid_height * cell_h
	
	in_slot_icon = CUIStatic()
	params:set_shader(in_slot_icon)
	
	in_slot_icon:SetWidth(width)
	in_slot_icon:SetHeight(height)
	
	local offset = GetOffset("left_top", in_slot_icon, icon)
	
	in_slot_icon:SetWndPos(offset.x, offset.y)
	in_slot_icon:SetWindowName("in_slot_icon")
	icon:AttachChild(in_slot_icon)	
end

function UpdateQuickSlotStatic(item, icon)
	local quick_slot_num = quick_slots.get_slot_num(item)
	if not quick_slot_num then
	return end
	local text = "ui_quick_slot_"..quick_slot_num
	text = game.translate_string(text)

	local function update(static)
		local offset = GetOffset("left_down", static, icon)
		static:SetText(text)
		static:SetWndPos(offset.x, offset.y)
		icon:BringToTop(static)
	end
	
	local icon_quick = icon:FindChild("icon_quick")
	if icon_quick then
		icon_quick = icon_quick:GetCUIStatic()
		update(icon_quick)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	icon_quick = xml:InitStatic("cell_item_quick", icon)
	icon_quick:SetWindowName("icon_quick")
	update(icon_quick)
end

function UpdateAttachAddonIcon(icon)
	local attach_addon_icon = icon:FindChild("attach_addon_icon")
	local params = CIconParams("addon_attach_icon")
	
	attach_addon_icon = CUIStatic()
	params:set_shader(attach_addon_icon)
	
	attach_addon_icon:SetWidth(icon:GetWidth())
	attach_addon_icon:SetHeight(icon:GetHeight())
	
	local offset = GetOffset("left_top", attach_addon_icon, icon)
	
	attach_addon_icon:SetWndPos(offset.x, offset.y)
	attach_addon_icon:SetWindowName("attach_addon_icon")
	icon:AttachChild(attach_addon_icon)	
end

function UpdateDetachAddonIcon(icon)
	local detach_addon_icon = icon:FindChild("detach_addon_icon")
	local params = CIconParams("addon_detach_icon")
	
	detach_addon_icon = CUIStatic()
	params:set_shader(detach_addon_icon)
	
	detach_addon_icon:SetWidth(icon:GetWidth())
	detach_addon_icon:SetHeight(icon:GetHeight())
	
	local offset = GetOffset("left_top", detach_addon_icon, icon)
	detach_addon_icon:SetWndPos(offset.x, offset.y)
	detach_addon_icon:SetWindowName("detach_addon_icon")
	icon:AttachChild(detach_addon_icon)	
end

function AttachRepairMenuIcons(item, icon)
	icon:DetachAll()
	--UpdateWpnIcons(item, icon)
	--UpdateArmorPlateIcon(item, icon)
	UpdateAmmoInBoxIcon(item, icon)
	--UpdateMarkedIcon(item, icon)
	UpdateUpgrageIcon(item, icon)
	UpdateQuestIcon(item, icon)
	--UpdateInSlotIcon(item, icon)
	--UpdateConditionProgress(item, icon)
	--UpdateConditionStatic(item, icon)
end

function AttachPanelIcons(item, icon, count)
	icon:DetachAll()
	UpdateWpnIcons(item, icon)
	UpdateAdditionalText(item, icon)
	UpdateAmmoInBoxIcon(item, icon)
	--UpdateMarkedIcon(item, icon)
	UpdateUpgrageIcon(item, icon)
	UpdateQuestIcon(item, icon)
	UpdateQuickSlotStatic(item, icon)
	UpdateCellItemCount(item, icon, count)
	--UpdateInSlotIcon(item, icon)
	--UpdateConditionProgress(item, icon)
	--UpdateConditionStatic(item, icon)
end

function sort_by_size(a, b)
	a = type(a) == "table" and a.item or a
	b = type(b) == "table" and b.item or b
	local params1, params2 = CIconParams(a:section()), CIconParams(b:section())
	
	if params1.grid_width > params2.grid_width then
		return true 
	end
	if params1.grid_width == params2.grid_width then
		if params1.grid_height > params2.grid_height then
			return true 
		end
		if params1.grid_height == params2.grid_height then
			if a:section() > b:section() then
				return true
			end
			
			if a:section() == b:section() then
				if a:condition() > b:condition() then
					return true
				end
				
				if a:condition() == b:condition() then
					return a:weight() > b:weight()
				end
			end
		end
	end
	
	return false
end

function sort_by_quick_slot_num(a, b)
	a = type(a) == "table" and a.item or a
	b = type(b) == "table" and b.item or b
	
	local slot_num = quick_slots.get_slot_num
	
	if slot_num(a) and slot_num(b) then
		return slot_num(a) < slot_num(b)
	end
	if slot_num(a) then
		return true
	end
	if slot_num(b) then
		return false
	end
	return sort_by_size_type(a, b)
end

function get_type(item)
	if loadout.can_remove(item) then
		return 0
	end
	if item:is_weapon() or string.find(item:section(), "wp_") or string.find(item:section(), "wpn_") then
		return 1
	end
	if item:is_ammo() or item:is_grenade() then
		return 2
	end
	if item:is_outfit() or item:is_helmet() or loadout.is_module(item) or item:get_container() or string.find(item:section(), "pouch") or string.find(item:section(), "plate_") then
		return 3
	end
	if item:is_eatable_item() or read_if_exists(sys_ini, "r_bool", item:section(), "heal_injuries", false) then
		return 4
	end
	if item:is_artefact() or string.find(item:section(), "mutant_") then
		return 5
	end
	if item:is_torch() or item:get_pda() or item:get_detector() or is_power_device(item) or string.find(item:section(), "pda") or string.find(item:section(), "battery") then
		return 6
	end
	return 7
end

function sort_by_type(a, b)
	a = type(a) == "table" and a.item or a
	b = type(b) == "table" and b.item or b
	return get_type(a) < get_type(b)
end

function sort_by_size_type(a, b)
	a = type(a) == "table" and a.item or a
	b = type(b) == "table" and b.item or b
	if get_type(a) == get_type(b) then
		return sort_by_size(a, b)
	end
	return sort_by_type(a, b)
end

local check_params = {
	["highlight_item"] = true,
	["ammo_types"] = true,
	["ammo_class"] = true,
	["magazine_class"] = true,
	["grenade_class"] = true,
	["scope_name"] = true,
	["silencer_name"] = true,
	["grenade_launcher_name"] = true,
	["laser_name"] = true,
	["flashlight_name"] = true,
	["extender_name"] = true,
	["stock_name"] = true,
	["forend_name"] = true,
	["power_source"] = true,
	["plates"] = true,
	["disassemble_parts"] = true,
}
function need_highlight(item1, item2)
	if item1:id() == item2:id() then
		return true
	end
	local sect1, sect2 = item1:section(), item2:section()
	
	local function check_sect(check_string, section_a, section_b)
		local tbl = split_string(read_if_exists(sys_ini, "r_string", section_a, check_string, nil), ",")
		if not tbl then
			return false
		end
		
		for k,v in pairs(tbl) do
			if v == section_b then
				return true
			end
		end
		return false
	end
	
	for param,v in pairs(check_params) do
		if check_sect(param, sect1, sect2) or check_sect(param, sect2, sect1) then
			return true
		end
	end
	return false
end