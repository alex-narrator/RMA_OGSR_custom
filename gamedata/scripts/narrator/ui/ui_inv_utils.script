-- -*- mode: lua; coding: windows-1251-dos -*-
function GetOffset(offset_type, icon, parent_icon)
	local offset = vector2():set(0,0)
	if offset_type == "center" then
		return offset:set(
			(parent_icon:GetWidth() / 2) - (icon:GetWidth() / 2), 
			(parent_icon:GetHeight() / 2) - (icon:GetHeight() / 2))
	elseif offset_type == "left_down" then
		return offset:set(
			0, 
			parent_icon:GetHeight() - icon:GetHeight())
	elseif offset_type == "left_top" then
		return offset
	elseif offset_type == "right_top" then
		return offset:set(
			parent_icon:GetWidth() - icon:GetWidth(),
			0)
	elseif offset_type == "right_down" then
		return offset:set(
			parent_icon:GetWidth() - icon:GetWidth(),
			parent_icon:GetHeight() - icon:GetHeight())				
	end
end

function similar_item(item1, item2)
	local fsim = math.fsimilar
	local cmp = 0.01
	local iitem1, iitem2 = item1:get_inventory_item(), item2:get_inventory_item()
	
	local function same_effect(item1, item2)
		for i=0,10 do
			if not fsim(iitem1:item_effect(i), iitem2:item_effect(i), cmp) then
				return false 
			end
		end
		return true
	end

	local similar = fsim(item1:condition(), item2:condition(), cmp) and
		fsim(item1:weight(), item2:weight(), cmp) and
		fsim(item1:cost(), item2:cost(), cmp) and
		item1:section() == item2:section() and
		item1.marked == item2.marked and
		same_effect(item1, item2) and
		--iitem1:item_effect(effect.radiation_restore) == iitem2:item_effect(effect.radiation_restore) and
		iitem1.item_place == iitem2.item_place
	
	local ammo1, ammo2 = item1:get_weapon_ammo(), item2:get_weapon_ammo()
	if ammo1 and ammo2 and ammo1:is_magazine() and ammo2:is_magazine() then
		local similar_magazine = (ammo1:ammo_sect() == ammo2:ammo_sect() and ammo1.box_curr > 0 and ammo2.box_curr > 0) or (ammo1.box_curr == 0 and ammo2.box_curr == 0)
		return similar and similar_magazine
	end
	
	local eatable1, eatable2 = item1:get_eatable_item(), item2:get_eatable_item()
	if eatable1 and eatable2 then
		return similar and eatable1.eat_portions_num == eatable2.eat_portions_num
	end
	
	
	
	return similar
end

local OVERLAY_XML = "script_overlays\\actor_menu_overlay.xml"
local addon_name = {
	"silencer",
	"scope",
	"grenade_launcher",
	"laser",
	"flashlight",
	"stock",
	"extender",
	"forend",
	"magazine",
}
function UpdateWpnIcons(item, icon)
	local wpn = item:get_weapon_m()
	if not wpn then
	return end
	
	local addon_st, offset, icon_sect, params, width, height, cell_w, cell_h
	local heading = icon:GetCUIStatic():GetHeading()
	local rotate = heading > 0
	local sect = item:section()
	--log3("~heading %s for item %s", heading, sect)	
	local wpn_params = CIconParams(sect)			
	local i
	for k,v in ipairs(addon_name) do
		i = k-1
		if wpn:addon_attachable(i) and wpn:is_addon_attached(i) then
			icon_sect = wpn:get_addon_name(i)
			offset = wpn:get_addon_offset(i)
			--log3("wpn %s, addon %s, offset.x %s, offset.y %s", item:name(), v, offset.x, offset.y)
			if v == "magazine" then
				icon_sect = read_if_exists(sys_ini, "r_string", icon_sect, "mag_icon_sect", nil)
			end
			if icon_sect then
				params = CIconParams(icon_sect)
				addon_st = icon:FindChild(v)
				if addon_st then
					addon_st = addon_st:GetCUIStatic()
				else
					addon_st = CUIStatic()
					params:set_shader(addon_st)
					addon_st:SetWindowName(v)
					icon:AttachChild(addon_st)
				end

				addon_st:EnableHeading(rotate)
				
				if rotate then
					cell_w = icon:GetHeight() / wpn_params.grid_width
					cell_h = icon:GetWidth() / wpn_params.grid_height
					width = params.grid_width * cell_w
					height = params.grid_height * cell_h
					addon_st:SetWidth(width)
					addon_st:SetHeight(height)
					
					addon_st:SetWndPos(offset.y * (cell_w/CELL_W) * get_current_kx(), icon:GetHeight() - offset.x * (cell_h/CELL_H))
					
					addon_st:SetHeading(heading)
					local zero_vec = vector2():set(0,0)
					addon_st:SetHeadingPivot(zero_vec, zero_vec, false)
					
					--log3("~item %s | width %s | height %s | params.grid_width %s | params.grid_height %s | wpn_params.grid_width %s | wpn_params.grid_height %s", item:section(), width, height, params.grid_width, params.grid_height, wpn_params.grid_width, wpn_params.grid_height)
				else
					cell_w = icon:GetWidth() / wpn_params.grid_width
					cell_h = icon:GetHeight() / wpn_params.grid_height
					width = params.grid_width * cell_w
					height = params.grid_height * cell_h
					addon_st:SetWidth(width)
					addon_st:SetHeight(height)
					addon_st:SetWndPos(offset.x * (cell_w/CELL_W), offset.y * (cell_h/CELL_H))
				end
			end
		end
	end
	
	if get_clsid(item) == clsid.wpn_rpg7_s and item:get_ammo_in_magazine() > 0 then
		icon_sect = get_cur_ammo_sect(item)
		offset = vector():set(read_if_exists(sys_ini, "r_float", sect, "grenade_x", 0), read_if_exists(sys_ini, "r_float", sect, "grenade_y", 0),0)
		if icon_sect then
			params = CIconParams(icon_sect)
			addon_st = icon:FindChild("grenade")
			if addon_st then
				addon_st = addon_st:GetCUIStatic()
			else
				addon_st = CUIStatic()
				params:set_shader(addon_st)
				addon_st:SetWindowName("grenade")
				icon:AttachChild(addon_st)
			end

			addon_st:EnableHeading(rotate)
				
			if rotate then
				cell_w = icon:GetHeight() / wpn_params.grid_width
				cell_h = icon:GetWidth() / wpn_params.grid_height
				width = params.grid_width * cell_w
				height = params.grid_height * cell_h
				addon_st:SetWidth(width)
				addon_st:SetHeight(height)
				addon_st:SetWndPos(offset.y * (cell_w/CELL_W) * get_current_kx(), icon:GetHeight() - offset.x * (cell_h/CELL_H) - cell_w)
					
				addon_st:SetHeading(heading)
				addon_st:SetHeadingPivot(vector2():set(0,0), vector2():set(0,icon:GetWidth() - cell_w), false)
			else
				cell_w = icon:GetWidth() / wpn_params.grid_width
				cell_h = icon:GetHeight() / wpn_params.grid_height
				width = params.grid_width * cell_w
				height = params.grid_height * cell_h
				addon_st:SetWidth(width)
				addon_st:SetHeight(height)
				addon_st:SetWndPos(offset.x * (cell_w/CELL_W), offset.y * (cell_h/CELL_H))
			end
		end		
	end
end

function UpdateAdditionalStatic(icon, text)
	if not text then
	return end

	local function update(static)
		local offset = GetOffset("right_down", static, icon)
		static:SetText(text)
		static:SetWndPos(offset.x, offset.y)
		icon:BringToTop(static)
	end
	
	local icon_custom = icon:FindChild("icon_custom")
	if icon_custom then
		icon_custom = icon_custom:GetCUIStatic()
		update(icon_custom)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	icon_custom = xml:InitStatic("cell_item_custom", icon)
	icon_custom:SetWindowName("icon_custom")
	update(icon_custom)
end

function UpdateCellItemCount(icon, count)
	if not count or count <= 1 then
	return end

	local function update(static)
		local offset = GetOffset("left_top", static, icon)
		static:SetText(string.format("x%s", count))
		static:SetWndPos(offset.x, offset.y)
		icon:BringToTop(static)
	end
	
	local cell_item_count = icon:FindChild("cell_item_count")
	if cell_item_count then
		cell_item_count = cell_item_count:GetCUIStatic()
		update(cell_item_count)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	cell_item_count = xml:InitStatic("cell_item_count", icon)
	cell_item_count:SetWindowName("cell_item_count")
	update(cell_item_count)
end

function UpdateConditionStatic(item, icon)
	if not read_if_exists(sys_ini, "r_bool", item:section(), "use_condition", false) then
	return end
	local text = string.format("%.0f%s", item:condition() * 100, "%")

	local function update(static)
		local offset = GetOffset("right_down", static, icon)
		static:SetText(text)
		static:SetWndPos(offset.x, offset.y)
		icon:BringToTop(static)
	end

	local icon_condition = icon:FindChild("icon_condition")
	if icon_condition then
		icon_condition = icon_condition:GetCUIStatic()
		update(icon_condition)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	icon_condition = xml:InitStatic("cell_item_condition", icon)
	icon_condition:SetWindowName("icon_condition")
	update(icon_condition)
end

function UpdateConditionProgress(item, icon)
	if not read_if_exists(sys_ini, "r_bool", "features", "show_inv_item_condition", false) then
	return end
	if not read_if_exists(sys_ini, "r_bool", item:section(), "use_condition", false) and not is_power_device(item) then
	return end
	local pos = (is_power_device(item) and not read_if_exists(sys_ini, "r_bool", item:section(), "condition_as_power", false)) and item:binded_object():get_power_level() or item:condition()

	local function update(progress_bar)
		-- progress_bar:Show(actor:is_in_slot(item))
		-- if not actor:is_in_slot(item) then
		-- return end
		local offset = GetOffset("left_down", progress_bar, icon)
		offset.y = offset.y - 1
		progress_bar:SetWndPos(offset.x, offset.y)
		progress_bar:SetWidth(icon:GetWidth() - 1)
		icon:BringToTop(progress_bar)
		progress_bar:SetProgressPos(pos)
	end

	local condition_progess_bar = icon:FindChild("condition_progess_bar")
	if condition_progess_bar then
		condition_progess_bar = condition_progess_bar:GetProgressBar()
		update(condition_progess_bar)
	return end
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	condition_progess_bar = xml:InitProgressBar("condition_progess_bar", icon)
	condition_progess_bar:SetWindowName("condition_progess_bar")
	update(condition_progess_bar)
end

function UpdateAmmoInBoxIcon(item, icon)
	local ammo = item:get_weapon_ammo()
	if not ammo or not ammo:is_magazine() then
	return end
	local sect = item:section()
	local ammo_in_box = icon:FindChild("ammo_in_box")
	if ammo_in_box then
		ammo_in_box:Show(ammo.box_curr > 0)
		return
	end
	
	if ammo.box_curr == 0 then
	return end
	
	local params = CIconParams(ammo:ammo_sect())
	local icon_params = CIconParams(sect)
	
	local cell_w = icon:GetWidth() / icon_params.grid_width
	local cell_h = icon:GetHeight() / icon_params.grid_height
	local scale = read_if_exists(sys_ini, "r_float", sect, "ammo_icon_scale", 1)
	local width = params.grid_width * cell_w * scale
	local height = params.grid_height * cell_h * scale
	
	ammo_in_box = CUIStatic()
	params:set_shader(ammo_in_box)
	
	ammo_in_box:SetWidth(width)
	ammo_in_box:SetHeight(height)
	
	local offset = GetOffset(read_if_exists(sys_ini, "r_string", sect, "ammo_icon_offset", "center"), ammo_in_box, icon)

	ammo_in_box:SetWndPos(offset.x, offset.y)
	ammo_in_box:SetWindowName("ammo_in_box")
	icon:AttachChild(ammo_in_box)
end

function UpdateMarkedIcon(item, icon)
	local sect = item:section()
	local marked_icon = icon:FindChild("marked_icon")
	if marked_icon then
		marked_icon:Show(item.marked)
		return
	end
	if not item.marked then
	return end
	
	local marked_icon_sect = read_if_exists(sys_ini, "r_string", sect, "marked_icon_sect", nil)
	if not marked_icon_sect then
	return end
	
	local params = CIconParams(marked_icon_sect)
	local icon_params = CIconParams(sect)

	local cell_w = icon:GetWidth() / icon_params.grid_width
	local cell_h = icon:GetHeight() / icon_params.grid_height
	local width = params.grid_width * cell_w
	local height = params.grid_height * cell_h
	
	marked_icon = CUIStatic()
	params:set_shader(marked_icon)
	
	marked_icon:SetWidth(width)
	marked_icon:SetHeight(height)
	
	local offset = GetOffset(read_if_exists(sys_ini, "r_string", sect, "marked_icon_offset", "right_top"), marked_icon, icon)
	
	marked_icon:SetWndPos(offset.x, offset.y)
	marked_icon:SetWindowName("marked_icon")
	icon:AttachChild(marked_icon)	
end

function UpdateUpgrageIcon(item, icon)
	local sect = item:section()
	
	local upgrade_icon_sect = read_if_exists(sys_ini, "r_string", sect, "upgrade_icon_sect", nil)
	if not upgrade_icon_sect then
	return end
	
	local params = CIconParams(upgrade_icon_sect)
	local icon_params = CIconParams(sect)
	
	local heading = icon:GetCUIStatic():GetHeading()
	
	local offset_type = read_if_exists(sys_ini, "r_string", sect, "upgrade_icon_offset", "left_down")
	local function update(static)
		local cell_w = icon:GetWidth() / icon_params.grid_width
		local cell_h = icon:GetHeight() / icon_params.grid_height
		if heading > 0 then
			cell_h = icon:GetWidth() / icon_params.grid_height * get_current_kx()
			cell_w = icon:GetHeight() / icon_params.grid_width
		end		
		local width = params.grid_width * cell_w
		local height = params.grid_height * cell_h
		
		static:SetWidth(width)
		static:SetHeight(height)
		local offset = GetOffset(offset_type, static, icon)
		static:SetWndPos(offset.x, offset.y)
	end
	
	local upgrade_icon = icon:FindChild("upgrade_icon")
	if upgrade_icon then
		update(upgrade_icon)
		return
	end
		
	upgrade_icon = CUIStatic()
	params:set_shader(upgrade_icon)
	
	update(upgrade_icon)
	
	upgrade_icon:SetWindowName("upgrade_icon")
	icon:AttachChild(upgrade_icon)
end

function UpdateQuestIcon(item, icon)
	local sect = item:section()
	
	if not read_if_exists(sys_ini, "r_bool", sect, "quest_item", false) then
	return end
	
	local quest_icon_sect = read_if_exists(sys_ini, "r_string", sect, "quest_icon_sect", "quest_icon")
	if not quest_icon_sect then
	return end
	
	local params = CIconParams(quest_icon_sect)
	local icon_params = CIconParams(sect)
	
	local heading = icon:GetCUIStatic():GetHeading()
	
	local offset_type = read_if_exists(sys_ini, "r_string", sect, "quest_icon_sect", "right_top")
	local function update(static)
		local cell_w = icon:GetWidth() / icon_params.grid_width
		local cell_h = icon:GetHeight() / icon_params.grid_height
		if heading > 0 then
			cell_h = icon:GetWidth() / icon_params.grid_height * get_current_kx()
			cell_w = icon:GetHeight() / icon_params.grid_width
		end		
		local width = params.grid_width * cell_w
		local height = params.grid_height * cell_h
		
		static:SetWidth(width)
		static:SetHeight(height)
		local offset = GetOffset(offset_type, static, icon)
		static:SetWndPos(offset.x, offset.y)
	end
	
	local quest_icon = icon:FindChild("quest_icon")
	if quest_icon then
		update(quest_icon)
		return
	end
		
	quest_icon = CUIStatic()
	params:set_shader(quest_icon)
	
	update(quest_icon)
	
	quest_icon:SetWindowName("upgrade_icon")
	icon:AttachChild(quest_icon)
end

function UpdateInSlotIcon(item, icon)
	local sect = item:section()
	local in_slot_icon = icon:FindChild("in_slot_icon")
	if in_slot_icon then
		in_slot_icon:Show(actor:is_in_slot(item))
		return
	end
	if not actor:is_in_slot(item) then
	return end
	
	local params = CIconParams("icon_in_slot")
	local icon_params = CIconParams(sect)

	local cell_w = icon:GetWidth() / icon_params.grid_width
	local cell_h = icon:GetHeight() / icon_params.grid_height
	local width = params.grid_width * cell_w
	local height = params.grid_height * cell_h
	
	in_slot_icon = CUIStatic()
	params:set_shader(in_slot_icon)
	
	in_slot_icon:SetWidth(width)
	in_slot_icon:SetHeight(height)
	
	local offset = GetOffset("left_top", in_slot_icon, icon)
	
	in_slot_icon:SetWndPos(offset.x, offset.y)
	in_slot_icon:SetWindowName("in_slot_icon")
	icon:AttachChild(in_slot_icon)	
end

function AttachRepairMenuIcons(item, icon)
	icon:DetachAll()
	UpdateWpnIcons(item, icon)
	UpdateAmmoInBoxIcon(item, icon)
	UpdateMarkedIcon(item, icon)
	UpdateUpgrageIcon(item, icon)
	UpdateQuestIcon(item, icon)
	UpdateInSlotIcon(item, icon)
	UpdateConditionProgress(item, icon)
	UpdateConditionStatic(item, icon)
end

function AttachPanelIcons(item, icon)
	icon:DetachAll()
	UpdateWpnIcons(item, icon)
	UpdateAmmoInBoxIcon(item, icon)
	--UpdateMarkedIcon(item, icon)
	UpdateUpgrageIcon(item, icon)
	UpdateQuestIcon(item, icon)
	--UpdateInSlotIcon(item, icon)
	--UpdateConditionProgress(item, icon)
	--UpdateConditionStatic(item, icon)
end

function sort_ui_panel_item(a, b)
	--log3("~a.item:section() %s", a.item:section())
	--log3("~b.item:section() %s", b.item:section())
	local params1, params2 = CIconParams(a.item:section()), CIconParams(b.item:section())
	local size1, size2 = vector2():set(params1.grid_width, params1.grid_height), vector2():set(params2.grid_width, params2.grid_height)
	
	if size1.x > size2.x then
		return true 
	end
	
	if size1.x == size2.x then
		if size1.y > size2.y then
			return true 
		end
		
		if size1.y == size2.y then
			local ammo1, ammo2 = a.item:get_weapon_ammo(), b.item:get_weapon_ammo()
			
			if ammo1 and ammo2 then						
				return ammo1.box_size > ammo2.box_size 
			end
		end
	end
	
	return false
end

function sort_by_size(a, b)
	if type(a) == "table" then
		a = a.item
	end
	if type(b) == "table" then
		b = b.item
	end	
	local params1, params2 = CIconParams(a:section()), CIconParams(b:section())
	local size1, size2 = vector2():set(params1.grid_width, params1.grid_height), vector2():set(params2.grid_width, params2.grid_height)
	
	if size1.x > size2.x then
		return true 
	end
	
	if size1.x == size2.x then
		if size1.y > size2.y then
			return true 
		end
		
		if size1.y == size2.y then
			local ammo1, ammo2 = a:get_weapon_ammo(), b:get_weapon_ammo()
			
			if ammo1 and ammo2 then						
				return ammo1.box_size > ammo2.box_size 
			end
		end
	end
	
	return false
end

function get_type(item)
	if item.marked then
		return 0
	end
	if item:is_weapon() or string.find(item:section(), "wp_") or string.find(item:section(), "wpn_") then
		return 1
	end
	if item:is_ammo() or item:is_grenade() then
		return 2
	end
	if item:is_outfit() or item:is_helmet() or loadout.is_module(item) or item:get_container() then
		return 3
	end
	if item:is_eatable_item() and not string.find(item:section(), "pda") then
		return 4
	end
	if item:is_artefact() then
		return 5
	end
	if item:is_torch() or item:get_pda() or item:get_detector() or is_power_device(item) or string.find(item:section(), "pda") then
		return 6
	end
	return 7
end

function sort_by_type(a, b)
	return get_type(a) > get_type(b)
end

function sort_by_size_type(a, b)
	if get_type(a) == get_type(b) then
		return sort_by_size(a, b)
	end
	return not sort_by_type(a, b)
end