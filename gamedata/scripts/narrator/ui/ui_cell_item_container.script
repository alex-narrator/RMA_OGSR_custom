-- -*- mode: lua; coding: windows-1251-dos -*-
local color_highlight 	= GetARGB(100, 200, 200, 200)

local back_texture 		= "square_light_grey"
local grid_texture 		= "ui\\ui_grid_array"
local TEXTURE_CELL_SIZE = 64

class "UICellItemContainer" (CUIScriptWnd)

function UICellItemContainer:__init(xml, path, owner) super()
	self.owner = owner
	self.path = path
	self.xml = xml
	self.grid = {}
	self.cell_items = {}
	self.last_type_row = 0
	self.end_row = 0
	self.last_type = -1
	self.curr_type = -1
	self.saved_scroll_pos = nil
	self:InitControls()
	self.sm = ogse_signals.get_mgr()
	self:Subscribe()
end

function UICellItemContainer:DetachWnd()
	self:ClearCallbacks()
	self.owner:DetachChild(self)
	self:Unsubscribe()
end

function UICellItemContainer:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_cell_item_select", self = self, fun = self.OnCellItemSelect},
			{signal = "on_cell_item_start_drag", self = self, fun = self.HoldScroll},
			{signal = "on_drag_item_drop", self = self, fun = self.ReleaseScroll},
			-- {signal = "on_cell_item_focus", self = self, fun = self.OnCellItemFocus},
			-- {signal = "on_cell_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
		}
		for _, s in ipairs( self.subscribed ) do
			self.sm:subscribe( s )
		end
	end
end

function UICellItemContainer:Unsubscribe()
	if self.subscribed then
		for _, s in ipairs( self.subscribed ) do
			self.sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function UICellItemContainer:InitControls()
	self.owner:AttachChild(self)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	self:Show(true)

	self.back = CUIStatic()
	self.back:Init(0, 0, 0, 0)
	self.back:SetStretchTexture(true)
	self.back:InitTexture(back_texture)
	self.back:Show(false)
	self.back:SetColor(color_highlight)
	self:AttachChild(self.back)
	
	self.grid_back = CUIStatic()
	self.grid_back:Init(0, 0, 0, 0)
	self.grid_back:SetStretchTexture(true)
	self.grid_back:InitTexture(grid_texture)
	self:AttachChild(self.grid_back)
	
	self.scroll = self.xml:InitScrollView(self.path, self)
	--//спеціальний статик для ловлі подій focus received/lost, бо сам скроллв'ю їх не обробляє	
	self.service_back = CUIStatic()
	local pos = self.scroll:GetWndPos()
	local size = {
		w = self.scroll:GetWidth(),
		h = self.scroll:GetHeight(),
	}
	self.service_back:Init(pos.x, pos.y, size.w, size.h)
	self:AttachChild(self.service_back)
	--self:BringToBottom(self.service_back)
	
	self.cell_container = CUIStatic()
	self.scroll:AddWindow(self.cell_container)
	
	self.group_by_type = self.xml:ReadAttribInt(self.path, "group_by_type", 0) > 0 and true or false
	self.group_similar = self.xml:ReadAttribInt(self.path, "group_similar", 0) > 0 and true or false
	self.ID = self.xml:ReadAttribInt(self.path, "ID", "")
	
	self.cell_size = {}
	self.cell_size.w = self.xml:ReadAttribInt(self.path, "cell_width", 30)
	self.cell_size.h = self.xml:ReadAttribInt(self.path, "cell_height", 40)
	
	self.rows = self.xml:ReadAttribInt(self.path, "rows_num", 1)
	self.cols = self.xml:ReadAttribInt(self.path, "cols_num", 1)
	
	self.cell_container:SetWidth(self.cols * self.cell_size.w)
	
	self:AdjustContainerHeight()
	
	local grid_size = vector2():set(self.cell_size.w * self.cols, self.cell_size.h * self.rows)
	local pos = self.scroll:GetWndPos()
	
	self.back:SetWidth(grid_size.x)
	self.back:SetHeight(grid_size.y)
	self.back:SetWndPos(pos.x, pos.y)
	
	self.grid_back:SetWidth(grid_size.x)
	self.grid_back:SetHeight(grid_size.y)
	self.grid_back:SetWndPos(pos.x, pos.y)
	self.grid_back:SetOriginalRect(0, 0, self.cols * TEXTURE_CELL_SIZE, self.rows * TEXTURE_CELL_SIZE)
	
	local name = self.ID.."service_back"
	self:Register(self.service_back, name)
	self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnFocusReceived() end, self)
	self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnFocusLost() end, self)
end

function UICellItemContainer:AdjustContainerHeight()
	self.scroll:Clear()
	self.cell_container:SetHeight(table.size(self.grid) * self.cell_size.h)
	self.scroll:AddWindow(self.cell_container)
end

function UICellItemContainer:Reinit()
	self.grid = {}
	self.cell_items = {}
	self.last_type_row = 0
	self.end_row = 0
	self.last_type = -1
	self.curr_type = -1
	
	self.cell_container:DetachAll()
	self:AdjustContainerHeight()	
end

function UICellItemContainer:Update()
	CUIScriptWnd.Update(self)
	if self.saved_scroll_pos then
		self.scroll:SetScrollPos(self.saved_scroll_pos)
	end
end

function UICellItemContainer:OnFocusReceived()
	self.sm:call("on_cell_item_container_focus", self)
	--log3("~%s is focused", self.ID)
end

function UICellItemContainer:OnFocusLost()
	self.sm:call("on_cell_item_container_focus_lost", self)
	--log3("~%s is non focused", self.ID)
end

function UICellItemContainer:OnCellItemSelect(item)
	if ui_actor_menu.get_prop_box():IsShown() then
	return end
	for cell_item,v in pairs(self.cell_items) do
		cell_item:SetSelected(cell_item:GetItem():id() == item:id())
	end
end

function UICellItemContainer:GetSelected()
	for cell_item,v in pairs(self.cell_items) do
		if cell_item:GetSelected() then
			return cell_item
		end
	end
	return nil
end

function UICellItemContainer:Highlight(enable)
	--log3("~highlight %s for list %s", enable, self.ID)
	self.back:Show(enable)
end

function UICellItemContainer:GetID()
	return self.ID
end

function UICellItemContainer:SetID(id)
	self.ID = id
end

function UICellItemContainer:Grow()
	local rows = table.size(self.grid)
	rows = rows + 1
	self.grid[rows] = {}
	
	for i=1,self.cols do
		self.grid[rows][i] = true
	end
	
	self:AdjustContainerHeight()
end

function UICellItemContainer:AddItem(item)
	if self.group_similar then
		local ci = self:FindSimilar(item)
		if ci then
			if ci:AddChild(item) then
				return
			end
		end
	end
	
	local cell_pos = self:FindFreeCell(item)
	if cell_pos then
		local ci = ui_cell_item.UICellItem(self.cell_container, item, cell_pos, self.cell_size, self)
		local params = CIconParams(item:section())
		self.cell_items[ci] = {x=cell_pos.x, y=cell_pos.y, w=params.grid_width, h=params.grid_height}
		self:ColorizeRestricted(item)
	end
end

function UICellItemContainer:RemoveItem(item)
	if level.is_removing_objects() then
	return end
	local ci = self:FindItem(item)
	if ci then
		if ci:RemoveChild(item) then
			return
		end
		local cell_data = self.cell_items[ci]
		self:FreeRoom(cell_data.y, cell_data.x, cell_data.w, cell_data.h)
		ci:DetachWnd()
		self.cell_items[ci] = nil
	end
	if table.size(self.cell_items) == 0 then
		self:ResetTypeRow()
	end
end

function UICellItemContainer:FindSimilar(item)
	for cell_item,v in pairs(self.cell_items) do
		if ui_inv_utils.similar_item(cell_item:GetItem(), item) then
			return cell_item
		end
	end
	return nil
end

function UICellItemContainer:FindItem(item)
	for cell_item,v in pairs(self.cell_items) do
		if cell_item:IsChild(item) then
			return cell_item
		end
		if cell_item:GetItem():id() == item:id() then
			return cell_item
		end
	end
	return nil
end

function UICellItemContainer:FindFreeCell(item)
	local params = CIconParams(item:section())
	
	local w = params.grid_width
	local h = params.grid_height
	
	if w > self.cols then
	return false end

	self.curr_type = ui_inv_utils.get_type(item)
	if self.curr_type ~= self.last_type then
		self.last_type = self.curr_type
		self.last_type_row = self.end_row + 1
	end
	
	local row_s = self.group_by_type and self.last_type_row or 1
	local rows = table.size(self.grid)
	local cols = self.cols + 1 - params.grid_width
	for r=row_s, rows do
		for c=1,cols do
			if self:IsFreeRoom(r, c, w, h) then
				return self:TakeRoom(r, c , w, h)
			end
		end
	end
	
	self:Grow()
	
	return self:FindFreeCell(item)	
end

function UICellItemContainer:IsFreeRoom(r,c,w,h)
	for row = r, r+(h-1) do
		for col = c, c+(w-1) do
			if not self.grid[row] then
				return false
			end
			if not self.grid[row][col] then
				return false
			end
		end
	end
	return true
end

function UICellItemContainer:TakeRoom(r,c,w,h)
	local r_end = r+(h-1)
	local c_end = c+(w-1)
	for row = r, r_end do -- -1 because starting row/coloumn cell should be counted
		for col = c, c_end do
			self.grid[row][col] = false
		end
	end
	
	if (r_end > self.end_row) then
		self.end_row = r_end
	end
	-- if (c_end > self.col_end) then
		-- self.col_end = c_end
	-- end
	
	return {x=c,y=r}
end

function UICellItemContainer:FreeRoom(r,c,w,h)
	for row = r, r+(h-1) do
		for col = c, c+(w-1) do
			self.grid[row][col] = true
		end
	end
end

function UICellItemContainer:ColorizeCompatible(item)
	for cell_item,v in pairs(self.cell_items) do
		cell_item:ClearColorize()
		self:ColorizeCellRestricted(cell_item)
		if ui_inv_utils.need_highlight(item, cell_item:GetItem()) then
			cell_item:ColorizeCompatible()
		end
	end
end

function UICellItemContainer:ColorizeRestricted(item)
	local ci = self:FindItem(item)
	if not ci then
	return end
	local menu = ui_actor_menu.get_menu()
	if not menu:IsShown() or menu:GetMode() ~= "trade" then
	return end
	if trade_manager.tradable(item) then
	return end
	ci:ColorizeRestricted()
end

function UICellItemContainer:ColorizeCellRestricted(cell_item)
	local menu = ui_actor_menu.get_menu()
	if not menu:IsShown() or menu:GetMode() ~= "trade" then
	return end
	if trade_manager.tradable(cell_item:GetItem()) then
	return end
	cell_item:ColorizeRestricted()
end

function UICellItemContainer:GetCellItems()
	return self.cell_items
end

function UICellItemContainer:HoldScroll()
	self.saved_scroll_pos = self.scroll:GetCurrentScrollPos()
end

function UICellItemContainer:ReleaseScroll()
	self.saved_scroll_pos = nil
end

function UICellItemContainer:ResetTypeRow()
	self.last_type_row = 0
	self.end_row = 0
	self.last_type = -1
	self.curr_type = -1
	--log3("~ResetTypeRow for cell container %s", self.ID)
end