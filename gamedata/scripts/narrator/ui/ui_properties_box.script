-- -*- mode: lua; coding: windows-1251-dos -*-
local OVERLAY_XML = "script_overlays\\properties_box.xml"

local CUSTOM_ACTION_SECT = "custom_properties_box_action_item"

local color_default 	= GetARGB(0, 255, 255, 255)
local color_focused 	= GetARGB(70, 255, 255, 255)
local text_color_default 	= GetARGB(255, 131, 131, 131)
local text_color_focused 	= GetARGB(255, 255, 255, 255)

local back_colors = {
	["red"] = GetARGB(175, 255, 0, 0),
	["green"] = GetARGB(255, 0, 255, 0),
	["blue"] = GetARGB(255, 0, 0, 255),
	["UI_orange"] = GetARGB(255, 238, 153, 26),
	["white"] = GetARGB(255, 255, 255, 255),
	["gray"] = GetARGB(255, 128, 128, 128),
	["ui_clr_1"] = GetARGB(255, 240, 217, 182),
	["ui_clr_2"] = GetARGB(255, 216, 186, 140),
	["ui_clr_3"] = GetARGB(255, 135, 123, 116),
}

class "UIPropertiesBox" (CUIScriptWnd)

function UIPropertiesBox:__init(owner) super()
	self.owner = owner
	self:InitControls()
end

function UIPropertiesBox:DetachWnd()
	self:ClearCallbacks()
	self.owner:DetachChild(self)
end

function UIPropertiesBox:InitControls()
	self.owner:AttachChild(self)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	
	self.xml = CScriptXmlInit()
	self.xml:ParseFile(OVERLAY_XML)

	self.back = self.xml:InitFrame("properties_box", self)
	local root = "properties_box"
	self.scroll_view = self.xml:InitScrollView(root..":list", self.back)
	local root = "properties_box:list"
	self.scroll_view.indent = {
		l = self.xml:ReadAttribInt(root, "left_ident", 0),	
		r = self.xml:ReadAttribInt(root, "right_ident", 0),
		t = self.xml:ReadAttribInt(root, "top_indent", 0),
		b = self.xml:ReadAttribInt(root, "bottom_indent", 0),
	}
	
	local pos = self.scroll_view:GetWndPos()
	self.scroll_view:SetWndPos(pos.x, pos.y + self.scroll_view.indent.t)
	
	self.actions = {}
	
	self:SetWindowName("properties_box")
end

function UIPropertiesBox:Update()
	CUIScriptWnd.Update(self)
	self.scroll_view:SetScrollPos(0)
end

function UIPropertiesBox:Activate()
	local name
	local max_w = 0
	for k, v in ipairs(self.actions) do
		v.list_item = self.xml:InitStatic("properties_box:list:list_item", self.scroll_view)
		v.list_item:SetText(v.name)
		--v.list_item:AdjustHeightToText()
		v.list_item:AdjustWidthToText()
		v.list_item:SetWidth(v.list_item:GetWidth() + v.list_item:GetTextX() * 2)
		
		v.list_item:SetColor(color_default)
		v.list_item:SetTextColor(text_color_default)
		
		name = "list_item_"..k
		self:Register(v.list_item, name)
		self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnLButtonDown( k ) end, self)
		self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnFocusReceived( k ) end, self)
		self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnFocusLost( k ) end, self)
		
		--self.scroll_view:AddWindow(v.list_item)
		--log3("~list item w %s | h %s", v.list_item:GetWidth(), v.list_item:GetHeight())
		local indent = self.scroll_view.indent
		if v.list_item:GetWidth() > self.scroll_view:GetPadSize().x then
			self.scroll_view:SetWidth(v.list_item:GetWidth() + indent.r + indent.l)
		end
		self.scroll_view:SetWidth(self.scroll_view:GetPadSize().x + indent.r + indent.l)
		self.scroll_view:SetHeight(self.scroll_view:GetPadSize().y + indent.b)
		self.back:SetWidth(self.scroll_view:GetWidth())
		self.back:SetHeight(self.scroll_view:GetHeight())
		
		if v.list_item:GetWidth() > max_w then
			max_w = v.list_item:GetWidth()
		end
	end
	
	for k, v in ipairs(self.actions) do
		v.list_item:SetWidth(max_w)
	end
	--log3("self.actions: %s", self.actions)
	
	local show = table.size(self.actions) > 0
	--self:Show(show)
	if show then
		local pos = vector2():set(self.owner:GetMousePosX(), self.owner:GetMousePosY())
		local wnd_size = {x = self.scroll_view:GetWidth(), y = self.scroll_view:GetHeight()}
		local delta = {x = pos.x + wnd_size.x - UI_BASE_WIDTH, y = pos.y + wnd_size.y - UI_BASE_HEIGHT}
		if delta.x > 0 then
			pos.x = pos.x - delta.x
		end		
		if delta.y > 0 then
			pos.y = pos.y - delta.y
		end	
		self.back:SetWndPos(pos.x, pos.y)
		level.start_stop_menu(self, true)
	end
	return show
end

function UIPropertiesBox:OnFocusReceived(i)
	self.actions[i].list_item:SetColor(self.actions[i].color_focused or color_focused)
	self.actions[i].list_item:SetTextColor(text_color_focused)
	--log3("~UIPropertiesBox:OnFocusReceived(%s)", i)
end

function UIPropertiesBox:OnFocusLost(i)
	self.actions[i].list_item:SetColor(color_default)
	self.actions[i].list_item:SetTextColor(text_color_default)
	--log3("~UIPropertiesBox:OnFocusLost(%s)", i)
end

function UIPropertiesBox:Clear()
	self.scroll_view:Clear()
	self.actions = {}
end

function UIPropertiesBox:OnLButtonDown(i)
	local v = self.actions[i]
	v.action(unpack(v.args))
	--self:Show(false)
	--log3("~UIPropertiesBox:OnLButtonDown(%s)", i)
end

function UIPropertiesBox:AddItem(name, precondition, action, ...)
	local args = {...}
	if not precondition(unpack(args)) then
	return end
	
	local name = type(name) == "string" and name or name(unpack(args))
	name = game.translate_string(name)
	local action_data = {
		name = name,
		action = action,
		args = args,
	}
	table.insert(self.actions, action_data)
	return table.size(self.actions)
end

function UIPropertiesBox:SetItemColorFocused(i, color_def)
	local v = self.actions[i]
	if not v then
	return end
	if not back_colors[color_def] then
	return end
	v.color_focused = back_colors[color_def]
end

function UIPropertiesBox:AddCustomAction(item)
	local name, value = "", ""
	local n = sys_ini:line_count(CUSTOM_ACTION_SECT)	
	for i=0,n-1 do
		result, name, value = sys_ini:r_line(CUSTOM_ACTION_SECT,i,"","")
		local val_tbl = split_string(value, ",")
		local _name = not not string.find(val_tbl[1], "%.") and loadstring( "return " .. val_tbl[1] .. "( ... )" ) or val_tbl[1]
		local _precondition = loadstring("return " .. val_tbl[2] .. "( ... )")
		local _action = loadstring( val_tbl[3] .. "( ... )" )
		self:AddItem(_name, _precondition, _action, item)
	end
end

function UIPropertiesBox:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED and dik ~= DIK_keys.MOUSE_2 then
		level.start_stop_menu(self, true)
		return true
	end
	return false
end