function attach(sm)
	sm:subscribe({signal = "ui_item_info_callback",   fun = this.add_custom_info})
end

function add_custom_info(UIDesc, obj)
	if is_power_device(obj) then
		attach_power_params(UIDesc, obj:binded_object())
	end
	if actor_get_pda() and actor_get_pda():id() == obj:id() then
		attach_pda_time_money(UIDesc, obj)
	end
	if obj:is_weapon() then
		atach_wpn_params(UIDesc, obj)
	end
	if obj:is_weapon_magazined() then
		attach_loaded_ammo(UIDesc, obj)
	end
end

function attach_power_params(UIDesc, bind_obj)
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\power_params.xml")
	local power_params = xml:InitStatic("power_params", UIDesc)
	
	local cap_power = xml:InitStatic("power_params:cap_power", power_params)
	cap_power:SetText(game.translate_string("st_power_level"))
	
	local cap_work_time = xml:InitStatic("power_params:cap_work_time", power_params)
	local worktime_text = string.format("%s %s %s", game.translate_string("st_work_time"), bind_obj:get_work_time(), game.translate_string("st_time_hour"))
	if bind_obj:power_source_detachable() then
		worktime_text = worktime_text..string.format(" [%s]", game.translate_string(get_inv_name(bind_obj:get_power_sect())))
	end
	cap_work_time:SetText(worktime_text)
	
	local power_progress = xml:InitProgressBar("power_params:progress_power", power_params)
	local power_level = bind_obj:get_power_level()
	power_progress:SetProgressPos(power_level)
end

function attach_pda_time_money(UIDesc, obj)
	if not obj:is_power_on() then
	return end
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\pda_time_money.xml")
	local main = xml:InitStatic("time_money", UIDesc)
	
	local time_st = xml:InitStatic("time_money:time", main)
	local money_st = xml:InitStatic("time_money:money", main)
	
	local str = string.format("%s: %s:%s", game.translate_string("ui_inv_time"), level.get_time_hours(), level.get_time_minutes())
	time_st:SetText(str)
	str = string.format("%s: %.0f %s", game.translate_string("ui_inv_money"), actor:money(), game.translate_string("ui_st_money_regional"))
	money_st:SetText(str)
end

function atach_wpn_params(UIDesc, obj)
	if not read_if_exists(sys_ini, "r_bool", obj:section(), "show_wpn_properties", true) then
	return end
	
	local xml = CScriptXmlInit()
	xml:ParseFile("wpn_params.xml")
	local main = xml:InitStatic("wpn_params", UIDesc)
	
	local cap_accuracy 		= xml:InitStatic("wpn_params:cap_accuracy", main)
	local cap_damage 		= xml:InitStatic("wpn_params:cap_damage", main)
	local cap_handling 		= xml:InitStatic("wpn_params:cap_handling", main)
	local cap_rpm 			= xml:InitStatic("wpn_params:cap_rpm", main)
	local cap_range 		= xml:InitStatic("wpn_params:cap_range", main)
	local cap_reliability 	= xml:InitStatic("wpn_params:cap_reliability", main)
	
	local progress_accuracy 	= xml:InitProgressBar("wpn_params:progress_accuracy", main)
	local progress_damage 		= xml:InitProgressBar("wpn_params:progress_damage", main)
	local progress_handling 	= xml:InitProgressBar("wpn_params:progress_handling", main)
	local progress_rpm 			= xml:InitProgressBar("wpn_params:progress_rpm", main)
	local progress_range 		= xml:InitProgressBar("wpn_params:progress_range", main)
	local progress_reliability 	= xml:InitProgressBar("wpn_params:progress_reliability", main)
	
	progress_accuracy:SetProgressPos(ui_wpn_params.GetAccuracy(obj))
	progress_damage:SetProgressPos(ui_wpn_params.GetDamage(obj))
	progress_handling:SetProgressPos(ui_wpn_params.GetHandling(obj))
	progress_rpm:SetProgressPos(ui_wpn_params.GetRPM(obj))
	progress_range:SetProgressPos(ui_wpn_params.GetRange(obj))
	progress_reliability:SetProgressPos(ui_wpn_params.GetReliability(obj))
end

local pos_x
function attach_loaded_ammo(UIDesc, obj)
	local wpn = obj:get_weapon_m()
	local show_ammo = obj:get_ammo_in_magazine() > 0
	local show_mag = wpn:is_addon_attached(addon.magazine)
	local show_ammo2 = obj:get_ammo_in_magazine2() > 0
	
	if 
		not show_ammo and
		not show_mag and
		not show_ammo2 then
	return end

	pos_x = 0
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\loaded_ammo.xml")
	local main = xml:InitStatic("loaded_ammo", UIDesc)
	
	local ammo_s = {}
	for i=1,3 do
		ammo_s[i] = xml:InitStatic("loaded_ammo:ammo_icon", main)
		ammo_s[i]:InitTexture("ui\\ui_icon_equipment")
		ammo_s[i]:Show(false)
	end

	if show_ammo then
		set_ammo_icon(ammo_s[1], get_cur_ammo_sect(obj))
	end
	if show_mag then
		set_ammo_icon(ammo_s[2], wpn:get_addon_name(addon.magazine))
	end
	if show_ammo2 then
		set_ammo_icon(ammo_s[3], get_cur_ammo2_sect(obj))
	end	
end

local cell_w = 50
local cell_h = 50
function set_ammo_icon(icon, sect)
	local params = GetIconParams(sect)
	icon:SetOriginalRect(params.x, params.y, params.w, params.h)
		
	local width_k = params.w/cell_w
	local height_k = params.h/cell_h
	local width = icon:GetWidth() * width_k
	local height = icon:GetHeight() * height_k
		
	if height_k > 1 then --//пропорційно зменшимо іконку з висотою > 1 клітинки
		width = width / height_k
		height = height / height_k
	end
		
	icon:SetWidth(width)
	icon:SetHeight(height)

	icon:Show(true)
	icon:SetWndPos(pos_x, icon:GetWndPos().y)
	pos_x = pos_x + icon:GetWidth()
end