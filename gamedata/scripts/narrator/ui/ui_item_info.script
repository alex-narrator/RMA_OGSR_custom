-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_item_info_init",   	fun = this.add_custom_info})
	sm:subscribe({signal = "on_inventory_show",   	fun = this.create_window})
	sm:subscribe({signal = "on_inventory_hide",   	fun = this.destroy_window})
	sm:subscribe({signal = "on_carbody_show",   	fun = this.create_window})
	sm:subscribe({signal = "on_carbody_hide",   	fun = this.destroy_window})
	sm:subscribe({signal = "on_trade_show",   		fun = this.create_window})
	sm:subscribe({signal = "on_trade_hide",   		fun = this.destroy_window})
	sm:subscribe({signal = "on_talk_show",   		fun = this.destroy_window})
	sm:subscribe({signal = "on_talk_hide",   		fun = this.destroy_window})
	sm:subscribe({signal = "on_repair_show",   		fun = this.create_window})
	sm:subscribe({signal = "on_repair_hide",   		fun = this.destroy_window})
end

local overlay = nil
local OVERLAY_XML = "script_overlays\\ui_item_info.xml"


function create_window()
	if not overlay then
		overlay = UIItemInfo(level.main_input_receiver())
	end
end

function destroy_window()
	if overlay then
		overlay:DetachWnd()
		overlay = nil
	end
end

------------------------------------------MAIN ITEM INFO WINDOW-----------------------------------------------------------------------------------------------------------------

class "UIItemInfo" (CUIScriptWnd)
function UIItemInfo:__init(owner) super()
	self.owner = owner
	self:InitControls()
	self:Subscribe()
	self.delay = false
	self.item = false
end

function UIItemInfo:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_cell_item_focus", self = self, fun = self.OnCellItemFocus},
			{signal = "on_cell_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
			{signal = "on_quick_item_focus", self = self, fun = self.OnCellItemFocus},
			{signal = "on_quick_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
			{signal = "on_repair_list_item_focus", self = self, fun = self.OnCellItemFocus},
			{signal = "on_repair_list_item_focus_lost", self = self, fun = self.OnCellItemFocusLost},
			{signal = "on_key_press", self = self, fun = self.OnCellItemFocusLost},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function UIItemInfo:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function UIItemInfo:DetachWnd()
	self:Unsubscribe()
	self:ClearCallbacks()
	self.owner:DetachChild(self)
end

function UIItemInfo:InitControls()
	self.owner:AttachChild(self)
	--self:Enable(true)
	self:Show(true)

	self.xml = CScriptXmlInit()
	self.xml:ParseFile(OVERLAY_XML)

	self.background_frame = self.xml:InitFrame("background_frame", self)
	self.background_frame:Show(false)
	
	local tmp_tbl, def_font, def_color = nil, "letterica16", "255, 255, 255, 255"
	
	tmp_tbl = split_string(self.xml:ReadAttrib("background_frame", "offset", "0,0"), ",")
	self.background_frame.offset = {x = tmp_tbl[1], y = tmp_tbl[2]}
	
	self.base_height = self.xml:ReadAttribFlt("background_frame", "base_height", 0)
	if self.base_height > 0 then
		self.background_frame:SetHeight(self.base_height)
	end
	
	self.name_st = self.xml:InitStatic("background_frame:static_name", self.background_frame)
	self.weight_st = self.xml:InitStatic("background_frame:static_weight", self.background_frame)
	self.condition_pb = self.xml:InitProgressBar("background_frame:condition_progress", self.background_frame)
	
	self.descr_list = self.xml:InitScrollView("background_frame:descr_list", self.background_frame)
	self.descr_list.font = self.xml:ReadAttrib("background_frame:descr_list:descr_text", "font", def_font)
	tmp_tbl = split_string(self.xml:ReadAttrib("background_frame:descr_list:descr_text", "text_color", def_color), ",")
	self.descr_list.text_color = GetARGB(tmp_tbl[1], tmp_tbl[2], tmp_tbl[3], tmp_tbl[4])
	
	self.show_delay_time = self.xml:ReadAttribFlt("background_frame", "show_delay", 1)
end

function UIItemInfo:OnCellItemFocus(item)
	add_update_delayed_action(1, function() self:InitItemInfo(item) end)
	--self:InitItemInfo(item)
	self.delay = time_global() + self.show_delay_time * 1000
	self.item = item
end

function UIItemInfo:OnCellItemFocusLost(item)
	self.background_frame:Show(false)
	self.delay = false
	self.item = false
end

function UIItemInfo:InitItemInfo(item)
	if not item then
		self:OnCellItemFocusLost(item)
	return end
	
	self.background_frame:Show(true)
	local sect = item:section()
	local text = game.translate_string(get_inv_name(sect))
	self.name_st:SetText(text)
	text = string.format("%3.2f %s", item:weight(), game.translate_string("st_kg"))
	self.weight_st:SetText(text)
	
	local cond = item:condition()
	self.condition_pb:SetProgressPos(cond)
	self.condition_pb:Show(cond < 1 or read_if_exists(sys_ini, "r_bool", sect, "use_condition", false))
		
	self.descr_list:Clear()
	ogse_signals.get_mgr():call("on_item_info_init", self.descr_list, item)
	text = read_if_exists(sys_ini, "r_string", sect, "description", nil)
	if text then
		text = game.translate_string(text)
		self.descr_text = CUIStatic()
		self.descr_text:SetWidth(self.descr_list:GetDesiredChildWidth())
		self.descr_text:SetText(text)
		self.descr_text:SetTextComplexMode(true)
		self.descr_text:SetTextColor(self.descr_list.text_color)
		self.descr_text:SetFont(GetFontCustom(self.descr_list.font))
		self.descr_text:AdjustHeightToText()
		self.descr_list:AddWindow(self.descr_text)
	end
	self.descr_list:SetHeight(self.descr_list:GetPadSize().y)
	self.background_frame:SetHeight(self.base_height + self.descr_list:GetHeight())
	
	self.owner:BringToTop(self)
end

function UIItemInfo:UpdateWndPos()
	--local property_box = self.owner:FindChild("property_box")
	local b_show = self.item and self.delay and time_global() >= self.delay --and not level.get_key_state(bind_to_dik(key_bindings.kADDITIONAL_ACTION)) and (not property_box or not property_box:IsShown())
	self.background_frame:Show(b_show)

	if not self.background_frame:IsShown() then
	return end
	
	local pos = vector2():set(self.owner:GetMousePosX(), self.owner:GetMousePosY())
	pos.x = pos.x + self.background_frame.offset.x
	pos.y = pos.y + self.background_frame.offset.y
	local wnd_size = {x = self.background_frame:GetWidth(), y = self.background_frame:GetHeight()}
	local delta = {x = pos.x + wnd_size.x - UI_BASE_WIDTH, y = pos.y + wnd_size.y - UI_BASE_HEIGHT}
    if delta.x > 0 then
        pos.x = pos.x - delta.x
	end		
    if delta.y > 0 then
        pos.y = pos.y - delta.y
	end		
	self.background_frame:SetWndPos(pos.x, pos.y)
end

function UIItemInfo:Update()
	CUIScriptWnd.Update(self)
	self:UpdateWndPos()
end	
------------------------------------------ADDITIONAL WINDOWS-----------------------------------------------------------------------------------------------------------------

function add_custom_info(UIDesc, obj)

	attach_effect_params(UIDesc, obj)
	attach_protection_params(UIDesc, obj)
	attach_armor_params(UIDesc, obj)
	attach_addon_params(UIDesc, obj)
	attach_belt_params(UIDesc, obj)
	
	if obj:is_eatable_item() then
		attach_eatable_params(UIDesc, obj)
		attach_booster_params(UIDesc, obj)
	end
	if is_power_device(obj) then
		attach_power_params(UIDesc, obj)
	end
	if obj:get_pda() then
		attach_pda_owner_info(UIDesc, obj)
	end	
	if obj:is_weapon() then
		atach_wpn_params(UIDesc, obj)
	end
	if obj:is_weapon_magazined() then
		attach_loaded_ammo(UIDesc, obj)
		attach_weapon_addons(UIDesc, obj)
	end
	if loadout.is_module(obj) then
		attach_loadout_slots(UIDesc, obj)
	end
	if obj:get_weapon_ammo() then
		if obj:get_weapon_ammo():is_magazine() then
			attach_magazin_ammo(UIDesc, obj)
		else
			attach_ammo_params(UIDesc, obj)
		end
	end
	if vest_plates.can_detach_plate(obj) then
		attach_plate_condition(UIDesc, obj)
	end
end

------------------------------------------EFFECT PARAMS WND-----------------------------------------------------------------------------------------------------------------
local effect_params = {
	{st_name = "health_restore_speed", 		param_name = "ui_inv_health_boost"},
	{st_name = "power_restore_speed", 		param_name = "ui_inv_power"},
	{st_name = "max_power_restore_speed", 	param_name = "ui_inv_max_power"},
	{st_name = "satiety_restore_speed", 	param_name = "ui_inv_satiety"},
	{st_name = "radiation_restore_speed", 	param_name = "ui_inv_radiation"},
	{st_name = "psy_health_restore_speed", 	param_name = "ui_inv_psy_health"},
	{st_name = "alcohol_restore_speed", 	param_name = "ui_inv_alcohol"},
	{st_name = "wounds_heal_speed", 		param_name = "ui_inv_wounds_heal"},
	{st_name = "additional_sprint", 		param_name = "ui_inv_sprint"},
	{st_name = "additional_jump", 			param_name = "ui_inv_jump"},
	{st_name = "additional_weight", 		param_name = "ui_inv_weight"},
}
local effect_st = {}
function attach_effect_params(UIDesc, item)
	local inv_item = item:get_inventory_item()
	local val, sn, text, color
	local show = false
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\effect_params.xml")

	effect_st = {}
	local params_list = xml:InitScrollView("params_list", UIDesc)
	for k,v in ipairs(effect_params) do
		val = inv_item:item_effect(k-1)
		if val ~= 0 then
			sn = "%"
			val = val * 100
			if v.st_name == "radiation_restore_speed" then
				sn = game.translate_string("st_rad")
				val = val / 100				
			end
			if v.st_name == "alcohol_restore_speed" then
				val = val * -1
			end
			effect_st[k] = CUIStatic()--xml:InitStatic(v.st_name, params_list)
			effect_st[k]:SetTextComplexMode(true)
			effect_st[k]:SetWidth(params_list:GetDesiredChildWidth())
			color = val > 0 and "%c[green]" or "%c[red]"
			if v.st_name == "max_power_restore_speed" or v.st_name == "radiation_restore_speed" or v.st_name == "alcohol_restore_speed" then
				color = val > 0 and "%c[red]" or "%c[green]"
			end
			text = string.format("%s%s %s %+.1f %s", game.translate_string("st_list_mark"), game.translate_string(v.param_name), color, val, sn)
			effect_st[k]:SetText(text)
			effect_st[k]:AdjustHeightToText()
			params_list:AddWindow(effect_st[k])
			show = true
		end
	end
	--//power loss
	val = inv_item.power_loss
	if val ~= 0 then
		if val < 0 and item:condition() > 0 or val > 0 then
			val = val * 100
			sn = "%"
			effect_st["power_loss"] = CUIStatic()--xml:InitStatic("power_loss", params_list)
			effect_st["power_loss"]:SetTextComplexMode(true)
			effect_st["power_loss"]:SetWidth(params_list:GetDesiredChildWidth())
			color = val > 0 and "%c[red]" or "%c[green]"
			text = string.format("%s%s %s %+.1f %s",game.translate_string("st_list_mark"),  game.translate_string("st_power_loss"), color, val, sn)
			effect_st["power_loss"]:SetText(text)
			effect_st["power_loss"]:AdjustHeightToText()
			params_list:AddWindow(effect_st["power_loss"])
			show = true
		end
	end
	--
	params_list:SetHeight(params_list:GetPadSize().y)
	if not show then
		params_list:Show(false)
	end	
end

------------------------------------------PROTECTION PARAMS WND-----------------------------------------------------------------------------------------------------------------
local protection_params = {
	{st_name = "burn_immunity", 			param_name = "ui_inv_burn_protection"},
	{st_name = "shock_immunity", 			param_name = "ui_inv_shock_protection"},
	{st_name = "strike_immunity", 			param_name = "ui_inv_strike_protection"},
	{st_name = "wound_immunity", 			param_name = "ui_inv_wound_protection"},
	{st_name = "radiation_immunity", 		param_name = "ui_inv_radiation_protection"},
	{st_name = "telepatic_immunity", 		param_name = "ui_inv_telepatic_protection"},
	{st_name = "chemical_burn_immunity", 	param_name = "ui_inv_chemical_burn_protection"},
	{st_name = "explosion_immunity", 		param_name = "ui_inv_explosion_protection"},
	{st_name = "fire_wound_immunity", 		param_name = "ui_inv_fire_wound_protection"},
}
local protection_st = {}
function attach_protection_params(UIDesc, item)
	local inv_item = item:get_inventory_item()
	local val, sn, text, color
	local show = false
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\protection_params.xml")

	protection_st = {}
	local params_list = xml:InitScrollView("params_list", UIDesc)
	for k,v in ipairs(protection_params) do
		val = inv_item:hit_type_protection(k-1)
		if val ~= 0 then
			sn = "%"
			val = val * 100
			protection_st[k] = CUIStatic()--xml:InitStatic(v.st_name, params_list)
			protection_st[k]:SetTextComplexMode(true)
			protection_st[k]:SetWidth(params_list:GetDesiredChildWidth())
			color = val > 0 and "%c[green]" or "%c[red]"
			text = string.format("%s%s %s %+.1f %s",game.translate_string("st_list_mark"),  game.translate_string(v.param_name), color, val, sn)
			protection_st[k]:SetText(text)
			protection_st[k]:AdjustHeightToText()
			params_list:AddWindow(protection_st[k])
			show = true
		end
	end
	params_list:SetHeight(params_list:GetPadSize().y)
	if not show then
		params_list:Show(false)
	end	
end

------------------------------------------EATABLE PARAMS WND-----------------------------------------------------------------------------------------------------------------
local eatable_params = {
	{st_name = "health", 		param_name = "ui_inv_health"},
	{st_name = "power", 		param_name = "ui_inv_power"},
	{st_name = "max_power", 	param_name = "ui_inv_max_power"},
	{st_name = "satiety", 		param_name = "ui_inv_satiety"},
	{st_name = "radiation", 	param_name = "ui_inv_radiation"},
	{st_name = "psyhealth", 	param_name = "ui_inv_psy_health"},
	{st_name = "alcohol", 		param_name = "ui_inv_alcohol"},
	{st_name = "wounds_heal", 	param_name = "ui_inv_wounds_heal"},
	{st_name = "somnolence", 	param_name = "ui_inv_somnolence"},
}
local eatable_st = {}
function attach_eatable_params(UIDesc, item)
	local eatable = item:get_eatable_item()
	local val, sn, text, color
	local show = false
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\eatable_params.xml")

	eatable_st = {}
	local params_list = xml:InitScrollView("params_list", UIDesc)
	for k,v in ipairs(eatable_params) do
		val = v.st_name == "somnolence" and somnolence.get_influence(item) or eatable:get_influence(k-1)
		if val ~= 0 then
			sn = "%"
			val = val * 100
			eatable_st[k] = CUIStatic()--xml:InitStatic(v.st_name, params_list)
			eatable_st[k]:SetTextComplexMode(true)
			eatable_st[k]:SetWidth(params_list:GetDesiredChildWidth())
			color = val > 0 and "%c[green]" or "%c[red]"
			if v.st_name == "max_power" or v.st_name == "radiation" or v.st_name == "somnolence" then
				color = val > 0 and "%c[red]" or "%c[green]"
			end
			text = string.format("%s%s %s %+.1f %s",game.translate_string("st_list_mark"),  game.translate_string(v.param_name), color, val, sn)
			eatable_st[k]:SetText(text)
			eatable_st[k]:AdjustHeightToText()
			params_list:AddWindow(eatable_st[k])
			show = true
		end
	end
	params_list:SetHeight(params_list:GetPadSize().y)
	if not show then
		params_list:Show(false)
	end	
end

------------------------------------------BOOSTER PARAMS WND-----------------------------------------------------------------------------------------------------------------
local boost_params = {
	{st_name = "health", 				param_name = "ui_inv_health_boost"},
	{st_name = "power", 				param_name = "ui_inv_power"},
	{st_name = "max_power", 			param_name = "ui_inv_max_power"},
	{st_name = "satiety", 				param_name = "ui_inv_satiety"},
	{st_name = "radiation", 			param_name = "ui_inv_radiation"},
	{st_name = "psyhealth", 			param_name = "ui_inv_psy_health"},
	{st_name = "alcohol", 				param_name = "ui_inv_alcohol"},
	{st_name = "wounds_heal", 			param_name = "ui_inv_wounds_heal"},
	{st_name = "sprint", 				param_name = "ui_inv_sprint"},
	{st_name = "jump", 					param_name = "ui_inv_jump"},
	{st_name = "max_weight", 			param_name = "ui_inv_weight"},
	{st_name = "burn_boost", 			param_name = "ui_inv_burn_protection"},
	{st_name = "shock_boost", 			param_name = "ui_inv_shock_protection"},
	{st_name = "strike_boost", 			param_name = "ui_inv_strike_protection"},
	{st_name = "wound_boost", 			param_name = "ui_inv_wound_protection"},
	{st_name = "radiation_boost", 		param_name = "ui_inv_radiation_protection"},
	{st_name = "telepatic_boost", 		param_name = "ui_inv_telepatic_protection"},
	{st_name = "chemical_burn_boost", 	param_name = "ui_inv_chemical_burn_protection"},
	{st_name = "explosion_boost", 		param_name = "ui_inv_explosion_protection"},
	{st_name = "fire_wound_boost", 		param_name = "ui_inv_fire_wound_protection"},
	{st_name = "somnolence", 			param_name = "ui_inv_somnolence"},
}
local boost_st = {}
function attach_booster_params(UIDesc, item)
	local eatable = item:get_eatable_item()
	local val, sn, text, color
	local show = false
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\boost_params.xml")
	
	boost_st = {}
	local params_list = xml:InitScrollView("params_list", UIDesc)
	for k,v in ipairs(boost_params) do
		val = v.st_name == "somnolence" and somnolence.get_boost(item) or eatable:get_boost(k-1)
		-- log3("item %s | boost val %s | boost type %s", item:name(), val, v.st_name)
		if val ~= 0 then
			sn = "%"
			val = val * 100
			boost_st[k] = CUIStatic()--xml:InitStatic(v.st_name, params_list)
			boost_st[k]:SetTextComplexMode(true)
			boost_st[k]:SetWidth(params_list:GetDesiredChildWidth())
			color = val > 0 and "%c[green]" or "%c[red]"
			if v.st_name == "max_power" or v.st_name == "radiation" or v.st_name == "somnolence" then
				color = val > 0 and "%c[red]" or "%c[green]"
			end
			text = string.format("%s%s %s %+.1f %s",game.translate_string("st_list_mark"), game.translate_string(v.param_name), color, val, sn)
			boost_st[k]:SetText(text)
			boost_st[k]:AdjustHeightToText()
			params_list:AddWindow(boost_st[k])
			show = true
		end
	end
	--boost time
	boost_st["boost_time"] = CUIStatic()--xml:InitStatic("boost_time", params_list)
	boost_st["boost_time"]:SetTextComplexMode(true)
	boost_st["boost_time"]:SetWidth(params_list:GetDesiredChildWidth())
	val = read_if_exists(sys_ini, "r_float", item:section(), "boost_time", 0)
	color = "%c[UI_orange]"
	text = string.format("%s%s %s%.f %s", game.translate_string("st_list_mark"), game.translate_string("ui_inv_boost_time"), color, val, game.translate_string("st_time_minute"))
	boost_st["boost_time"]:SetText(text)
	boost_st["boost_time"]:AdjustHeightToText()
	params_list:AddWindow(boost_st["boost_time"])
	--
	params_list:SetHeight(params_list:GetPadSize().y)
	if not show then
		params_list:Show(false)
	end		
end

------------------------------------------ARMOR WND-------------------------------------------------------------------------------------------------------------------
local armor_params = {
	{bone = "bip01_head", 		st_name = "armor_head", 	param_name = "st_armor_head"},
	{bone = "jaw_1", 			st_name = "armor_jav", 		param_name = "st_armor_jav"},
	{bone = "bip01_neck", 		st_name = "armor_neck", 	param_name = "st_armor_neck"},
	{bone = "bip01_l_clavicle", st_name = "armor_clavicle", param_name = "st_armor_clavicle"},
	{bone = "bip01_spine2", 	st_name = "armor_spine2", 	param_name = "st_armor_spine2"},
	{bone = "bip01_spine1", 	st_name = "armor_spine1", 	param_name = "st_armor_spine1"},
	{bone = "bip01_spine", 		st_name = "armor_spine", 	param_name = "st_armor_spine"},
	{bone = "bip01_pelvis", 	st_name = "armor_pelvis", 	param_name = "st_armor_pelvis"},
	{bone = "bip01_l_upperarm", st_name = "armor_upperarm", param_name = "st_armor_upperarm"},
	{bone = "bip01_l_forearm", 	st_name = "armor_forearm", 	param_name = "st_armor_forearm"},
	{bone = "bip01_l_hand", 	st_name = "armor_hand", 	param_name = "st_armor_hand"},
	{bone = "bip01_l_thigh", 	st_name = "armor_thigh", 	param_name = "st_armor_thigh"},
	{bone = "bip01_l_calf", 	st_name = "armor_calf", 	param_name = "st_armor_calf"},
	{bone = "bip01_l_foot", 	st_name = "armor_foot", 	param_name = "st_armor_foot"},
	{bone = "bip01_l_toe0", 	st_name = "armor_toe", 		param_name = "st_armor_toe"},
}
local armor_st = {}
function attach_armor_params(UIDesc, item)
	local bones_protect_sect = item:get_inventory_item().bone_protection_sect
	if not bones_protect_sect or item:condition() == 0 then
	return end
	
	local val, sn, text, tmp_tbl, bone_protect_str
	local show = false
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\armor_params.xml")
	
	armor_st = {}
	sn = game.translate_string("st_armor_class")
	local params_list = xml:InitScrollView("params_list", UIDesc)
	for k,v in ipairs(armor_params) do
		bone_protect_str = read_if_exists(sys_ini, "r_string", bones_protect_sect, v.bone, nil)
		if bone_protect_str then
			tmp_tbl = split_string(bone_protect_str, ",")
			val = tonumber(tmp_tbl[2])
			if val > 0 then
				armor_st[k] = CUIStatic()--xml:InitStatic(v.st_name, params_list)
				text = string.format("%s%s %.0f %s", game.translate_string("st_list_mark"), game.translate_string(v.param_name), val, sn)
				armor_st[k]:SetText(text)
				armor_st[k]:AdjustHeightToText()
				params_list:AddWindow(armor_st[k])
				show = true
			end
		end
	end
	--hit fraction
	val = read_if_exists(sys_ini, "r_float", item:section(), "hit_fraction", 0.1)
	if val > 0 then
		armor_st["hit_fraction"] = CUIStatic()--xml:InitStatic("hit_fraction", params_list)
		text = string.format("%s%s %.0f %s", game.translate_string("st_list_mark"), game.translate_string("st_armor_hit_fraction"), val * 100, "%")
		armor_st["hit_fraction"]:SetText(text)
		armor_st["hit_fraction"]:AdjustHeightToText()
		params_list:AddWindow(armor_st["hit_fraction"])
	end
	--
	params_list:SetHeight(params_list:GetPadSize().y)
	if not show then
		params_list:Show(false)
	end	
end

------------------------------------------BATTERY POWER WND-----------------------------------------------------------------------------------------------------------------
function attach_power_params(UIDesc, obj)
	local bind_obj = obj:binded_object()
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\power_params.xml")
	local power_params = xml:InitScrollView("power_params", UIDesc)--xml:InitStatic("power_params", UIDesc)
	
	if not read_if_exists(sys_ini, "r_bool", obj:section(), "condition_as_power", false) then
		local cap_power = xml:InitStatic("power_params:cap_power", power_params)
		cap_power:SetText(game.translate_string(read_if_exists(sys_ini, "r_string", obj:section(), "power_level_name", "st_power_level")))
		cap_power:AdjustHeightToText()
		
		local power_progress = xml:InitProgressBar("power_params:progress_power", power_params)
		local power_level = bind_obj:get_power_level()
		power_progress:SetProgressPos(power_level)
	end
	
	local cap_work_time = xml:InitStatic("power_params:cap_work_time", power_params)
	local worktime_text = string.format("%s %s %s", game.translate_string("st_work_time"), bind_obj:get_work_time(), game.translate_string("st_time_hour"))
	if bind_obj:power_source_detachable() then
		worktime_text = worktime_text..string.format(" [%s]", game.translate_string(get_inv_name(bind_obj:get_power_sect())))
	end
	cap_work_time:SetText(worktime_text)
	cap_work_time:AdjustHeightToText()
	
	power_params:SetHeight(power_params:GetPadSize().y)
end

------------------------------------------WEAPON PARAMS WND-----------------------------------------------------------------------------------------------------------------
function atach_wpn_params(UIDesc, obj)
	if not read_if_exists(sys_ini, "r_bool", obj:section(), "show_wpn_properties", true) then
	return end
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\weapon_params.xml")
	local main = xml:InitStatic("wpn_params", UIDesc)
	
	local cap_dispersion 	= xml:InitStatic("wpn_params:cap_dispersion", main)
	local cap_damage 		= xml:InitStatic("wpn_params:cap_damage", main)
	local cap_speed 		= xml:InitStatic("wpn_params:cap_speed", main)
	local cap_rpm 			= xml:InitStatic("wpn_params:cap_rpm", main)
	local cap_range 		= xml:InitStatic("wpn_params:cap_range", main)
	local cap_reliability 	= xml:InitStatic("wpn_params:cap_reliability", main)
		
	local progress_dispersion 	= xml:InitProgressBar("wpn_params:progress_dispersion", main)
	local progress_damage 		= xml:InitProgressBar("wpn_params:progress_damage", main)
	local progress_speed 		= xml:InitProgressBar("wpn_params:progress_speed", main)
	local progress_rpm 			= xml:InitProgressBar("wpn_params:progress_rpm", main)
	local progress_range 		= xml:InitProgressBar("wpn_params:progress_range", main)
	local progress_reliability 	= xml:InitProgressBar("wpn_params:progress_reliability", main)
	
	local params = ui_wpn_params
	
	local text = string.format("%s (%.2f)", cap_dispersion:GetText(), params.GetDispersion(obj))
	cap_dispersion:SetText(text)
	text = string.format("%s (%.1f)", cap_damage:GetText(), params.GetDamage(obj))
	cap_damage:SetText(text)
	text = string.format("%s (%.0f)", cap_speed:GetText(), params.GetSpeed(obj))
	cap_speed:SetText(text)
	text = string.format("%s (%.0f)", cap_rpm:GetText(), params.GetRPM(obj))
	cap_rpm:SetText(text)	
	text = string.format("%s (%.0f)", cap_range:GetText(), params.GetRange(obj))
	cap_range:SetText(text)	
	text = string.format("%s (%.0f)", cap_reliability:GetText(), params.GetReliability(obj))
	cap_reliability:SetText(text)		
	
	progress_dispersion:SetProgressPos(params.GetDispersion(obj))
	progress_damage:SetProgressPos(params.GetDamage(obj))
	progress_speed:SetProgressPos(params.GetSpeed(obj))
	progress_rpm:SetProgressPos(params.GetRPM(obj))
	progress_range:SetProgressPos(params.GetRange(obj))
	progress_reliability:SetProgressPos(params.GetReliability(obj))
end

------------------------------------------LOADED WEAPON AMMO WND-----------------------------------------------------------------------------------------------------------------
local pos_x
function attach_loaded_ammo(UIDesc, obj)
	local wpn = obj:get_weapon_m()
	local show_ammo = obj:get_ammo_in_magazine() > 0
	local show_mag = wpn:addon_attachable(addon.magazine) and wpn:is_addon_attached(addon.magazine)
	local show_ammo2 = obj:get_ammo_in_magazine2() > 0
	
	if 
		not show_ammo and
		not show_mag and
		not show_ammo2 then
	return end

	pos_x = 0
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\loaded_ammo.xml")
	local main = xml:InitStatic("loaded_ammo", UIDesc)
	
	local ammo_s = {}
	for i=1,3 do
		ammo_s[i] = xml:InitStatic("loaded_ammo:ammo_icon", main)
		ammo_s[i]:Show(false)
	end

	if show_ammo then
		set_ammo_icon(ammo_s[1], get_cur_ammo_sect(obj))
	end
	if show_mag then
		set_ammo_icon(ammo_s[2], wpn:get_addon_name(addon.magazine))
	end
	if show_ammo2 then
		set_ammo_icon(ammo_s[3], get_cur_ammo2_sect(obj))
	end	
end

function set_ammo_icon(icon, sect)
	local params = CIconParams(sect)
	params:set_shader(icon)
		
	local width_k = params.grid_width/CELL_W
	local height_k = params.grid_height/CELL_H
	local width = icon:GetWidth() * params.grid_width
	local height = icon:GetHeight() * params.grid_height
		
	if params.grid_height > 1 then --//пропорційно зменшимо іконку з висотою > 1 клітинки
		width = width / params.grid_height
		height = height / params.grid_height
	end
		
	icon:SetWidth(width)
	icon:SetHeight(height)

	icon:Show(true)
	icon:SetWndPos(pos_x, icon:GetWndPos().y)
	pos_x = pos_x + icon:GetWidth()
end

------------------------------------------LOADED WEAPON AMMO WND-----------------------------------------------------------------------------------------------------------------

function attach_magazin_ammo(UIDesc, obj)
	local ammo = obj:get_weapon_ammo()
	if ammo.box_curr == 0 then
	return end
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\loaded_ammo.xml")
	local main = xml:InitStatic("loaded_ammo", UIDesc)
	local ammo_icon = xml:InitStatic("loaded_ammo:ammo_icon", main) 
	
	pos_x = 0
	
	local sect = ammo:ammo_sect()
	set_ammo_icon(ammo_icon, sect)
	ammo_icon:SetText(game.translate_string(read_if_exists(sys_ini, "r_string", sect, "inv_name_short", get_inv_name(sect))))
	ammo_icon:SetTextPos(ammo_icon:GetWidth(), ammo_icon:GetHeight()/2)
end

------------------------------------------COMPATIBLE WEAPON ADDONS WND-----------------------------------------------------------------------------------------------------------------
local addon_type = {
	"silencer",
	"scope",
	"grenade_launcher",
	"laser",
	"flashlight",
	"stock",
	"extender",
	"forend",
}
local addons_st = {}
function attach_weapon_addons(UIDesc, obj)
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\weapon_addons.xml")

	local tmp_tbl, def_font, def_color = nil, "letterica16", "255, 255, 255, 255"

	local addons_list = xml:InitScrollView("addons_list", UIDesc)
	
	addons_list.font = xml:ReadAttrib("addons_list:descr_text", "font", def_font)
	tmp_tbl = split_string(xml:ReadAttrib("addons_list:descr_text", "text_color", def_color), ",")
	addons_list.text_color = GetARGB(tmp_tbl[1], tmp_tbl[2], tmp_tbl[3], tmp_tbl[4])
	local addon_text_st = nil

	local show = false
	local addons_txt = ""
	local addon_str = nil
	local addon_status = 0
	local addons = {}
	addons_st = {}
	for _,addon in pairs(addon_type) do
		addon_str = read_if_exists(sys_ini, "r_string", obj:section(), addon.."_name", nil)
		addon_status = read_if_exists(sys_ini, "r_u32", obj:section(), addon.."_status", 0)
		if addon_str and addon_status == 2 then
			addons = split_string(addon_str, ",")
			for __,addon_sect in pairs(addons) do
				addons_st[addon_sect] = CUIStatic()
				local _st = addons_st[addon_sect]
				_st:SetWidth(addons_list:GetDesiredChildWidth())
				addons_txt = string.format("%s%s", game.translate_string("st_list_mark"), game.translate_string(get_inv_name(addon_sect)))
				_st:SetText(addons_txt)
				_st:SetTextComplexMode(true)
				_st:SetTextColor(addons_list.text_color)
				_st:SetFont(GetFontCustom(addons_list.font))
				_st:AdjustHeightToText()
				addons_list:AddWindow(_st)
				show = true
			end
		end
	end
	addons_list:SetHeight(addons_list:GetPadSize().y)
	if not show then
		addons_list:Show(false)
	end
end

------------------------------------------ADDITIONAL LOADOUT SLOTS WND-----------------------------------------------------------------------------------------------------------------
local loadout_slots = {
		"pistol_ammo",
		"rifle_ammo",
		"shotgun_ammo",
		"heavy_ammo",
		"grenade",
		"medicine",
		"scope",
		"silencer",
	}
function attach_loadout_slots(UIDesc, item)
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\loadout_slots.xml")
	local slots_scroll_view = xml:InitScrollView("scroll_view_loadout", UIDesc)
	local sect = item:section()
	local count, icon, text
	for k,v in ipairs(loadout_slots) do
		count = read_if_exists(sys_ini, "r_u32", sect, v, 0)
		--log3("~count %s", count)
		if count > 0 then
			icon = xml:InitStatic("scroll_view_loadout:"..v.."_icon", slots_scroll_view)
			text = string.format("+%s %s", count, game.translate_string("ui_st_"..v))
			icon:SetText(text)
		end
	end
	slots_scroll_view:SetHeight(slots_scroll_view:GetPadSize().y)
end

-----------------------------------------------------AMMO PARAMS------------------------------------------------------------------------------------------------------------------------
local ammo_params = {
		{name = "k_dist", 			unit = "%", 					default = 0, is_int = false, invert = false},
		{name = "k_disp", 			unit = "%", 					default = 0, is_int = false, invert = true},
		{name = "k_hit", 			unit = "%", 					default = 0, is_int = false, invert = false},
		{name = "k_impulse", 		unit = "%", 					default = 0, is_int = false, invert = false},
		{name = "k_speed", 			unit = "%", 					default = 0, is_int = false, invert = false},
		{name = "k_air_resistance", unit = "%", 					default = 0, is_int = false, invert = false},
		{name = "impair", 			unit = "%", 					default = 0, is_int = false, invert = true},
		{name = "k_pierce", 		unit = "", 						default = 1, is_int = false, invert = false},		
		{name = "buck_shot", 		unit = "", 						default = 1, is_int = true, invert = false},		
		{name = "k_ap", 			unit = "st_armor_class", 		default = 0, is_int = true, invert = false},		
	}
function attach_ammo_params(UIDesc, item)
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\ammo_params.xml")
	local show = false
	local params_list = xml:InitScrollView("params_list", UIDesc)
	local sect = item:section()
	local val, static, text, color
	for k,v in ipairs(ammo_params) do
		val = read_if_exists(sys_ini, "r_float", sect, v.name, v.default)
		if val ~= v.default then
			v.static = CUIStatic()
			v.static:SetTextComplexMode(true)
			v.static:SetWidth(params_list:GetDesiredChildWidth())			
			if v.unit == "%" then
				val = val * 100
			end
			color = (v.unit ~= "%") and "%c[default]" or val > 0 and "%c[green]" or "%c[red]"
			if v.invert then
				color = val > 0 and "%c[red]" or "%c[green]"
			end
			text = string.format(v.is_int and "%s%s %s%.0f %s" or v.name == "k_pierce" and "%s%s %s%.1f %s" or "%s%s %s%+.1f %s", game.translate_string("st_list_mark"), game.translate_string("ui_st_"..v.name), color, val, game.translate_string(v.unit))
			v.static:SetText(text)
			v.static:AdjustHeightToText()
			show = true
			params_list:AddWindow(v.static)
		end
	end
	params_list:SetHeight(params_list:GetPadSize().y)
	if not show then
		params_list:Show(false)
	end	
end

-----------------------------------------------------ADDON PARAMS------------------------------------------------------------------------------------------------------------------------
local addon_params = {
		{name = "bullet_hit_power_k", 			unit = "%", default = 0, invert = false},
		{name = "bullet_speed_k", 				unit = "%", default = 0, invert = false},
		{name = "fire_dispersion_base_k", 		unit = "%", default = 0, invert = true},
		{name = "cam_dispersion_k", 			unit = "%", default = 0, invert = true},
		{name = "condition_shot_dec_silencer", 	unit = "%", default = 0, invert = true},
		{name = "zoom_rotate_time_k", 			unit = "%", default = 0, invert = true},
	}
function attach_addon_params(UIDesc, item)
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\addon_params.xml")
	local show = false
	local params_list = xml:InitScrollView("params_list", UIDesc)
	local sect = item:section()
	local val, text, color
	for k,v in ipairs(addon_params) do
		val = read_if_exists(sys_ini, "r_float", sect, v.name, v.default)
		if val ~= v.default then
			v.static = CUIStatic()
			v.static:SetTextComplexMode(true)
			v.static:SetWidth(params_list:GetDesiredChildWidth())
			if v.unit == "%" then
				val = val * 100
			end
			color = (val > 0 ) and "%c[green]" or "%c[red]"
			if v.invert then
				color = val > 0 and "%c[red]" or "%c[green]"
			end			
			text = string.format(v.is_int and "%s%s %s%.0f %s" or "%s%s %s%+.1f %s", game.translate_string("st_list_mark"), game.translate_string("ui_st_"..v.name), color, val, game.translate_string(v.unit))
			v.static:SetText(text)
			v.static:AdjustHeightToText()
			show = true
			params_list:AddWindow(v.static)
		end
	end
	params_list:SetHeight(params_list:GetPadSize().y)
	if not show then
		params_list:Show(false)
	end	
end

------------------------------------------VEST ARMOR PLATE WND-----------------------------------------------------------------------------------------------------------------
function attach_plate_condition(UIDesc, obj)
	local bind_obj = obj:binded_object()
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\armor_plate.xml")
	local plate_params = xml:InitStatic("plate_params", UIDesc)
	
	local cap_plate = xml:InitStatic("plate_params:cap_plate", plate_params)
	local text = string.format("%s: %s", game.translate_string("st_attached_plate"), game.translate_string(get_inv_name(bind_obj:get_plate_sect())))
	cap_plate:SetText(text)
	
	local condition_progress = xml:InitProgressBar("plate_params:progress_condition", plate_params)
	condition_progress:SetProgressPos(bind_obj:get_plate_condition())
end

-----------------------------------------------------BELT SLOTS PARAMS-----------------------------------------------------------------------------------------------------------
local belt_slots_st
function attach_belt_params(UIDesc, item)
	local belt_size = read_if_exists(sys_ini, "r_u32", item:section(), "belt_size", 0)
	if belt_size <= 0 then return end
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\belt_params.xml")
	local params_list = xml:InitScrollView("params_list", UIDesc)
	belt_slots_st = CUIStatic()
	belt_slots_st:SetTextComplexMode(true)
	belt_slots_st:SetWidth(params_list:GetDesiredChildWidth())
	local color = "%c[UI_orange]"
	local text = string.format("%s%s %s%s", game.translate_string("st_list_mark"), game.translate_string("ui_st_belt_slots"), color, belt_size)
	belt_slots_st:SetText(text)
	belt_slots_st:AdjustHeightToText()
	params_list:AddWindow(belt_slots_st)
	params_list:SetHeight(params_list:GetPadSize().y)
end


-----------------------------------------------------PDA OWNER INFO------------------------------------------------------------------------------------------------------------------------
local ui_owner_data = {}
function attach_pda_owner_info(UIDesc, item)
	local se_obj = alife():object(item:id())
	
	local owner_data = se_obj.owner_data
	if not owner_data then
	return end
	
	if actor_get_pda() and actor_get_pda():id() == item:id() then
		pda.fill_owner_info(item:id())
	end
	
	if owner_data.name == "" then
	return end
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\pda_owner.xml")

	local data_list = xml:InitScrollView("data_list", UIDesc)

	local color = "%c[UI_orange]"
	
	local name_st = CUIStatic()
	ui_owner_data.name_st = name_st
	name_st:SetTextComplexMode(true)
	name_st:SetWidth(data_list:GetDesiredChildWidth())
	local text = string.format("%s%s: %s%s", game.translate_string("st_list_mark"), game.translate_string("ui_st_name"), color, game.translate_string(owner_data.name))
	name_st:SetText(text)
	name_st:AdjustHeightToText()
	data_list:AddWindow(name_st)
	
	local comm_st = CUIStatic()
	ui_owner_data.comm_st = comm_st
	comm_st:SetTextComplexMode(true)
	comm_st:SetWidth(data_list:GetDesiredChildWidth())
	text = string.format("%s%s: %s%s", game.translate_string("st_list_mark"), game.translate_string("ui_st_community"), color, game.translate_string(owner_data.comm))
	comm_st:SetText(text)
	comm_st:AdjustHeightToText()
	data_list:AddWindow(comm_st)
	
	local rank_st = CUIStatic()
	ui_owner_data.rank_st = rank_st
	rank_st:SetTextComplexMode(true)
	rank_st:SetWidth(data_list:GetDesiredChildWidth())
	text = string.format("%s%s: %s%s", game.translate_string("st_list_mark"), game.translate_string("ui_st_rank"), color, game.translate_string(ranks.get_val_rank_name(owner_data.rank)))
	rank_st:SetText(text)
	rank_st:AdjustHeightToText()
	data_list:AddWindow(rank_st)	
	
	data_list:SetHeight(data_list:GetPadSize().y)
end