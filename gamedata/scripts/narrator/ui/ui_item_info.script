-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "ui_item_info_callback",   fun = this.add_custom_info})
end

function add_custom_info(UIDesc, obj)
	if is_power_device(obj) then
		attach_power_params(UIDesc, obj:binded_object())
	end
	if obj:is_weapon() then
		atach_wpn_params(UIDesc, obj)
	end
	if obj:is_weapon_magazined() then
		attach_loaded_ammo(UIDesc, obj)
		attach_weapon_addons(UIDesc, obj)
	end
	if loadout.is_module(obj) then
		attach_loadout_slots(UIDesc, obj)
	end
end

function attach_power_params(UIDesc, bind_obj)
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\power_params.xml")
	local power_params = xml:InitStatic("power_params", UIDesc)
	
	local cap_power = xml:InitStatic("power_params:cap_power", power_params)
	cap_power:SetText(game.translate_string("st_power_level"))
	
	local cap_work_time = xml:InitStatic("power_params:cap_work_time", power_params)
	local worktime_text = string.format("%s %s %s", game.translate_string("st_work_time"), bind_obj:get_work_time(), game.translate_string("st_time_hour"))
	if bind_obj:power_source_detachable() then
		worktime_text = worktime_text..string.format(" [%s]", game.translate_string(get_inv_name(bind_obj:get_power_sect())))
	end
	cap_work_time:SetText(worktime_text)
	
	local power_progress = xml:InitProgressBar("power_params:progress_power", power_params)
	local power_level = bind_obj:get_power_level()
	power_progress:SetProgressPos(power_level)
end

function atach_wpn_params(UIDesc, obj)
	if not read_if_exists(sys_ini, "r_bool", obj:section(), "show_wpn_properties", true) then
	return end
	
	local xml = CScriptXmlInit()
	xml:ParseFile("wpn_params.xml")
	local main = xml:InitStatic("wpn_params", UIDesc)
	
	local cap_accuracy 		= xml:InitStatic("wpn_params:cap_accuracy", main)
	local cap_damage 		= xml:InitStatic("wpn_params:cap_damage", main)
	local cap_handling 		= xml:InitStatic("wpn_params:cap_handling", main)
	local cap_rpm 			= xml:InitStatic("wpn_params:cap_rpm", main)
	local cap_range 		= xml:InitStatic("wpn_params:cap_range", main)
	local cap_reliability 	= xml:InitStatic("wpn_params:cap_reliability", main)
	
	local progress_accuracy 	= xml:InitProgressBar("wpn_params:progress_accuracy", main)
	local progress_damage 		= xml:InitProgressBar("wpn_params:progress_damage", main)
	local progress_handling 	= xml:InitProgressBar("wpn_params:progress_handling", main)
	local progress_rpm 			= xml:InitProgressBar("wpn_params:progress_rpm", main)
	local progress_range 		= xml:InitProgressBar("wpn_params:progress_range", main)
	local progress_reliability 	= xml:InitProgressBar("wpn_params:progress_reliability", main)
	
	progress_accuracy:SetProgressPos(ui_wpn_params.GetAccuracy(obj))
	progress_damage:SetProgressPos(ui_wpn_params.GetDamage(obj))
	progress_handling:SetProgressPos(ui_wpn_params.GetHandling(obj))
	progress_rpm:SetProgressPos(ui_wpn_params.GetRPM(obj))
	progress_range:SetProgressPos(ui_wpn_params.GetRange(obj))
	progress_reliability:SetProgressPos(ui_wpn_params.GetReliability(obj))
end

local pos_x
function attach_loaded_ammo(UIDesc, obj)
	local wpn = obj:get_weapon_m()
	local show_ammo = obj:get_ammo_in_magazine() > 0
	local show_mag = wpn:is_addon_attached(addon.magazine)
	local show_ammo2 = obj:get_ammo_in_magazine2() > 0
	
	if 
		not show_ammo and
		not show_mag and
		not show_ammo2 then
	return end

	pos_x = 0
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\loaded_ammo.xml")
	local main = xml:InitStatic("loaded_ammo", UIDesc)
	
	local ammo_s = {}
	for i=1,3 do
		ammo_s[i] = xml:InitStatic("loaded_ammo:ammo_icon", main)
		ammo_s[i]:Show(false)
	end

	if show_ammo then
		set_ammo_icon(ammo_s[1], get_cur_ammo_sect(obj))
	end
	if show_mag then
		set_ammo_icon(ammo_s[2], wpn:get_addon_name(addon.magazine))
	end
	if show_ammo2 then
		set_ammo_icon(ammo_s[3], get_cur_ammo2_sect(obj))
	end	
end

function set_ammo_icon(icon, sect)
	local params = CIconParams(sect)
	params:set_shader(icon)
		
	local width_k = params.grid_width/CELL_W
	local height_k = params.grid_height/CELL_H
	local width = icon:GetWidth() * params.grid_width
	local height = icon:GetHeight() * params.grid_height
		
	if params.grid_height > 1 then --//пропорційно зменшимо іконку з висотою > 1 клітинки
		width = width / params.grid_height
		height = height / params.grid_height
	end
		
	icon:SetWidth(width)
	icon:SetHeight(height)

	icon:Show(true)
	icon:SetWndPos(pos_x, icon:GetWndPos().y)
	pos_x = pos_x + icon:GetWidth()
end

local addon_type = {
	"silencer",
	"scope",
	"grenade_launcher",
	"laser",
	"flashlight",
	"stock",
	"extender",
	"forend",
}
function attach_weapon_addons(UIDesc, obj)
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\weapon_addons.xml")
	
	local addons_header	= xml:InitStatic("addons_header", UIDesc)
	addons_header:Show(false)
	local addons_list = xml:InitStatic("addons_list", UIDesc)
	
	local addons_txt = ""
	local addon_str = nil
	local addon_status = 0
	local addons = {}
	
	for _,addon in pairs(addon_type) do
		addon_str = read_if_exists(sys_ini, "r_string", obj:section(), addon.."_name", nil)
		addon_status = read_if_exists(sys_ini, "r_u32", obj:section(), addon.."_status", 0)
		if addon_str and addon_status == 2 then
			addons = split_string(addon_str, ",")
			for __,addon_sect in pairs(addons) do
				addons_txt = addons_txt.."*"..game.translate_string(get_inv_name(addon_sect)).."\\n"
			end
	end
	end
	
	if addons_txt ~= "" then
		addons_header:Show(true)
		addons_txt = addons_txt.."\\n "
		addons_list:SetText(addons_txt)
		addons_list:AdjustHeightToText()
	end
end

local loadout_slots = {
		"pistol_ammo",
		"rifle_ammo",
		"shotgun_ammo",
		"heavy_ammo",
		"grenade",
		"medicine",
	}
function attach_loadout_slots(UIDesc, item)
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\loadout_slots.xml")
	local slots_scroll_view = xml:InitScrollView("scroll_view_loadout", UIDesc)
	local sect = item:section()
	local count, icon, text
	local _h = slots_scroll_view:GetHeight()
	for k,v in ipairs(loadout_slots) do
		count = read_if_exists(sys_ini, "r_u32", sect, v, 0)
		log3("~count %s", count)
		if count > 0 then
			icon = xml:InitStatic("scroll_view_loadout:"..v.."_icon", slots_scroll_view)
			text = string.format("+%s %s", count, game.translate_string("ui_st_"..v))
			icon:SetText(text)
			_h = _h + icon:GetHeight()
		end
	end
	slots_scroll_view:SetHeight(_h)
end