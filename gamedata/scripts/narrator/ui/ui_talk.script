-- -*- mode: lua; coding: windows-1251-dos -*-
local overlay = nil
local OVERLAY_XML = "script_overlays\\talk_overlay.xml"

function attach(sm)
	sm:subscribe({signal = "on_spawn",   fun = this.create_window})
	sm:subscribe({signal = "on_destroy",   fun = this.destroy_window})
end

local subscribed = false

function create_window()
	actor:disable_info_portion("ui_dialog")
	if not overlay then
		overlay = TalkOverlay(level.get_talk_wnd())
	end
end

function destroy_window()
	if overlay then
		overlay:DetachWnd()
		overlay = nil
	end
end

class "TalkOverlay" (CUIScriptWnd)

function TalkOverlay:__init(owner) super()
	self.owner = owner
	self:InitControls()
	self:Subscribe()
end

function TalkOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_dialog_show", self = self, fun = self.OnShow},
			{signal = "on_dialog_hide", self = self, fun = self.OnHide},
			{signal = "on_talk_show", self = self, fun = self.OnShow},
			{signal = "on_talk_hide", self = self, fun = self.OnHide},
			{signal = "on_actor_icon_update", self = self, fun = self.OnActorIconUpdate},
			--{signal = "on_trade_show", self = self, fun = self.OnShowTrade},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function TalkOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function TalkOverlay:DetachWnd()
	quick_slots.set_selected(nil)
	self:Unsubscribe()
	self:ClearCallbacks()
	self.owner:DetachChild(self)
end

function TalkOverlay:InitControls()
	self.owner:AttachChild(self)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	-- self:Enable(true)
	self:Show(true)
	
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)

	local name
	
	--//character info
	self.char_info_back = xml:InitStatic("char_info_back_talk", self)
	self.char_info_icon = xml:InitStatic("char_info_icon_talk", self.char_info_back)
	self.char_info_icon_comm = xml:InitStatic("char_info_icon_comm_talk", self.char_info_back)
	self.char_info_icon_rank = xml:InitStatic("char_info_icon_rank_talk", self.char_info_back)
	self.char_info_text = xml:InitStatic("char_info_text_talk", self.char_info_back)
	
	--//character info NPC
	self.char_info_back_npc = xml:InitStatic("char_info_back_npc_talk", self)
	self.char_info_icon_npc = xml:InitStatic("char_info_icon_npc_talk", self.char_info_back_npc)
	self.char_info_icon_comm_npc = xml:InitStatic("char_info_icon_comm_npc_talk", self.char_info_back_npc)
	self.char_info_icon_rank_npc = xml:InitStatic("char_info_icon_rank_npc_talk", self.char_info_back_npc)
	self.char_info_text_npc = xml:InitStatic("char_info_text_npc_talk", self.char_info_back_npc)
	
	--//to trade button
	self.to_trade_button = xml:Init3tButton("to_trade_button", self)
	name = "to_trade_button"
	self:Register(self.to_trade_button, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.ToTrade, self)
	self.to_trade_button:Show(false)	
	
	--//to repair button
	self.to_repair_button = xml:Init3tButton("to_repair_button", self)
	name = "to_repair_button"
	self:Register(self.to_repair_button, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.ToRepair, self)
	self.to_repair_button:Show(false)
end

function TalkOverlay:Update()
	CUIScriptWnd.Update(self)
end

function TalkOverlay:OnShow()
	self.target = level.get_second_talker()
	if not actor.inventory:is_active_slot_blocked() then
		actor:hide_weapon()
	end
	if is_osoznanie_mode(self.target) then
		self.char_info_back:Show(false)
		self.char_info_back_npc:Show(false)
		self.to_trade_button:Show(false)
	return end
		
	self.char_info_back:Show(true)
	self.char_info_back_npc:Show(true)
	self.to_trade_button:Show(self.target:is_trade_enabled())
	self.to_repair_button:Show(repair_manager.is_repairer(self.target))
	--log3("~repair_manager.is_repairer(self.target) %s", not not repair_manager.is_repairer(self.target))
	
	self:OnActorIconUpdate()
	self:OnNPCIconUpdate()
	self:SetCharacterText()
	self:SetCharacterTextNPC()	
end

function TalkOverlay:OnHide()
	self.target = false
	if actor.inventory:is_active_slot_blocked() then
		actor:restore_weapon()
	end
end

function TalkOverlay:OnShowTrade()
	self.char_info_back:Show(false)
	self.char_info_back_npc:Show(false)
	self.to_trade_button:Show(false)
end

function TalkOverlay:OnActorIconUpdate(icon)
	if not icon then
		icon = actor:get_character_icon()
	end
	self.char_info_icon:InitTexture(icon)
	self.char_info_icon_comm:InitTexture(community.get_icon_sect(actor:character_community()))
	self.char_info_icon_rank:InitTexture(ranks.get_icon_sect(actor))
end

function TalkOverlay:OnNPCIconUpdate()
	local npc_icon = self.target:get_character_icon()
	local icon = npc_icon and npc_icon or read_if_exists(sys_ini, "string", self.target:section(), "icon", nil)
	self.char_info_icon_npc:Show(icon)
	if not icon then
	return end
	self.char_info_icon_npc:InitTexture(icon)
	self.char_info_icon_comm_npc:InitTexture(community.get_icon_sect(self.target:character_community()))
	self.char_info_icon_rank_npc:InitTexture(ranks.get_icon_sect(self.target))
end

function TalkOverlay:SetCharacterText()
	local name = game.translate_string(actor:character_name())
	local rept_color = game.translate_string(reputation.get_obj_reputation_color(actor))
	local char_text = string.format("%s%s", rept_color, name)
	self.char_info_text:SetText(char_text)
end

function TalkOverlay:SetCharacterTextNPC()
	local name = game.translate_string(self.target:character_name())
	local rel_color = color_by_relation[self.target:relation(actor)]
	local char_text = string.format("%s%s", rel_color, name)
	self.char_info_text_npc:SetText(char_text)
end

function TalkOverlay:ToTrade()
	ui_actor_menu.ShowHideMenu("trade", level.get_second_talker())
	self.owner:Show(false)	
end

function TalkOverlay:ToRepair()
	ui_actor_menu.ShowHideMenu("repair", level.get_second_talker())
	self.owner:Show(false)	
end