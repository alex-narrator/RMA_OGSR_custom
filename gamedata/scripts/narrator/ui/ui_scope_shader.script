-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   	fun = this.on_zoom_in})
	sm:subscribe({signal = "on_actor_weapon_zoom_out",   	fun = this.on_zoom_out})
	sm:subscribe({signal = "on_actor_weapon_zoom_change",   fun = this.on_zoom_change})
	sm:subscribe({signal = "on_spawn",   					fun = this.on_spawn})
end

local DEBUG_DISABLED = false
local DEBUG_FFP_FACTOR = 0.34
local shader_scope_params = false

function on_zoom_in(weapon)	
	-- set_scope_params(0, 0, 0, 0)
	-- set_scope_color(0, 0, 0, 0)
	set_pda_params(vector():set(0,0,0)) --//якщо так не зробити то зникне марка коліматора у шейдері models_lfo_light_dot_weapons_simple
	shader_scope_params = false
	
	local wpn = weapon:get_weapon()
	
	set_weapon_params(weapon:get_gl_mode() and 1 or 0, wpn:aim_alt_mode() and 1 or 0, 0, 0)
	if wpn:aim_alt_mode() then
	return end
	
	local param_sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or weapon:section()
	
	local zoom = read_if_exists(sys_ini, "r_float", param_sect, "shader_scope_zoom", 0)
	if zoom == 0 then
	return end
	
	local vignette = read_if_exists(sys_ini, "r_float", param_sect, "shader_scope_vignette", 0)
	local chroma = read_if_exists(sys_ini, "r_float", param_sect, "shader_scope_chroma", 0)
	local mark_scale = read_if_exists(sys_ini, "r_float", param_sect, "shader_scope_mark_scale", 0)
	set_scope_params(zoom, vignette, chroma, mark_scale)
	
	--first focal plain mark, means then scope crosshair zooms with the image
	local ffp_mark = read_if_exists(sys_ini, "r_bool", param_sect, "shader_scope_mark_ffp", false)
	if ffp_mark then
		local ffp_factor = 1 / read_if_exists(sys_ini, "r_float", param_sect, "scope_zoom_factor", 1)
		shader_scope_params = {
			zoom = zoom,
			vignette = vignette,
			chroma = chroma,
			mark_scale = mark_scale,
			ffp_factor = ffp_factor,
		}
		set_scope_params(zoom, vignette, chroma, mark_scale * ffp_factor * weapon:get_weapon().zoom_factor)
	end
	
	local color = read_if_exists(sys_ini, "r_string", param_sect, "shader_scope_color", nil)
	color = split_string(color, ",")
	if not color then
	return end
	set_scope_color(color[1], color[2], color[3], color[4])
end

function on_zoom_out(weapon)
	set_scope_params(0, 0, 0, 0)
	set_scope_color(0, 0, 0, 0)
end

function on_zoom_change(weapon)
	set_weapon_params(weapon:get_gl_mode() and 1 or 0, weapon:get_weapon():aim_alt_mode() and 1 or 0, 0, 0)
	if not shader_scope_params then
	return end
	set_scope_params(shader_scope_params.zoom, shader_scope_params.vignette, shader_scope_params.chroma, shader_scope_params.mark_scale * shader_scope_params.ffp_factor * weapon:get_weapon().zoom_factor)
end

function on_spawn()
	set_scope_params(0, 0, 0, 0)
	set_scope_color(0, 0, 0, 0)
end