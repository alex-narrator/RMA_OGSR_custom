-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   	fun = this.on_zoom_in})
	sm:subscribe({signal = "on_actor_weapon_zoom_out",   	fun = this.on_zoom_out})
	sm:subscribe({signal = "on_death",   					fun = this.on_death})
end

local main_wnd = get_main_window()
local vision_objects = false
local subscribed = false
local DEBUG_DISABLE = false

function has_scope_vision(weapon)
	if DEBUG_DISABLE then
	return false end
	if weapon:get_gl_mode() then
	return false end
	local wpn = weapon:get_weapon()
	if not wpn:is_addon_attached(addon.scope) then
	return false end
	local sect = weapon:section()
	local scope_vision_sect = wpn:addon_attachable(addon.scope) and wpn:get_addon_name(addon.scope) or sect
	local scope_vision_forced = (scope_vision_sect ~= sect) and read_if_exists(sys_ini, "r_string", sect, scope_vision_sect.."_scope_vision", nil) or nil
	if read_if_exists(sys_ini, "r_bool", scope_vision_sect, "ignore_scope_vision", false) and not scope_vision_forced then
	return false end
	return true
end

function on_zoom_in(weapon)
	if not has_scope_vision(weapon) then
	return end
	
	level.add_call(
		function()
			return not wpn_IsRotatingToZoom(weapon) or not vision_objects
		end,
		function()
			if not vision_objects then
			return end
			if not subscribed then
				subscribed = {
					{ signal = "on_update", fun = this.on_update },
				}
			local sm = ogse_signals.get_mgr()
			for _, s in ipairs( subscribed ) do
				sm:subscribe( s )
			end
	end			
		end		
	)		
end

function on_zoom_out(weapon)
	if subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:unsubscribe( s )
		end
		subscribed = false
	end
end

function on_death(victim, killer)
	if victim:id() ~= actor:id() then
	return end
	if actor:active_item() then
		actor:drop_item(actor:active_item())
	end
end

function on_update()
end
