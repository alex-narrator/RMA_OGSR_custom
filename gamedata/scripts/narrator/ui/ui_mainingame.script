-- -*- mode: lua; coding: windows-1251-dos -*-
local OVERLAY_XML = "script_overlays\\mainingame_overlay.xml"
local overlay = nil
local subscribed = false
local DYNAMIC_SHOW = true
local DEBUG_WARNING_SHOW = false
local USE_LUMINOCITY = false --read_if_exists(sys_ini, "r_bool", "features", "use_luminicity")

local MOTION_TEXTURE_PREFIX = "ui_hud_soldier_"
local MOTION_TEXTURE_POSTFIX = "_warning"

local SHOW_FPS = false

local relation_color = {
	[0] = GetARGB(255, 50, 255, 0),
	[1] = GetARGB(255, 255, 200, 0),
	[2] = GetARGB(255, 255, 0, 0),
}
local dead_color = GetARGB(255, 168, 168, 168)

function visibility()
	return USE_LUMINOCITY and actor:get_luminocity() or actor_obj:get_visibility()
end

function attach(sm)
	sm:subscribe({signal = "on_spawn",   			fun = this.create_window})
	sm:subscribe({signal = "on_destroy",   			fun = this.destroy_window})
end

function get_window()
	return overlay
end

function create_window()
	if not overlay then
		overlay = MainIngameOverlay(get_main_window())
	end
end

function destroy_window()
	if overlay then
		overlay:DetachWnd()
		overlay = nil
	end
end

function get_slot_selector()
	return overlay.slot_selector
end

class "MainIngameOverlay" (CUIScriptWnd)

function MainIngameOverlay:__init(owner) super()
	self.owner = owner
	self:InitControls()
	self:Subscribe()
	self.pickup_item = nil
end

function MainIngameOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_quick_item_set", self = self, fun = self.SetPanelItemsNeedUpdate},
			--{signal = "on_quick_item_use", self = self, fun = self.UpdatePanelItems},
			{signal = "on_drop", self = self, fun = self.TryUpdatePanelItems},
			--{signal = "on_use", self = self, fun = self.UpdateQuickSlotsAndPanels},
			--{signal = "on_item_to_loadout", self = self, fun = self.UpdatePanelItems},
			--{signal = "on_item_from_loadout", self = self, fun = self.UpdatePanelItems},
			--{signal = "on_slot", self = self, fun = self.UpdatePanelItems},
			{signal = "on_ruck", self = self, fun = self.TryUpdatePanelItems},
			{signal = "on_belt", self = self, fun = self.SetPanelItemsNeedUpdate},
			{signal = "on_loadout_update_count", self = self, fun = self.SetPanelItemsNeedUpdate},
			{signal = "on_actor_menu_hide", self = self, fun = self.SetPanelItemsNeedUpdate},			
			{signal = "on_hud_state_switch", self = self, fun = self.OnHudStateSwitch},
			{signal = "on_pickup_item_set", self = self, fun = self.OnPickUpItemSet},
			{signal = "on_key_press", self = self, fun = self.OnKeyPress},
			{signal = "on_key_release", self = self, fun = self.OnKeyRelease},
			--//
			{signal = "on_article", self = self, fun = self.ShowFlashingIcon},
			{signal = "on_task", self = self, fun = self.ShowFlashingIcon},
			{signal = "on_pda_show", self = self, fun = self.HideFlashingIcon},
			
			{signal = "on_task_stage", self = self, fun = self.OnTaskUpdate},
			
			{signal = "on_slot_selector_show", self = self, fun = self.ShowActiveTask},
			{signal = "on_slot_selector_hide", self = self, fun = self.HideActiveTask},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function MainIngameOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function MainIngameOverlay:DetachWnd()
	self.minimap_back:DetachChild(self.compass)
	self:Unsubscribe()
	self:ClearCallbacks()
	self.owner:DetachChild(self)
end

function MainIngameOverlay:InitControls()
	self.owner:AttachChild(self)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	self:Show(true)
	
	self.screen_debug = CUIStatic()
	self.screen_debug:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	self:AttachChild(self.screen_debug)
	-- self.screen_debug:InitTexture("ui\\circle_debug")
	-- self.screen_debug:SetStretchTexture(true)	
	-- local dbg_size = 35
	-- self.screen_debug:SetWidth(dbg_size * get_current_kx())
	-- self.screen_debug:SetHeight(dbg_size)
	-- self.screen_debug:SetWndPos(UI_BASE_WIDTH / 2 - self.screen_debug:GetWidth() / 2, UI_BASE_HEIGHT / 2 - self.screen_debug:GetHeight() / 2)
	
	self.blood_overlay = CUIStatic()
	self.blood_overlay:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	self.blood_overlay:InitTexture("ui_blood_overlay")
	self.blood_overlay:SetStretchTexture(true)
	self:AttachChild(self.blood_overlay)	
	
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	
	self.fps_counter = xml:InitStatic("fps_counter", self)
	
	self.actor_params = xml:InitStatic("actor_params", self)
	self.conditions = {
		["health"] 		= { condition = function() return actor.health end },
		["power"] 		= { condition = function() return actor.power end },
		["stamina"] 	= { condition = function() return stamina.get_val() end },
		["visibility"] 	= { condition = function() return visibility() end },
		["noise"] 		= { condition = function() return actor_obj.sound_noise end },
	}
	for k,v in pairs(self.conditions) do
		v.back = xml:InitStatic("actor_params:"..k, self.actor_params)
		v.static = xml:InitStatic("actor_params:"..k..":static", v.back)
		v.bar = xml:InitProgressBar("actor_params:"..k..":progress_bar", v.back)
		v.show_val = xml:ReadAttribFlt("actor_params:"..k, "show_val", 0)
	end
	
	self.conditions_circles = {
		["health_circle"] 		= { condition = function() return actor.health end},
		["power_circle"] 		= { condition = function() return actor.power end},
		["stamina_circle"] 		= { condition = function() return stamina.get_val() end},
	}
	for k,v in pairs(self.conditions_circles) do
		v.back = xml:InitStatic("actor_params:"..k, self.actor_params)
		v.icon = xml:InitStatic("actor_params:"..k..":icon", v.back)
		v.progress_shape = xml:InitProgressShape("actor_params:"..k..":progress_shape", v.back)
		v.show_val = xml:ReadAttribFlt("actor_params:"..k, "show_val", 1)
	end
	
	--//car condition bar
	self.car = xml:InitStatic("actor_params:car", self.actor_params)
	self.car_static = xml:InitStatic("actor_params:car:static", self.car)
	self.car_bar = xml:InitProgressBar("actor_params:car:progress_bar", self.car)
	self.car_color_def = self.car_static:GetColor()
	self.car_color_engine_on = GetARGB(255, 0, 255, 0)
	
	--//stationary machinegun overheat bar
	self.mgun = xml:InitStatic("actor_params:mgun", self.actor_params)
	self.mgun_static = xml:InitStatic("actor_params:mgun:static", self.mgun)
	self.mgun_overheat_bar = xml:InitProgressBar("actor_params:mgun:progress_bar", self.mgun)
	
	--//motion icon
	self.motion_icon = xml:InitStatic("motion_icon", self)
	self.current_motion_texture = false

	--// quick slots
	self.quick_slots = xml:InitStatic("quick_slots", self)
	self.quick_slots.show_on_gear = (xml:ReadAttribInt("quick_slots", "show_on_gear", 0) > 0) and true or false

	--//slot colors
	self.quick_color_has_item 	= GetARGB(255, 255, 255, 255)
	self.quick_color_no_item 	= GetARGB(120, 255, 255, 255)

	local pos_x = xml:ReadAttribFlt("quick_slots:slot", "x", 0)
	local pos_y = xml:ReadAttribFlt("quick_slots:slot", "y", 0)	
	local horz = (xml:ReadAttribInt("quick_slots", "horz", 1) > 0) and true or false
	local indent = xml:ReadAttribFlt("quick_slots", "indent", 0)

	self.slots = {}
	for i=0,3 do
		local s = xml:InitStatic("quick_slots:slot", self.quick_slots)
		self.slots[i] = s
		s:SetText(game.translate_string("ui_quick_slot_"..i))
		s:SetWndPos(pos_x, pos_y)
		if horz then
			pos_x = pos_x + s:GetWidth() + indent
		else
			pos_y = pos_y + s:GetHeight() + indent
		end
		s.icon = xml:InitStatic("quick_slots:slot:icon", s)
		s.count = xml:InitStatic("quick_slots:slot:count", s)
		self:DrawSlotIcon(i)
	end
	
	local tmp_tbl, def_font, def_color = nil, "letterica16", "255, 255, 255, 255"
	--// slot panel
	-- self.slot_panel = xml:InitStatic("slot_panel", self)
	-- self.slot_panel.scale = xml:ReadAttribFlt("slot_panel", "scale", 1)
	-- self.slot_panel.indent = xml:ReadAttribFlt("slot_panel", "indent", 0)
	-- self.slot_panel.vertical = xml:ReadAttribInt("slot_panel", "vertical", 0) > 0 and true or false
	-- self.slot_panel.font = xml:ReadAttrib("slot_panel", "font", def_font)
	-- tmp_tbl = split_string(xml:ReadAttrib("slot_panel", "text_color", def_color), ",")
	-- self.slot_panel.text_color = GetARGB(tmp_tbl[1], tmp_tbl[2], tmp_tbl[3], tmp_tbl[4])
	-- tmp_tbl = split_string(xml:ReadAttrib("slot_panel", "text_offset", "0,0"), ",")
	-- self.slot_panel.text_offset = {x = tmp_tbl[1], y = tmp_tbl[2]}
	-- self.slot_panel.slots = split_string(xml:ReadAttrib("slot_panel", "slots", ""), ",")
	-- self.slot_panel.align_center = xml:ReadAttribInt("slot_panel", "center", 0) > 0 and true or false
	--// belt panel
	self.belt_panel = xml:InitStatic("belt_panel", self)
	self.belt_panel.scale = xml:ReadAttribFlt("belt_panel", "scale", 1)
	self.belt_panel.indent = xml:ReadAttribFlt("belt_panel", "indent", 0)
	self.belt_panel.vertical = xml:ReadAttribInt("belt_panel", "vertical", 0) > 0 and true or false
	self.belt_panel.group_similar = xml:ReadAttribInt("belt_panel", "group_similar", 0) > 0 and true or false
	self.belt_panel.font = xml:ReadAttrib("belt_panel", "font", def_font)
	tmp_tbl = split_string(xml:ReadAttrib("belt_panel", "text_color", def_color), ",")
	self.belt_panel.text_color = GetARGB(tmp_tbl[1], tmp_tbl[2], tmp_tbl[3], tmp_tbl[4])
	tmp_tbl = split_string(xml:ReadAttrib("belt_panel", "text_offset", "0,0"), ",")
	self.belt_panel.text_offset = {x = tmp_tbl[1], y = tmp_tbl[2]}
	self.belt_panel.align_center = xml:ReadAttribInt("belt_panel", "center", 0) > 0 and true or false
	self.belt_panel.hide_in_quick_slot = xml:ReadAttribInt("belt_panel", "hide_in_quick_slot", 0) > 0 and true or false
	self.belt_panel.hide_modules = xml:ReadAttribInt("belt_panel", "hide_modules", 0) > 0 and true or false
	--// loadout panel
	-- self.loadout_panel = xml:InitStatic("loadout_panel", self)
	-- self.loadout_panel.scale = xml:ReadAttribFlt("loadout_panel", "scale", 1)
	-- self.loadout_panel.indent = xml:ReadAttribFlt("loadout_panel", "indent", 0)
	-- self.loadout_panel.vertical = xml:ReadAttribInt("loadout_panel", "vertical", 0) > 0 and true or false
	-- self.loadout_panel.group_similar = xml:ReadAttribInt("loadout_panel", "group_similar", 0) > 0 and true or false
	-- self.loadout_panel.font = xml:ReadAttrib("loadout_panel", "font", def_font)
	-- tmp_tbl = split_string(xml:ReadAttrib("loadout_panel", "text_color", def_color), ",")
	-- self.loadout_panel.text_color = GetARGB(tmp_tbl[1], tmp_tbl[2], tmp_tbl[3], tmp_tbl[4])
	-- tmp_tbl = split_string(xml:ReadAttrib("loadout_panel", "text_offset", "0,0"), ",")
	-- self.loadout_panel.text_offset = {x = tmp_tbl[1], y = tmp_tbl[2]}
	-- self.loadout_panel.align_center = xml:ReadAttribInt("loadout_panel", "center", 0) > 0 and true or false
	--// booster panel
	self.booster_panel = xml:InitStatic("booster_panel", self)
	self.booster_panel.scale = xml:ReadAttribFlt("booster_panel", "scale", 1)
	self.booster_panel.indent = xml:ReadAttribFlt("booster_panel", "indent", 0)
	self.booster_panel.vertical = xml:ReadAttribInt("booster_panel", "vertical", 0) > 0 and true or false
	self.booster_panel.font = xml:ReadAttrib("booster_panel", "font", def_font)
	tmp_tbl = split_string(xml:ReadAttrib("booster_panel", "text_color", def_color), ",")
	self.booster_panel.text_color = GetARGB(tmp_tbl[1], tmp_tbl[2], tmp_tbl[3], tmp_tbl[4])
	tmp_tbl = split_string(xml:ReadAttrib("booster_panel", "text_offset", "0,0"), ",")
	self.booster_panel.text_offset = {x = tmp_tbl[1], y = tmp_tbl[2]}
	self.booster_panel.align_center = xml:ReadAttribInt("booster_panel", "center", 0) > 0 and true or false
	self:UpdatePanelItems()
	
	--//active item info
	self.active_item = xml:InitStatic("active_item", self)
	self.active_item_icon = xml:InitStatic("active_item:icon", self.active_item)
	self.active_item_icon.scale = xml:ReadAttribFlt("active_item:icon", "scale", 1)
	self.active_item_icon.indent = xml:ReadAttribFlt("active_item:icon", "indent", 5)
	self.active_item_icon_2 = xml:InitStatic("active_item:icon", self.active_item)
	self.active_item_icon_3 = xml:InitStatic("active_item:icon", self.active_item)
	self.ammo_counter = xml:InitStatic("active_item:ammo_counter", self.active_item)
	self.zoom_counter = xml:InitStatic("active_item:zoom_counter", self.active_item)
	self.zoom_progress = xml:InitProgressBar("active_item:zoom_counter:progress_bar", self.zoom_counter)
	self.zoom_progress_icon = xml:InitStatic("active_item:zoom_counter:progress_bar:icon", self.zoom_counter)
	
	--//missile throw progressshape
	self.missile_throw = xml:InitProgressShape("throw_progress", self)
	self.missile_text = xml:InitStatic("throw_text", self)
	self.throw_force = 0
	
	--//pickup item icon
	self.pickup_item_icon = xml:InitStatic("pick_up_item", self)
	self.pickup_item_icon.size = vector2():set(self.pickup_item_icon:GetWidth(), self.pickup_item_icon:GetHeight())
	self.pickup_item_icon.offset = vector2():set(xml:ReadAttribInt("pick_up_item", "x", 0), xml:ReadAttribInt("pick_up_item", "y", 0))
	
	--//warning icons
	self.warning_icons = ui_warning_icons.WarningIcons(xml, self)
	
	--//classic top view compass
	self.minimap = self.owner:GetStatic("minimap")
	self.minimap_back = self.owner:GetStatic("minimap:background")
	self.compass = xml:InitStatic("compass_top_view", self.minimap_back)
	self.compass_arrow = xml:InitStatic("compass_top_view:arrow", self.compass)
	self.dist_text = xml:InitStatic("compass_top_view:dist_text", self.compass)
	self.time_text = xml:InitStatic("compass_top_view:time_text", self.compass)
	
	--//modern front view compass
	self.compass_modern = xml:InitStatic("compass_front_view", self)
	local compass_params = {}
	compass_params.marker_size = split_string(xml:ReadAttrib("compass_front_view", "mark_size", "8,10"), ",", true)
	compass_params.selected_marker_size = split_string(xml:ReadAttrib("compass_front_view", "selected_mark_size", "8,10"), ",", true)
	compass_params.other_marker_size = split_string(xml:ReadAttrib("compass_front_view", "other_mark_size", "8,10"), ",", true)
	compass_params.scale_texture_w = xml:ReadAttribInt("compass_front_view", "scale_texture_w", 2400)
	compass_params.scale_texture_h = xml:ReadAttribInt("compass_front_view", "scale_texture_h", 100)
	compass_params.x_to_angle_k = xml:ReadAttribInt("compass_front_view", "x_to_angle_k", 10)
	compass_params.vertical_mark_add = xml:ReadAttribInt("compass_front_view", "vertical_mark_add", 16)
	compass_params.hide_point_off_bound = xml:ReadAttribInt("compass_front_view", "hide_point_off_bound", 1) > 0 and true or false
	compass_params.hide_quest_point_off_bound = xml:ReadAttribInt("compass_front_view", "hide_quest_point_off_bound", 1) > 0 and true or false
	compass_params.distance_mark_scale = xml:ReadAttribInt("compass_front_view", "distance_mark_scale", 0) > 0 and true or false
	self.compass_modern.params = compass_params
    self.compass_modern_scale = xml:InitStatic("compass_front_view:scale", self.compass_modern)
    self.compass_modern_line = xml:InitStatic("compass_front_view:line", self.compass_modern)	
	
	--//active task
	self.active_task = xml:InitStatic("active_task", self)
	self.active_task:Show(false)
	self.active_task_show_time = xml:ReadAttribInt("active_task", "show_time", 5)
	self.task_icon = xml:InitStatic("active_task:task_icon", self.active_task)
	self.task_header = xml:InitStatic("active_task:task_header", self.active_task)
	self.task_header.base_color = self.task_header:GetTextColor()
	self.objective_header = xml:InitStatic("active_task:objective_header", self.active_task)
	self.objective_header.base_color = self.objective_header:GetTextColor()
	self.task_state_icon = xml:InitStatic("active_task:task_state_icon", self.active_task)
	
	--//slot selector
	self.slot_selector = ui_slot_selector.SlotSelectorOverlay()
	
	--//quick addon
	self.quick_addon = ui_quick_addon.QuickAddonOverlay()
	
	--//target tip
	self.target_tip = xml:InitStatic("target_tip", self)
	self.target_tip.offset = xml:ReadAttrib("target_tip", "offset", "center")
	self.target_tip.offset_shift = split_string(xml:ReadAttrib("target_tip", "offset_shift", "0,0"), ",", true)
	self.tip_cursor = xml:InitStatic("tip_cursor", self)
	local offset = ui_inv_utils.GetOffset("center", self.tip_cursor, self.owner)
	self.tip_cursor:SetWndPos(offset.x, offset.y)
	
	self.flashing_icon = xml:InitStatic("flashing_icon", self)
	self.flashing_icon:Show(false)
end

function MainIngameOverlay:UpdateConditions()
	for k,v in pairs(self.conditions) do
		v.bar:SetProgressPos(v.condition())
		v.back:Show(v.condition() <= v.show_val or not DYNAMIC_SHOW)
		--log3("cond %s val %s", k, v.condition())
	end
	
	for k,v in pairs(self.conditions_circles) do
		v.progress_shape:SetPos(v.condition())
		v.progress_shape:Show(v.condition() <= v.show_val or not DYNAMIC_SHOW)
	end
	
	
	self.blood_overlay:SetColor(GetARGB(255 * (1 - actor.health), 255, 255, 255))
end

function MainIngameOverlay:UpdateMotionIcon()
	self.motion_icon:Show(not actor:get_holder())
	local state = "normal"
	if actor_obj:is_actor_climb() or actor_obj:is_actor_climbing() then
		state = "climb"
	elseif actor_obj:is_actor_crouch() or actor_obj:is_actor_crouching() then
		state = "crouch"
	elseif actor_obj:is_actor_creep() or actor_obj:is_actor_creeping() then
		state = "creep"
	elseif actor_obj:is_actor_sprinting() then
		state = "sprint"		
	elseif (actor_obj:is_actor_moving() and not actor_obj:is_actor_running()) or actor_obj:is_zoom_aiming_mode() then
		state = "run"
	end
	local texture = MOTION_TEXTURE_PREFIX..state
	if self.current_motion_texture ~= texture then
		self.motion_icon:InitTexture(texture)
		self.current_motion_texture = texture
		--log3("~current state %s", state)
	end
	
	--//empty hands sprint anim
	-- local play_sprint = state == "sprint" and not actor:active_item() and not actor:active_device()
	-- if play_sprint and not self.sprint_anim_playing then
		-- self.sprint_anim_playing = true
		-- game.play_hud_motion(2, "sprint_hud", "anm_sprint", true, 1, false)
	-- elseif not play_sprint and self.sprint_anim_playing then
		-- self.sprint_anim_playing = false
		-- if actor:active_device() then
			-- local hud_sect = get_hud_sect(actor:active_device())
			-- local anm_show = read_if_exists(sys_ini, "r_string", hud_sect, "anm_show", "anm_show_16x9")
			-- game.play_hud_motion(2, hud_sect, anm_show, false, 1, false)
		-- end
		-- game.stop_hud_motion()
	-- end
end

function MainIngameOverlay:TryUpdatePanelItems(item, prev_place)
	if prev_place == item_place.belt or quick_slots.is_in_quick_slot(item) then 
		self:SetPanelItemsNeedUpdate()
	end
end

function MainIngameOverlay:DrawSlotIcon(slot_num)
	local s = self.slots[slot_num]
	local sect = quick_slots.get_item_sect(slot_num)
	local show_icon = sect ~= ""
	s.icon:Show(show_icon)
	if show_icon then
		CIconParams(sect):set_shader(s.icon)
	end	
	
	local count = quick_slots.get_item_count(slot_num)
	local count_text = string.format("x%s", count)
	s.count:SetText(count_text)
	s.count:Show(count > 0)

	s.icon:SetColor(count > 0 and self.quick_color_has_item or self.quick_color_no_item)
end

function MainIngameOverlay:UpdateQuickSlots()
	for i=0,3 do
		self:DrawSlotIcon(i)
	end
end

function MainIngameOverlay:SetPanelItemsNeedUpdate()
	self.update_panel_items = true
end

function MainIngameOverlay:UpdatePanelItems()
	if level.is_removing_objects() then
	return end
	
	if not self.update_panel_items then
	return end
	self.update_panel_items = false

	local item, params, item_st, text
	local pos = vector2():set(0,0)
	--// slots
	-- self.slot_panel:DetachAll()
	-- for _,i in ipairs(self.slot_panel.slots) do
		-- item = actor:item_in_slot(i)
		-- if item and (tonumber(i) ~= BACKPACK_SLOT or read_if_exists(sys_ini, "r_bool", item:section(), "quick_drop", false)) then
			-- params = CIconParams(item:section())
			-- item_st = CUIStatic()
			-- params:set_shader(item_st)
			-- item_st:SetWidth(params.grid_width * CELL_W * self.slot_panel.scale * get_current_kx())
			-- item_st:SetHeight(params.grid_height * CELL_H * self.slot_panel.scale)
			-- ui_inv_utils.AttachPanelIcons(item, item_st)
			-- item_st:SetWndPos(pos.x, pos.y)
			-- text = "ui_use_slot_"..i
			-- if tonumber(i) == TORCH_SLOT then
				-- local torch = torch.get_light_sect(item)
				-- local nvd = nvd.get_nvd_params(item:section())
				-- if not (torch and nvd) then
					-- if torch then
						-- text = "ui_switch_torch"
					-- elseif nvd then
						-- text = "ui_switch_night_vision"
					-- end
				-- end
			-- end
			-- item_st:SetText(game.translate_string(text))
			-- item_st:SetFont(GetFontCustom(self.slot_panel.font))
			-- item_st:SetTextColor(self.slot_panel.text_color)
			-- item_st:SetTextPos(self.slot_panel.text_offset.x, self.slot_panel.text_offset.y)
			-- if self.slot_panel.vertical then
				-- pos.y = pos.y + item_st:GetHeight() + self.slot_panel.indent
			-- else
				-- pos.x = pos.x + item_st:GetWidth() + self.slot_panel.indent
			-- end
			-- self.slot_panel:AttachChild(item_st)
		-- end
	-- end
	-- if self.slot_panel.align_center then
		-- local orig_pos = self.slot_panel:GetWndPos()
		-- if self.slot_panel.vertical then
			-- self.slot_panel:SetHeight(pos.y)
			-- self.slot_panel:SetWndPos(orig_pos.x, UI_BASE_HEIGHT / 2 - self.slot_panel:GetHeight() / 2)
		-- else
			-- self.slot_panel:SetWidth(pos.x)
			-- self.slot_panel:SetWndPos(UI_BASE_WIDTH / 2 - self.slot_panel:GetWidth() / 2, orig_pos.y)
		-- end
	-- end
	--// belt
	self.belt_panel:DetachAll()
	local items = {}
	pos = vector2():set(0,0)
	for i = 0, actor:belt_count() - 1 do
		item = actor:item_on_belt(i)
		if item and (not self.belt_panel.hide_modules or not loadout.is_module(item)) then
			ui_inv_utils.try_add_to_list(item, items, self.belt_panel.group_similar)
		end
	end
	for k,v in pairs(loadout.get_loaded_items()) do
		item = level.object_by_id(k)
		if item and (not self.belt_panel.hide_in_quick_slot or not quick_slots.is_in_quick_slot(item)) then
			ui_inv_utils.try_add_to_list(item, items, self.belt_panel.group_similar)
		end
	end	
	--table.sort(items,ui_inv_utils.sort_by_size_type)
	table.sort(items,ui_inv_utils.sort_by_quick_slot_num)
	for k, v in pairs(items) do
		params = CIconParams(v.item:section())
		item_st = CUIStatic()
		params:set_shader(item_st)
		item_st:SetWidth(params.grid_width * CELL_W * self.belt_panel.scale * get_current_kx())
		item_st:SetHeight(params.grid_height * CELL_H * self.belt_panel.scale)
		ui_inv_utils.AttachPanelIcons(v.item, item_st, v.count)
		item_st:SetWndPos(pos.x, pos.y)
		
		if self.belt_panel.vertical then
			pos.y = pos.y + item_st:GetHeight() + self.belt_panel.indent
		else
			pos.x = pos.x + item_st:GetWidth() + self.belt_panel.indent
		end
		self.belt_panel:AttachChild(item_st)
	end
	if self.belt_panel.align_center then
		local orig_pos = self.belt_panel:GetWndPos()
		if self.belt_panel.vertical then
			self.belt_panel:SetHeight(pos.y)
			self.belt_panel:SetWndPos(orig_pos.x, UI_BASE_HEIGHT / 2 - self.belt_panel:GetHeight() / 2)
		else
			self.belt_panel:SetWidth(pos.x)
			self.belt_panel:SetWndPos(UI_BASE_WIDTH / 2 - self.belt_panel:GetWidth() / 2, orig_pos.y)
		end
	end		
end

function MainIngameOverlay:UpdatePanelBoosters()
	local item, params, item_st, text
	--// boosters
	self.booster_panel:DetachAll()
	local pos = vector2():set(0,0)
	for b_sect,b_time in pairs(boosters.get_booster_sections()) do
		params = CIconParams(b_sect)
		item_st = CUIStatic()
		params:set_shader(item_st)
		item_st:SetWidth(params.grid_width * CELL_W * self.booster_panel.scale * get_current_kx())
		item_st:SetHeight(params.grid_height * CELL_H * self.booster_panel.scale)
		--ui_inv_utils.AttachPanelIcons(item, item_st)
		item_st:SetWndPos(pos.x, pos.y)
		text = string.format("%.f %s", b_time, game.translate_string("st_time_minute"))
		item_st:SetText(game.translate_string(text))
		item_st:SetFont(GetFontCustom(self.booster_panel.font))
		item_st:SetTextColor(self.booster_panel.text_color)
		item_st:SetTextPos(self.booster_panel.text_offset.x, self.booster_panel.text_offset.y)
		if self.booster_panel.vertical then
			pos.y = pos.y + item_st:GetHeight() + self.booster_panel.indent
		else
			pos.x = pos.x + item_st:GetWidth() + self.booster_panel.indent
		end
		self.booster_panel:AttachChild(item_st)
	end
	if self.booster_panel.align_center then
		local orig_pos = self.booster_panel:GetWndPos()
		if self.booster_panel.vertical then
			self.booster_panel:SetHeight(pos.y)
			self.booster_panel:SetWndPos(orig_pos.x, UI_BASE_HEIGHT / 2 - self.booster_panel:GetHeight() / 2)
		else
			self.booster_panel:SetWidth(pos.x)
			self.booster_panel:SetWndPos(UI_BASE_WIDTH / 2 - self.booster_panel:GetWidth() / 2, orig_pos.y)
		end
	end	
end

function MainIngameOverlay:UpdateActiveItem()
	local act_item = actor:active_item()
	local act_device = actor:active_device()
	self.active_item:Show((act_item or act_device) and SHOW_ACTIVE_ITEM_INFO)

	if not self.active_item:IsShown() then
	return end
		
	local params, params_2, params_3
	local show_sect, show_sect_2, show_sect_3
	local scale = self.active_item_icon.scale
	local scale_2 = self.active_item_icon.scale
	local scale_3 = self.active_item_icon.scale
	local indent = self.active_item_icon.indent
	
	local wpn = act_item and act_item:get_weapon_m()
	self.active_item_icon:Show(false)
	self.active_item_icon_2:Show(false)
	self.active_item_icon_3:Show(false)
	
	self.active_item:SetText("")
	self.ammo_counter:SetText("")
	self.active_item_icon:SetText("")
	
	local text, val = "", ""
	
	if wpn and get_clsid(act_item) ~= clsid.wpn_binocular_s then
		self.active_item_icon:Show(act_item:get_ammo_in_magazine() > 0)
		self.active_item_icon_2:Show(wpn:is_addon_attached(addon.magazine))
		
		show_sect = get_cur_ammo_sect(act_item)
		show_sect_2 = wpn:is_addon_attached(addon.magazine) and wpn:get_addon_name(addon.magazine) or nil
		
		params = CIconParams(show_sect)
		
		if show_sect_2 and self.active_item_icon_2:IsShown() then
			params_2 = CIconParams(show_sect_2)
		end
		
		val = game.translate_string(read_if_exists(sys_ini, "r_string", show_sect, "inv_name_short", get_inv_name(show_sect)))
		if act_item:get_ammo_in_magazine() == 0 then
			val = game.translate_string("st_not_loaded")
		end
		text = string.format("%s", val)
		if has_fire_modes(act_item) or act_item:get_gl_mode() then
			text = string.format("%s %s", val, get_fire_mode_str(act_item))
		end
		self.active_item:SetText(text)
		
		val = act_item:get_ammo_in_magazine()
		text = string.format("[%s]", val)
		self.ammo_counter:SetText(text)
	elseif act_item then
		self.active_item_icon:Show(true)
		show_sect = act_item:section()
		
		if act_item:is_grenade() then
			local grenade_count = 0
			function perform_action(dummy, item)
				if item:is_grenade() and loadout.can_remove(item) then
					grenade_count = grenade_count + 1
				end
			end	
			actor:iterate_ruck(perform_action, nil)
			if grenade_count > 0 then
				val = grenade_count
				text = string.format("%s", val)
			end
		end
		
		if get_clsid(act_item) == clsid.obj_bolt and LIMITED_BOLTS then
			local bolt_count = 0
			function perform_action(dummy, item)
				if get_clsid(item) == clsid.obj_bolt then
					bolt_count = bolt_count + 1
				end
			end	
			actor:iterate_ruck(perform_action, nil)
			if bolt_count > 0 then
				val = bolt_count
				text = string.format("%s", val)
			end
		end
		
		if act_item:get_pda() and is_power_device(act_item) then
			self.active_item_icon:SetText(string.format("%.f%s", act_item:binded_object():get_power_level() * 100, "%"))
		end
		
		self.ammo_counter:SetText(text)
		params = CIconParams(show_sect)
		self.active_item:SetText(game.translate_string(get_inv_name_short(show_sect)))
	end
	
	if self.active_item_icon:IsShown() then
		params:set_shader(self.active_item_icon)
		if params.grid_height > 1 or params.grid_width > 2 then
			scale = scale * 0.75
		end
		self.active_item_icon:SetWidth(params.grid_width * scale * CELL_W * get_current_kx())
		self.active_item_icon:SetHeight(params.grid_height * scale * CELL_H)
	end
	self.ammo_counter:SetWndPos(self.active_item_icon:GetWidth() + indent, self.ammo_counter:GetWndPos().y)
	
	if self.active_item_icon_2:IsShown() then
		params_2:set_shader(self.active_item_icon_2)
		if params_2.grid_height > 1 or params_2.grid_width > 2 then
			scale_2 = scale_2 * 0.75
		end
		self.active_item_icon_2:SetWidth(params_2.grid_width * scale_2 * CELL_W * get_current_kx())
		self.active_item_icon_2:SetHeight(params_2.grid_height * scale_2 * CELL_H)
		local pos = self.ammo_counter:GetWndPos()
		if self.active_item_icon:IsShown() then
			pos = self.active_item_icon:GetWndPos()
		end
		pos.x = pos.x - self.active_item_icon_2:GetWidth() - indent
		self.active_item_icon_2:SetWndPos(pos.x, pos.y)
	end
	
	self.active_item_icon_3:Show(act_device)
	if self.active_item_icon_3:IsShown() then
		show_sect_3 = act_device:section()
		params_3 = CIconParams(show_sect_3)
		params_3:set_shader(self.active_item_icon_3)
		if params_3.grid_height > 1 or params_3.grid_width > 2 then
			scale_3 = scale * 0.75
		end		
		self.active_item_icon_3:SetWidth(params_3.grid_width * scale_3 * CELL_W * get_current_kx())
		self.active_item_icon_3:SetHeight(params_3.grid_height * scale_3 * CELL_H)
		local pos = self.ammo_counter:GetWndPos()
		if self.active_item_icon:IsShown() then
			pos = self.active_item_icon:GetWndPos()
		end
		if self.active_item_icon_2:IsShown() then
			pos = self.active_item_icon_2:GetWndPos()
		end
		pos.x = pos.x - self.active_item_icon_3:GetWidth() - indent
		self.active_item_icon_3:SetWndPos(pos.x, pos.y)
		local text = ""
		if is_power_device(act_device) then
			self.active_item_icon_3:SetText(string.format("%.f%s", act_device:binded_object():get_power_level() * 100, "%"))
		end
		if self.active_item:GetText() == "" then
			self.active_item:SetText(game.translate_string(get_inv_name_short(show_sect_3)))
		end
	end
	
	self.zoom_counter:Show(wpn and wpn:is_addon_attached(addon.scope) and wpn.zoom_mode and wpn.zoom_rotation_factor == 1)
	if self.zoom_counter:IsShown() then
		local zoom = wpn:second_vp_enabled() and wpn:second_vp_zoom() or wpn.zoom_factor--wpn.zoom_factor
		-- if zoom > 2 then
			-- zoom = math.floor(zoom+0.1)
		-- end
		self.zoom_counter:Show(zoom > 1)
		text = string.format("%s %.1fx", game.translate_string("st_zoom"), zoom)--string.format(zoom > 2 and "%s %.0fx" or "%s %.1fx", game.translate_string("st_zoom"), zoom)
		self.zoom_counter:SetText(text)
		local zoom_params = get_wpn_scope_zoom_params(act_item)
		self.zoom_progress:Show(zoom_params and #zoom_params>1)
		self.zoom_progress_icon:Show(self.zoom_progress:IsShown())
		if self.zoom_progress:IsShown() then
			local range = zoom_params[2] - zoom_params[1]
			zoom = zoom - zoom_params[1]
			zoom = zoom/range
			self.zoom_progress:SetProgressPos(zoom)		
		end	
	end
end

function MainIngameOverlay:UpdateCarPanel()
	local car = actor:get_holder() and actor:get_holder():get_car()
	self.car:Show(car)
	if car then
		self.car_bar:SetProgressPos(car:GetfHealth())
		self.car_static:SetColor(car:IsEngineOn() and self.car_color_engine_on or self.car_color_def)
	end
end

function MainIngameOverlay:UpdateMountedWpnPanel()
	local mgun = nil
	if actor:get_holder() and (get_clsid(actor:get_holder()) == clsid.wpn_mounted or get_clsid(actor:get_holder()) == clsid.wpn_stat_mgun) then
		mgun = actor:get_holder()
	end
	local binded_mgun = mgun and mgun:binded_object() or nil
	self.mgun:Show(binded_mgun)
	if binded_mgun then
		self.mgun_overheat_bar:SetProgressPos(binded_mgun:get_overheat())
	end
end

function MainIngameOverlay:UpdateMissileThrow()
	local val = 0
	local act_item = actor:active_item()
	if act_item and act_item:is_missile() and act_item:get_hud_item_state() == global_flags.eReady then
		local min_force = sys_ini:r_float(act_item:section(), "force_min")
		local max_force = sys_ini:r_float(act_item:section(), "force_max")
		self.throw_force = self.throw_force + device().f_time_delta * get_console():get_float("missile_force_grow_speed")
		self.throw_force = math.clamp(self.throw_force, min_force, max_force)
		
		val = (self.throw_force - min_force) / (max_force - min_force)
	else
		self.throw_force = 0
		val = 0
	end
	self.missile_throw:Show(val>0)
	self.missile_throw:SetPos(val)
	self.missile_text:Show(val>0)
	self.missile_text:SetText(string.format("[%.0f%s]", val*100, "%"))
end

local update_states = {
	[global_flags.eFire] = true,
	[global_flags.eReload] = true,
	[global_flags.eShutter] = true,
}
function MainIngameOverlay:OnHudStateSwitch(item, state, old_state)
	if update_states[old_state] then
		self:SetPanelItemsNeedUpdate()
	end
end

function MainIngameOverlay:OnPickUpItemSet(item)
	if not item or not self.pickup_item or item:id() ~= self.pickup_item:id() then
		self.pickup_item = item
		self.pickup_item_icon:Show(false)
		self.pickup_item_icon:DetachAll()
	end
end

function MainIngameOverlay:UpdatePickupItem()
	if not self.pickup_item or level.main_input_receiver() then
		if self.pickup_item_icon:IsShown() then
			self.pickup_item_icon:Show(false)
		end
		return
	end
	if self.pickup_item_icon:IsShown() then
	return end
	
	local params = CIconParams(self.pickup_item:section())
	params:set_shader(self.pickup_item_icon)
	
	ui_inv_utils.CellItemFitToSize(params, self.pickup_item_icon, nil, self.pickup_item_icon.size)
	
	local icon_size = vector2():set(params.grid_width * CELL_W * get_current_kx(), params.grid_height * CELL_H)

	local offset = ui_inv_utils.GetOffset("center", self.pickup_item_icon, self.owner)
	local icon_offset = self.pickup_item_icon.offset
	self.pickup_item_icon:SetWndPos(offset.x + icon_offset.x, offset.y + icon_offset.y)
	ogse_signals.get_mgr():call("on_pickup_item_showing", self.pickup_item, self.pickup_item_icon)
	self.pickup_item_icon:Show(true)
end

local map_spot_to_texture = {
	["quest_pointer"] = "ui_map_selected",
	["eliminate_lager_location"] = "ui_mapQuest_camp_destroy",
	["eliminate_lair_location"] = "ui_mapQuest_lair_destroy",
	["defend_lager_location"] = "ui_mapQuest_camp_defend",
	["artefact_location"] = "ui_mapQuest_artefact",
	["kill_stalker_location"] = "ui_mapQuest_stalker_destroy",
	["monster_part_location"] = "ui_mapQuest_monster_find",
	["find_item_location"] = "ui_mapQuest_item",
	["general_wounded_location"] = "exclamation_mark",
	["treasure"] = "ui_mapQuest_gold",
	["spot_trader_cop"] = "ui_inGame2_PDA_icon_Stalker_Trader",
	["spot_stalker_cop"] = "ui_inGame2_PDA_icon_Stalker_VIP",
	["spot_mechanic_cop"] = "ui_inGame2_PDA_icon_Stalker_machanik",
	["spot_medic_cop"] = "ui_inGame2_PDA_icon_Stalker_Medic",
	["spot_guide_cop"] = "ui_inGame2_PDA_icon_Stalker_guide",
	["spot_storebox_cop"] = "ui_inGame2_PDA_icon_Actor_Box",
	["spot_place_to_rest_cop"] = "ui_inGame2_PDA_icon_Place_to_rest",
	["spot_treasure_cop"] = "ui_inGame2_PDA_icon_secret",
	["spot_primary_cop"] = "ui_inGame2_PDA_icon_Primary_mission",
	["spot_secondary_cop"] = "ui_inGame2_PDA_icon_Secondary_mission",
}

function MainIngameOverlay:UpdateCompass()
	local pda = actor_get_pda()
	local pda_workable = pda and pda:is_power_on() and pda:condition() > 0
	
	-- local show_compass = get_script_option_value("front_view_compass")
	-- local show_on_demand = get_script_option_value("compass_on_demand")
	
	self.owner.show_zone_map = pda_workable and SHOW_GEAR_INFO--not show_compass and (not show_on_demand or SHOW_GEAR_INFO)
	
	local dist = self.minimap:GetActivePointDist()
	local dist_show = dist >= 0.5
	
	self.dist_text:Show(dist_show)
	self.time_text:Show(pda_workable)
	
	local h = device().cam_dir:getH()
	
	--///top view compass
	self.compass_arrow:SetHeading(-h)
	local target_dist_text = ""
	if dist_show then
		target_dist_text = string.format("%.f %s", dist, game.translate_string("st_m"))
	end
	self.dist_text:SetText(target_dist_text)
	local _time = game.get_game_time():timeToString(game.CTime.TimeToMinutes)
	local text = string.format("%s", _time)
	self.time_text:SetText(text)
	
	--//front view compass
	local params = self.compass_modern.params
	--self.compass_modern:Show(show_compass and (not show_on_demand or SHOW_GEAR_INFO))
    local angle = math.deg(-h)
	angle = angle < 0 and angle + 360 or angle
    --self.compass_modern_line:SetText(math.floor(angle + 0.5))
	self.compass_modern_line:SetText(target_dist_text)
    local x = angle * params.x_to_angle_k 	--//Frect x1
    local y = 0 							--//Frect y1
    local width = params.scale_texture_w 	--//Frect x2
    local height = params.scale_texture_h 	--//Frect y2
    self.compass_modern_scale:SetOriginalRect(x, y, width, height)
	self:ShowFrontViewMarks()
end

function MainIngameOverlay:ShowFrontViewMarks()
	local compass_targets = {}
	self.compass_modern_scale:DetachAll()
	--self.screen_debug:DetachAll()
	if not self.compass_modern:IsShown() then
	return end
	local params = self.compass_modern.params
	local pda = actor_get_pda()
	local pda_radius = pda and read_if_exists(sys_ini, "r_float", pda:section(), "radius", 50) or 50
	local objective = actor:get_active_objective()
	local tgt_id = objective and objective:get_object_id() or nil
	--//nearest objects
	function perform_action(obj)
		if obj:is_stalker() or obj:is_trader() then
			local pos = point_on_screen.compass_ui_projection(obj:center(), self.compass_modern_scale:GetWidth(), self.compass_modern_scale:GetHeight() + params.vertical_mark_add, params.hide_point_off_bound)
			if pos then
				local marker_data = {
					pos = pos,
					dist = distance_between(actor, obj),
					color = relation_color[obj:relation(actor)],
				}
				if not obj:alive() then
					marker_data.color = dead_color
					--marker_data.texture = "ui_PDA_checker_t"
				end
				if not (obj:is_relation_enemy(actor) and obj:alive()) or actor:see(obj) then
					table.insert(compass_targets, marker_data)
				end
			end
		end
		for spot, texture in pairs(map_spot_to_texture) do
			if level.map_has_object_spot(obj:id(), spot) ~= 0 and obj:id() ~= tgt_id then
				local pos = point_on_screen.compass_ui_projection(obj:center(), self.compass_modern_scale:GetWidth(), self.compass_modern_scale:GetHeight() + params.vertical_mark_add, params.hide_point_off_bound)
				if pos then
					local marker_data = {
						pos = pos,
						dist = distance_between(actor, obj),
						texture = texture,
						size = params.other_marker_size,
					}
					if spot == "general_wounded_location" then
						marker_data.color = relation_color[2]
					end
					table.insert(compass_targets, marker_data)
				end
			end
		end
	end		
	level.iterate_nearest(actor:position(), pda_radius, perform_action)
	--//selected quest target
	if objective then
		local dist = self.minimap:GetActivePointDist()
		local sim = alife()
		local sobj = sim:object(tgt_id)
		local obj_pos = nil
		if sobj then
			if sobj.level_id == sim:level_id() then
				local cobj = level.object_by_id(tgt_id)
				obj_pos = cobj and cobj:center() or sobj.position
			else
				for id, _ in pairs(db.level_changers) do
					local lc = level.object_by_id(id)
					if lc then
						local dist_to_lc = distance_between(actor, lc)
						if dist and math.fsimilar(dist, dist_to_lc, 1) then
							obj_pos = lc:center()
							break
						end
					end
				end				
			end
			local pos = point_on_screen.compass_ui_projection(obj_pos, self.compass_modern_scale:GetWidth(), self.compass_modern_scale:GetHeight() + params.vertical_mark_add, params.hide_quest_point_off_bound)
			if pos then
				--target map spot
				for spot, texture in pairs(map_spot_to_texture) do
					if level.map_has_object_spot(tgt_id, spot) ~= 0 then
						local size = table.copy(params.other_marker_size)
						local dist_k = params.distance_mark_scale and pda_radius / dist or 1
						dist_k = math.clamp(dist_k, 0.5, 1)
						size[1] = size[1] * dist_k
						size[2] = size[2] * dist_k
						local marker_data = {
							pos = pos,
							dist = dist,
							texture = texture,
							size = size
						}
						if spot == "general_wounded_location" then
							marker_data.color = relation_color[2]
						end						
						table.insert(compass_targets, marker_data)
						break						
					end
				end
				--additional selected map spot			
				local size = table.copy(params.selected_marker_size)
				local dist_k = params.distance_mark_scale and pda_radius / dist or 1
				dist_k = math.clamp(dist_k, 0.5, 1)
				size[1] = size[1] * dist_k
				size[2] = size[2] * dist_k
				local marker_data = {
					pos = pos,
					dist = dist,
					texture = map_spot_to_texture["quest_pointer"],
					size = size
				}
				table.insert(compass_targets, marker_data)
			end
		end
	end
	table.sort( compass_targets, function(a,b) return a.dist > b.dist end )
	local marker_size = params.marker_size
	for k, v in ipairs(compass_targets) do
		local obj_point = CUIStatic()
		self.compass_modern_scale:AttachChild(obj_point)
		--self.screen_debug:AttachChild(obj_point)
		obj_point:SetStretchTexture(true)
		obj_point:InitTexture(v.texture or "ui_minimap_point")
		obj_point:SetWidth(v.size and v.size[1] or marker_size[1])
		obj_point:SetHeight(v.size and v.size[2] or marker_size[2])
		if v.color then
			obj_point:SetColor(v.color)
		end
		local offset = ui_inv_utils.GetOffset("center", obj_point, self.compass_modern_scale)
		obj_point:SetWndPos(v.pos.x - obj_point:GetWidth() / 2, v.pos.y - obj_point:GetHeight() / 2)
	end
end

function MainIngameOverlay:UpdateFPS()
	self.fps_counter:Show(SHOW_FPS)
	if not self.fps_counter:IsShown() then
	return end
	local fps = string.format("FPS: %7.2f", ogse_benchmark.get_fps())
	self.fps_counter:SetText(fps)
end

function MainIngameOverlay:UpdateTargetTip()
	local tip = actor_obj:get_default_action_for_obj()
	self.target_tip:Show(tip and tip ~= "" and (actor_hands_free() or actor:ph_capture()))
	if self.target_tip:IsShown() then
		self.target_tip:SetText(game.translate_string(tip))
		self.target_tip:AdjustWidthToText()
		self.target_tip:AdjustHeightToText()
		local offset = ui_inv_utils.GetOffset(self.target_tip.offset, self.target_tip, self.owner)
		offset.x = offset.x + self.target_tip.offset_shift[1]
		offset.y = offset.y + self.target_tip.offset_shift[2]
		self.target_tip:SetWndPos(offset.x, offset.y)
		--hud_add_info_message("quick_info", game.translate_string(tip))
	else
		self.target_tip:SetText("")
		--hud_remove_info_message("quick_info")
	end
	self.tip_cursor:Show(tip and tip ~= "" and not get_console():get_bool("hud_crosshair"))
end

function MainIngameOverlay:OnKeyPress(key, game_action)
	if game_action == key_bindings.kSCORES then
	
		self.slot_selector:ShowHideSelector()

		--self:ShowActiveTask(true)
	end
	
	if game_action == key_bindings.kQUICK_ADDON then
		self.quick_addon:ShowHide()
	end
end

function MainIngameOverlay:OnKeyRelease(key, game_action)
	-- if game_action == key_bindings.kSCORES or key == DIK_keys.DIK_ESCAPE then
		-- self:ShowActiveTask(false)
	-- end
end

function MainIngameOverlay:ShowActiveTask()
	self:ShowTask(true)
end

function MainIngameOverlay:HideActiveTask()
	self:ShowTask(false)
end

local task_stage_color = {
	["new"] 		= GetARGB(255, 255, 255, 0),--GetARGB(255, 0, 255, 0),
	["update"] 		= GetARGB(255, 255, 255, 0),--GetARGB(255, 238, 153, 26),
	["complete"] 	= GetARGB(255, 0, 255, 0),
	["fail"] 		= GetARGB(255, 255, 0, 0),
}
function MainIngameOverlay:ShowTask(b_show, _task, _objective, _stage)
	if b_show then
		local task = _task or actor:get_active_task()
		self.active_task:Show(task)
		self.task_state_icon:Show(_task)
		self.task_header:SetTextColor(self.task_header.base_color)
		self.objective_header:SetTextColor(self.objective_header.base_color)
		if self.active_task:IsShown() then
			local text = game.translate_string(task:get_title() or "NO_TASK_TITLE")
			self.task_header:SetText(text)
			
			local objective_description = "NO_OBJECTIVE_DESCRIPTION"
			if _stage then
				if _stage == "new" or _stage == "update" then
					local idx = _objective:get_idx() + 1
					if _task:get_objectives_cnt() ~= idx then
						objective_description = _task:get_objective(idx):get_description()
					end
				else
					objective_description = "general_".._stage.."_task"
				end
				self.task_state_icon:SetColor(task_stage_color[_stage])
				self.task_state_icon:InitTexture(_stage.."_task_icon")
				
				self.task_header:SetTextColor(task_stage_color[_stage])
				self.objective_header:SetTextColor(task_stage_color[_stage])
			else
				objective_description = actor:get_active_objective():get_description()
			end
			text = string.format("%s %s", game.translate_string("st_list_mark"), game.translate_string(objective_description))
			self.objective_header:SetText(text)
		
			local task_icon = task:get_objective(0):get_icon_name()
			self.task_icon:Show(task_icon)
			--log3("~task_icon %s", task_icon)
			if self.task_icon:IsShown() then
				self.task_icon:InitTexture(task_icon)
				local r = task:get_objective(0):get_icon_rect()
				self.task_icon:SetOriginalRect(r.x1, r.y1, r.x2, r.y2)
			end
		end		
	else
		if self.active_task:IsShown() then
			self.active_task:Show(false)
		end		
	end
end

function MainIngameOverlay:ShowFlashingIcon()
	self.flashing_icon:Show(true)
end
function MainIngameOverlay:HideFlashingIcon()
	self.flashing_icon:Show(false)
end

function MainIngameOverlay:OnTaskUpdate(_task, _objective, _stage)
	self:ShowTask(true, _task, _objective, _stage)
	add_time_delayed_action(5, function() self:ShowTask(false) end)
end

function MainIngameOverlay:Update()
	CUIScriptWnd.Update(self)
	local alive = actor:alive()
	if not alive then
		self:Show(false)
	return end
	self:UpdateConditions()
	self:UpdateMotionIcon()
	self:UpdateCarPanel()
	self:UpdateMountedWpnPanel()
	--self.slot_panel:Show(false)--(SHOW_GEAR_INFO)
	self.belt_panel:Show(SHOW_GEAR_INFO)
	--self.loadout_panel:Show(SHOW_GEAR_INFO)
	self.quick_slots:Show(false)--(not self.quick_slots.show_on_gear or SHOW_GEAR_INFO)
	self:UpdatePanelItems()
	self:UpdatePanelBoosters()
	self:UpdateActiveItem()
	self:UpdateMissileThrow()
	self:UpdatePickupItem()
	self:UpdateCompass()
	self:UpdateFPS()
	
	self.slot_selector:TrySignalHide()
	self.quick_addon:TrySignalHide()
	
	self:UpdateTargetTip()
end