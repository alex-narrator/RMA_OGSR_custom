local overlay = nil

function attach(sm)
	sm:subscribe({signal = "on_spawn",   fun = this.create_window})
	sm:subscribe({signal = "on_destroy",   fun = this.destroy_window})
end

local subscribed = false

function create_window()
	if not overlay then
		overlay = MainIngameOverlay(get_main_window())
	end
end

function destroy_window()
	if overlay then
		overlay:DetachWnd()
		overlay = nil
	end
end

class "MainIngameOverlay" (CUIScriptWnd)

function MainIngameOverlay:__init(owner) super()
	self.owner = owner
	self:InitControls()
	self:Subscribe()
end

function MainIngameOverlay:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			{signal = "on_quick_item_set", self = self, fun = self.UpdateSlots},
			{signal = "on_use", self = self, fun = self.UpdateSlots},
			{signal = "on_slot", self = self, fun = self.UpdateSlots},
			{signal = "on_ruck", self = self, fun = self.UpdateSlots},
			{signal = "on_belt", self = self, fun = self.UpdateSlots},
			{signal = "on_vest", self = self, fun = self.UpdateSlots},
			{signal = "on_drop", self = self, fun = self.UpdateSlots},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:subscribe( s )
		end
	end
end

function MainIngameOverlay:Unsubscribe()
	if self.subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( self.subscribed ) do
			sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function MainIngameOverlay:DetachWnd()
	self:Unsubscribe()
	self:ClearCallbacks()
	self.owner:DetachChild(self)
end

function MainIngameOverlay:InitControls()
	self.owner:AttachChild(self)
	self:Init(0, 0, 1024, 768)
	self:Enable(true)
	self:Show(true)
	
	local xml = CScriptXmlInit()
	xml:ParseFile("script_overlays\\mainingame_overlay.xml")
	
	self.actor_params = xml:InitStatic("actor_params", self)
	--//health bar
	self.health = xml:InitStatic("health", self.actor_params)
	self.health_static = xml:InitStatic("health:health_static", self.health)
	self.health_bar = xml:InitProgressBar("health:health_progress", self.health)
	--//power bar
	self.power = xml:InitStatic("power", self.actor_params)
	self.power_static = xml:InitStatic("power:power_static", self.power)
	self.power_bar = xml:InitProgressBar("power:power_progress", self.power)
	--//stamina bar
	self.stamina = xml:InitStatic("stamina", self.actor_params)
	self.stamina_static = xml:InitStatic("stamina:stamina_static", self.stamina)
	self.stamina_bar = xml:InitProgressBar("stamina:stamina_progress", self.stamina)

	--// quick slots
	self.quick_slots_back = xml:InitStatic("quick_slots_back", self)

	--//slot colors
	self.quick_color_default 	= GetARGB(0, 255, 255, 255)
	self.quick_color_has_item 	= GetARGB(255, 255, 255, 255)
	self.quick_color_no_item 	= GetARGB(120, 255, 255, 255)

	self.slots = {}
	for i=0,3 do
		local s = xml:InitStatic("quick_slot_"..i, self.quick_slots_back)
		self.slots[i] = s
		s:SetColor(self.quick_color_default)
		
		local key_text = "ui_quick_slot_"..i
		s:SetText(game.translate_string(key_text))
		
		s.icon = xml:InitStatic("slot_icon", s)
		s.icon:InitTexture("ui\\ui_icon_equipment")
		
		s.base_x = s.icon:GetWndPos().x
		s.base_y = s.icon:GetWndPos().y
		s.base_w = s.icon:GetWidth()
		s.base_h = s.icon:GetHeight()
		
		s.count = xml:InitStatic("slot_count", s)
		
		self:DrawSlotIcon(i)
	end
end

function MainIngameOverlay:DrawSlotIcon(slot_num)
	local s = self.slots[slot_num]
	local sect = quick_slots.get_item_sect(slot_num)
	local params = GetIconParams(sect)
	
	local count = quick_slots.get_item_count(slot_num)
	local count_text = string.format("x%s", count)
	s.count:SetText(count_text)
	s.count:Show(count > 0)
	
	s.icon:SetOriginalRect(params.x, params.y, params.w, params.h)

	local width_k = params.w/CELL_W
	local height_k = params.h/CELL_H
	local width = s.base_w * width_k
	local height = s.base_h * height_k
	local pos_x = s.base_x
	local pos_y = s.base_y
		
	if height_k > 1 then --//пропорційно зменшимо іконку з висотою > 1 клітинки
		width = width / height_k
		height = height / height_k
		pos_x = pos_x + width / height_k
	end
		
	s.icon:SetWidth(width)
	s.icon:SetHeight(height)
	s.icon:SetWndPos(pos_x, pos_y)

	if count > 0 then
		s.icon:SetColor(self.quick_color_has_item)
	else
		s.icon:SetColor(self.quick_color_no_item)
	end
end

function MainIngameOverlay:UpdateSlots()
	for i=0,3 do
		self:DrawSlotIcon(i)
	end
end

function MainIngameOverlay:Update()
	CUIScriptWnd.Update(self)
	self.health_bar:SetProgressPos(actor.health)
	self.power_bar:SetProgressPos(actor.power)
	self.stamina_bar:SetProgressPos(stamina.get_stamina())
	self.stamina:Show(stamina.get_stamina()<1)
end