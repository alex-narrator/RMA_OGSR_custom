-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   	fun = this.on_zoom_in})
	sm:subscribe({signal = "on_actor_weapon_zoom_out",   	fun = this.on_zoom_out})
	sm:subscribe({signal = "on_death",   					fun = this.on_death})
end

local main_wnd = get_main_window()
local scope_static = false
local DEBUG_DISABLE = false

function create_scope_static(weapon)
	if scope_static and main_wnd:IsChild(scope_static) then
		main_wnd:DetachChild(scope_static)
	end
	scope_static = false
	if DEBUG_DISABLE then
	return false end
	if weapon:get_gl_mode() then
	return false end
	local wpn = weapon:get_weapon()
	if not wpn:is_addon_attached(addon.scope) then
	return false end
	local sect = weapon:section()
	local scope_tex_sect = wpn:addon_attachable(addon.scope) and wpn:get_addon_name(addon.scope) or sect
	local scope_texture_forced = (scope_tex_sect ~= sect) and read_if_exists(sys_ini, "r_string", sect, scope_tex_sect.."_scope_texture", nil) or nil
	if read_if_exists(sys_ini, "r_bool", scope_tex_sect, "ignore_scope_texture", false) and not scope_texture_forced then
	return false end
	local scope_tex_type = wpn:scope_mode_second() and "scope_texture_second" or "scope_texture"	
	local texture_name = scope_texture_forced or read_if_exists(sys_ini, "r_string", scope_tex_sect, scope_tex_type, nil)
	if not texture_name then
	return false end
	local static = CUIStatic()
	static:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	static:InitTexture(texture_name)
	static:SetStretchTexture(true)
	return static
end

function on_zoom_in(weapon)
	scope_static = create_scope_static(weapon)
	if not scope_static then
	return end
	level.add_call(
		function()
			return not wpn_IsRotatingToZoom(weapon) or not scope_static
		end,
		function()
			if not scope_static then
			return end
			level.show_item_hud(false)
			if not main_wnd:IsChild(scope_static) then
				main_wnd:AttachChild(scope_static)
			end
			main_wnd:BringToBottom(scope_static)		
		end		
	)		
end

function on_zoom_out(weapon)
	level.show_item_hud(true)
	if scope_static and main_wnd:IsChild(scope_static) then
		main_wnd:DetachChild(scope_static)
	end
	scope_static = false
end

function on_death(victim, killer)
	if victim:id() ~= actor:id() then
	return end
	if actor:active_item() then
		actor:drop_item(actor:active_item())
	end
end