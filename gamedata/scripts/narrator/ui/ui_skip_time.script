-- -*- mode: lua; coding: windows-1251-dos -*-
local OVERLAY_XML = "script_overlays\\skip_time_overlay.xml"

local subscribed = false

function show_skip_time_window(button_type, action, ...)
	level.start_stop_menu(SkipTimeOverlay(button_type, action, ...),true)
end

class "SkipTimeOverlay" (CUIScriptWnd)

function SkipTimeOverlay:__init(button_type, action, ...) super()
	self.sleep_h = 1
	self.action = action
	self.args = {...}
	self:InitControls(button_type)
end

function SkipTimeOverlay:InitControls(button_type)
	self:Init(0, 0, UI_BASE_WIDTH, UI_BASE_HEIGHT)
	
	local xml = CScriptXmlInit()
	xml:ParseFile(OVERLAY_XML)
	
	local name
	--//background
	self.back = xml:InitStatic("background", self)
	local offset = ui_inv_utils.GetOffset("center", self.back, level.main_input_receiver() or get_main_window())
	self.back:SetWndPos(offset.x, offset.y)
	xml:InitAutoStaticGroup("background:auto_static", self.back)

	self.panorama = xml:InitStatic("panorama", self.back)
	self.panorama_shift = xml:ReadAttribFlt("panorama", "shift", 0)
	self.scale_texture_w = xml:ReadAttribFlt("panorama", "scale_texture_w", 591)
	self.scale_texture_h = xml:ReadAttribFlt("panorama", "scale_texture_h", 114)
	self.scale_k = self.scale_texture_w / self.panorama:GetWidth()
	self.marker = xml:InitStatic("panorama:marker", self.panorama)
	self.panorama_move_part = self.panorama:GetWidth() / 24
	self.marker:SetWidth(self.panorama_move_part)

    -- local x = level.get_time_hours() * self.panorama_move_part 	--//Frect x1
    -- local y = 0 												--//Frect y1
    -- local width = self.panorama:GetWidth() 						--//Frect x2
    -- local height = self.panorama:GetHeight() 					--//Frect y2
	-- self.panorama:SetOriginalRect(x, y, width, height)

	--//date/time
	self.date_time = xml:InitFrameLine("time_frame_line", self.back)
	self.date = xml:InitStatic("date", self.date_time)
	self.time = xml:InitStatic("time", self.date_time)
	
	name = "skip_time_track"
	self.time_track = xml:InitTrackBar("time_track", self.back)
	self:Register(self.time_track, name)
	self:AddCallback(name, ui_events.TRACKBAR_CHANGED, self.ChangeTime, self)
	
	--//skip timer
	self.timer_line = xml:InitFrameLine("timer_frame_line", self.back)
	self.time_value = xml:InitStatic("time_value", self.timer_line)
	
	--//skip time button
	name = "skip_time_button"
	self.skip_time = xml:Init3tButton(button_type.."_button", self.back)
	self:Register(self.skip_time, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.SkipTime, self)
		
	--// quit button
	name = "quit_button"
	self.quit_button = xml:Init3tButton("quit_button", self.back)
	self:Register(self.quit_button, name)
	self:AddCallback(name, ui_events.BUTTON_CLICKED, self.Hide, self)
	
	--//НЕ ВИДАЛЯТИ!
	--//без встановлення значення трекбар буде працювати в режимі тригера true/false
	self.time_track:SetTrackValue(self.sleep_h)
	self:ChangeTime()
end

function SkipTimeOverlay:Update()
	CUIScriptWnd.Update(self)
	local pda = actor_get_pda()
	
	local has_pda_power = pda and pda:is_power_on()
	self.date_time:Show(has_pda_power)
	
	local _time = game.get_game_time()
	local date_text = string.format("%s %s", get_current_weekday_name(true), _time:dateToString(game.CTime.DateToDay))
	self.date:SetText(date_text)
	self.time:SetText(_time:timeToString(game.CTime.TimeToMinutes))
	
	self:UpdatePanorama()
end

function SkipTimeOverlay:UpdatePanorama()
	local start_pos = level.get_time_hours() * self.panorama_move_part * self.scale_k
	local x = start_pos + self.panorama_shift 	--//Frect x1
    local y = 0 								--//Frect y1
    local width = self.scale_texture_w 			--//Frect x2
    local height = self.scale_texture_h 		--//Frect y2
	self.panorama:SetOriginalRect(x, y, width, height)
end

function SkipTimeOverlay:ChangeTime()
	self.sleep_h = self.time_track:GetTrackValue()
	local tmp = string.format("%d %s", self.sleep_h, game.translate_string("ui_st_hours"))
	self.time_value:SetText(tmp)
	
	local marker_pos = self.marker:GetWndPos()
	marker_pos.x = self.panorama_move_part * (self.sleep_h - 1)
	self.marker:SetWndPos(marker_pos.x, marker_pos.y)
end

function SkipTimeOverlay:SkipTime()
	if self.sleep_h == 0 then
	return end
	self.action(self.sleep_h, unpack(self.args))
	self:Hide()
end

local actions = {
	[key_bindings.kLEFT] = true,
	[key_bindings.kRIGHT] = true,
}
local keys = {
	[DIK_keys.DIK_A] = true,
	[DIK_keys.DIK_D] = true,
}

function SkipTimeOverlay:OnKeyboard(dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		local dk = dik_to_bind(dik)
		if actions[dk] or keys[dik] then
			local add = (dk == key_bindings.kLEFT or dik == DIK_keys.DIK_A) and -1 or 1
			self.sleep_h = math.clamp(self.sleep_h + add, 1, 24)
			self.time_track:SetTrackValue(self.sleep_h)
			self:ChangeTime()
			return true
		end
	end
	return CUIScriptWnd.OnKeyboard( self, dik, keyboard_action )
end

function SkipTimeOverlay:Hide()
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self,true)
end