-- -*- mode: lua; coding: windows-1251-dos -*-
local color_default 	= GetARGB(0, 255, 255, 255)
local color_focused 	= GetARGB(70, 200, 200, 200)
local color_selected 	= GetARGB(170, 35, 200, 35)
local cell_texture 		= "ui_inv_back_gray"

class "UICellItem" (CUIScriptWnd)

function UICellItem:__init(item, scale, owner) super()
	self.sm = ogse_signals.get_mgr()
	self.owner = owner
	self.item = type(item) == "string" and nil or item
	self.item_sect = type(item) == "string" and item or item:section()
	self.scale = scale or 1
	self.in_focus = false
	self.is_updatable = true
	self.childs = {}
	self:InitWnd()
	self:Subscribe()
end

-- function UICellItem:__finalize()
	-- self:DetachWnd()
	-- log3("~UICellItem:__finalize() called")
-- end

function UICellItem:DetachWnd()
	if self.owner then
		self.owner:DetachChild(self)
	end
	self:ClearCallbacks()
	self:Unsubscribe()
end

function UICellItem:Subscribe()
	self.subscribed = false
	if not self.subscribed then
		self.subscribed = {
			--{signal = "on_key_press", self = self, fun = self.OnKeyPress},
		}
		for _, s in ipairs( self.subscribed ) do
			self.sm:subscribe( s )
		end
	end
end

function UICellItem:Unsubscribe()
	if self.subscribed then
		for _, s in ipairs( self.subscribed ) do
			self.sm:unsubscribe( s )
		end
		self.subscribed = false
	end
end

function UICellItem:InitWnd()
	if self.owner then
		self.owner:AttachChild(self)
	end
	
	self.params = CIconParams(self.item_sect)
	self.icon_size = vector2():set(self.params.grid_width * self.scale * CELL_W * get_current_kx(), self.params.grid_height * self.scale * CELL_H)
	
	local init_size = vector2():set(self.owner and self.owner:GetWidth() or UI_BASE_WIDTH, self.owner and self.owner:GetHeight() or UI_BASE_HEIGHT)
	self:Init(0, 0, init_size.x, init_size.y)
	self:Enable(true)
	self:Show(true)	
	
	self.back = CUIStatic()
	self:AttachChild(self.back)
	self.back:SetStretchTexture(true)
	self.back:InitTexture(cell_texture)
	self.back:SetColor(color_default)
	
	self.icon = CUIStatic()
	self.icon:SetStretchTexture(true)
	self.back:AttachChild(self.icon)
	self.params:set_shader(self.icon)

	self:SetWidth(self.icon_size.x)
	self:SetHeight(self.icon_size.y)
	
	local name = "cellitem"
	self:Register(self.back, name)
	self:AddCallback(name, ui_events.STATIC_FOCUS_RECEIVED, function() self:OnFocusReceived() end, self)
	self:AddCallback(name, ui_events.STATIC_FOCUS_LOST, function() self:OnFocusLost() end, self)
	self:AddCallback(name, ui_events.WINDOW_LBUTTON_DB_CLICK, function() self:OnDbClick() end, self)
	self:AddCallback(name, ui_events.WINDOW_LBUTTON_DOWN, function() self:OnLButtonDown() end, self)
	self:AddCallback(name, ui_events.WINDOW_RBUTTON_DOWN, function() self:OnRButtonDown() end, self)	
end

function UICellItem:Update()
	CUIScriptWnd.Update(self)
	if self.is_updatable and self.item then
		self.sm:call("on_cell_item_update", self.item, self.icon, self:GetCounter())
	end
end

function UICellItem:OnFocusReceived()
	if not self.item then return end
	self.in_focus = true
	self.sm:call("on_cell_item_focus", self.item)
	--log3("~%s: on_cell_item_focus_script item %s", script_name(), self.item:name())
end

function UICellItem:OnFocusLost()
	if not self.item then return end
	self.in_focus = false
	self.sm:call("on_cell_item_focus_lost", self.item)
	--log3("~%s: on_cell_item_focus_lost_script item %s", script_name(), self.item:name())
end

function UICellItem:OnDbClick()
	if not self.item then return end
	self.sm:call("on_cell_item_dbclick", self.item)
	--log3("~%s: on_cell_item_dbclick_script item %s", script_name(), self.item:name())
end

function UICellItem:OnLButtonDown()
	if not self.item then return end
	self.sm:call("on_cell_item_lb_click", self.item)
	--log3("~%s: on_cell_item_lb_click_script item %s", script_name(), self.item:name())
	self:OnSelect()
end

function UICellItem:OnRButtonDown()
	if not self.item then return end
	self.sm:call("on_cell_item_rb_click", self.item)
	--log3("~%s: on_cell_item_rb_click_script item %s", script_name(), self.item:name())
	self:OnSelect()
end

function UICellItem:OnLButtonRelease()
	--log3("~OnLButtonRelease")
end

function UICellItem:OnRButtonRelease()
	--log3("~OnRButtonRelease")
end

function UICellItem:OnSelect()
	self.sm:call("on_cell_item_select", self.item)
	--log3("~item %s count %s", self.item:name(), self:GetCounter())
end

function UICellItem:GetIcon()
	return self.icon
end

function UICellItem:GetChilds()
	return self.childs
end

function UICellItem:IsEqualTo(item)
	for id,_ in pairs(self.childs) do
		if ui_inv_utils.similar_item(level.object_by_id(id), item) then
		return true end
	end
	if ui_inv_utils.similar_item(self.item, item) then
	return true end
	return false
end

function UICellItem:AddChild(id)
	if not self.childs[id] then
		self.childs[id] = true
		--log3("~add child %s for item %s | childs count %s", level.object_by_id(id):name(), self.item:name(), table.size(self.childs))
	end
end

function UICellItem:RemoveChild(id)
	if self.childs[id] then
		self.childs[id] = nil
		return true
	end
	return false
end

function UICellItem:GetCounter()
	local count = 1 + table.size(self.childs)
	local ammo = self.item:get_weapon_ammo()
	if ammo and not ammo:is_magazine() then
		count = ammo.box_curr
		for id,_ in pairs(self.childs) do
			count = count + level.object_by_id(id):get_weapon_ammo().box_curr
		end
	end
	return count
end

function UICellItem:SetUpdatable(enable)
	self.is_updatable = enable
end

function UICellItem:SetScaleToWnd(wnd)
	local wnd_size = vector2():set(wnd:GetWidth(), wnd:GetHeight())
	local scale_x = wnd_size.x / self.icon_size.x
	scale_x = scale_x > 1 and 1 or scale_x
	local scale_y = wnd_size.y / self.icon_size.y
	scale_y = scale_y > 1 and 1 or scale_y
	local scale = math.min(scale_x, scale_y)
	
	self:SetWidth(self.icon_size.x * scale)
	self:SetHeight(self.icon_size.y * scale)	
end

function UICellItem:SetOffsetToWnd(wnd, offset_type)
	local offset = ui_inv_utils.GetOffset(offset_type, self.back, wnd)
	self.back:SetWndPos(offset.x, offset.y)	
end

function UICellItem:ClearHighlight()
	self.back:SetColor(color_default)
end

function UICellItem:HighlightSelected()
	self.back:SetColor(color_selected)
end

function UICellItem:HighlightFocused()
	self.back:SetColor(color_focused)
end

--//redefined functions
function UICellItem:SetWndPos(x, y)
	self.back:SetWndPos(x, y)
end

function UICellItem:SetWidth(width)
	self.back:SetWidth(width)
	self.icon:SetWidth(width)
end

function UICellItem:SetHeight(height)
	self.back:SetHeight(height)
	self.icon:SetHeight(height)
end

function UICellItem:GetWidth()
	return self.back:GetWidth()
end

function UICellItem:GetHeight()
	return self.back:GetHeight()
end

function UICellItem:SetText(text)
	self.icon:SetText(text)
end

function UICellItem:SetFont(font)
	self.icon:SetFont(font)
end

function UICellItem:SetColor(color)
	self.icon:SetColor(color)
end

function UICellItem:GetColor()
	return self.icon:GetColor()
end

function UICellItem:SetTextColor(color)
	self.icon:SetTextColor(color)
end

function UICellItem:SetTextPos(x, y)
	self.icon:SetTextPos(x, y)
end