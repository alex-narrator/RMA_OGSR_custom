-- -*- mode: lua; coding: windows-1251-dos -*-
local hud_effector_id = 5555

local instruments = {
	["guitar"] = {
		sound_prefix = [[characters_voice\music\guitar\guitar_]], 
		hud = "guitar_hud",
		draw_anm_speed = 2.5,
		draw_anm_delay = 1.5,
		max_rnd = 13,
		psy_restore_k = 0.1,
	},
	["harmonica"] = {
		sound_prefix = [[characters_voice\music\harmonica\harmonica_]], 
		hud = "harmonica_hud",
		draw_anm_speed = 1.5,
		draw_anm_delay = 1,
		max_rnd = 9,
		psy_restore_k = 0.3,
	},	
}

local sm = ogse_signals.get_mgr()
local subscribed = false
local play_anim = false
local sound = false
local instrument = false

function play(item)
	actor:hide_weapon(true)
	block_non_move_action(true)
	actor:hide_crosshair(true)
	
	instrument = item
	local data = instruments[instrument]
	
	level.add_call(
		function() 
			return not actor:active_item() and not actor:active_device()
		end,
		function()
			if actor_menu:IsShown() then
				ui_actor_menu.ShowHideMenu()
			end
			
			game.play_hud_motion(2, data.hud, "anm_draw", false, data.draw_anm_speed or 1, true)
			_G.SCRIPT_ANIM_PLAYING = true
			
			add_time_delayed_action(data.draw_anm_delay or 1,
				function()

				if not subscribed then
					subscribed = { signal = "on_key_press", fun = this.on_key_press }
					sm:subscribe( subscribed )
				end
				hud_add_info_message("item_usage", game.translate_string("st_key_to_stop_anim"), 99)
				game.play_hud_motion(2, data.hud, "anm_play", false, 1, true)
				sound = xr_sound.get_safe_sound_object(data.sound_prefix..math.random(1, data.max_rnd))
				sound:play(actor, 0, sound_object.s2d)
				level.add_call(
					function()
						local conds = actor_obj.condition
						local f_dt = conds:fdelta_time()
						actor.psy_health = conds.psy_health_v * data.psy_restore_k * f_dt
						return not sound or not sound:playing()
					end,
					function()
						stop_music()
					end
				)			
			
				end
			)
		end
	)
end

function stop_music()
	if not sound then
	return end
	hud_remove_info_message("item_usage")
	game.stop_hud_motion()
	sound:stop()
	sound = false
	local data = instruments[instrument]
	game.play_hud_motion(2, data.hud, "anm_draw", false, data.draw_anm_speed or 1, true)
	add_time_delayed_action(data.draw_anm_delay or 1,
		function()
			game.stop_hud_motion()
			_G.SCRIPT_ANIM_PLAYING = false
			restore_control()
			instrument = false
		end
	)
end

function restore_control()
	actor:restore_weapon()
	block_non_move_action(false)
	actor:hide_crosshair(true)
	if subscribed then
		subscribed = { signal = "on_key_press", fun = this.on_key_press }
		sm:unsubscribe( subscribed )
		subscribed = false
	end
end

local force_stop_action = {
	--[key_bindings.kACCEL] = true,
	[key_bindings.kSPRINT] = true,
	--[key_bindings.kCROUCH] = true,	
}
function on_key_press(key, game_action)
	if force_stop_action[game_action] then
		stop_music()
	end
end

--//context menu
function can_play_instrument(item)
	for k,v in pairs(instruments) do
		if string.find(item:section(), k) then
			return true
		end
	end
	return false
end

function play_instrument(item)
	for k,v in pairs(instruments) do
		if string.find(item:section(), k) then
			play(k)
			return
		end
	end	
end

function can_play_guitar(item)
	return string.find(item:section(), "guitar")
end
function play_guitar(item)
	play("guitar")
end

function can_play_harmonica(item)
	--log3("~item %s - res %s", item:section(), string.find(item:section(), "harmonica"))
	return string.find(item:section(), "harmonica")
end
function play_harmonica(item)
	play("harmonica")
end