-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_use_mounted_weapon", fun = this.on_use})
	sm:subscribe({signal = "on_weapon_shell_drop",   	fun = this.on_shell_drop})
	--sm:subscribe({signal = "on_spawn_mounted_weapon", fun = this.on_spawn})
end

local console = get_console()
local actor_obj = get_actor_obj()
local hide_crosshair_after_use = false
local subscribed = false

local current_mgun = false
local binded_mgun = false

function on_use(mounted_wpn)
	actor:hide_weapon(true)
	hide_crosshair_after_use = not console:get_bool("hud_crosshair")
	--log3("~hide_crosshair_after_use %s", hide_crosshair_after_use)
		
	if hide_crosshair_after_use then
		console:execute("hud_crosshair 1")
	end
		
	current_mgun = mounted_wpn
	binded_mgun = current_mgun:binded_object()
		
	if not subscribed then
		subscribed = {
			{ signal = "on_update_mounted_weapon", fun = this.on_update },
			{ signal = "on_key_press", fun = this.on_key_press },
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:subscribe( s )
		end
	end
end

function on_update(mounted_wpn)
	if not actor:get_holder() or current_mgun:id() ~= actor:get_holder():id() then
		if hide_crosshair_after_use then
			console:execute("hud_crosshair 0")
		end
		
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:unsubscribe( s )
		end
		subscribed = false
		current_mgun = false
		binded_mgun = false
		actor_obj:unblock_action(key_bindings.kWPN_FIRE)
		actor:restore_weapon(true)
		return
	end
end

function on_shell_drop(wpn, pos, vel)
	--log3("~on_shell_drop weapon %s | parent %s", wpn:name(), wpn:parent() and wpn:parent():name() or "UNKNOWN")
	if not current_mgun or wpn:id() ~= current_mgun:id() then
	return end
	
	if not binded_mgun then
	return end
	
	binded_mgun:process_overheat(true)
	try_block_fire()	
end

function on_key_press(key, game_action)
	if game_action ~= key_bindings.kWPN_FIRE then
	return end
	try_block_fire()
end

function try_block_fire()
	if not binded_mgun or not binded_mgun:is_overheated() then
	return end
	level.send_event_key_release(bind_to_dik(key_bindings.kWPN_FIRE))
	actor_obj:block_action(key_bindings.kWPN_FIRE)
	add_update_delayed_action(1, function() actor_obj:unblock_action(key_bindings.kWPN_FIRE) end)
	hud_add_info_message("item_usage", game.translate_string("st_machinegun_overheated"))
end