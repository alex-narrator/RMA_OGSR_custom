-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press",   fun = this.on_key_press})
	sm:subscribe({signal = "on_slot",   fun = this.on_slot})
	sm:subscribe({signal = "on_drop",   fun = this.on_drop})
	sm:subscribe({signal = "on_ruck",   fun = this.on_ruck})
	sm:subscribe({signal = "on_take",   fun = this.on_take})
end

local backpack_spot = "personal_location"
local idle_playing = false

local ANM_SND_SLOWDOWN = 1.5

function on_take(obj)
	if obj:get_container() then
		level.map_remove_object_spot(obj:id(), backpack_spot)
	end
end

function on_slot(obj, prev_place)
	if obj:get_container() then
		function perform_action(dummy, item)
			obj:transfer_item(item, actor)
		end	
		obj:iterate_inventory(perform_action, nil)
		backpack_anim.play("equip")
	end
end

function on_drop(obj, prev_place)
	if prev_place == item_place.slot and not level.is_removing_objects() then
		if obj:get_container() then
			function perform_action(dummy, item)
				if not loadout.can_remove(item) then
					actor:transfer_item(item, obj)
				end
			end	
			actor:iterate_ruck(perform_action, nil)
			
			if idle_playing then
				game.stop_hud_motion()
			end
			--backpack_anim.play("unequip")
		end
	end
end

function on_ruck(obj, prev_place)
	if prev_place == item_place.slot and obj:get_container() then
		if idle_playing then
			game.stop_hud_motion()
		end
		backpack_anim.play("unequip")
	end
end

function on_key_press(key, game_action)
	if level.main_input_receiver() or 
		game_action ~= key_bindings.kDROP_BACKPACK then
	return end
	drop()
end

function drop()
	local backpack = actor_get_backpack()
	if not backpack then 
	return end
	
	local has_quick_drop = read_if_exists(sys_ini, "r_bool", backpack:section(), "quick_drop", false)
	
	local menu_shown = actor_menu:IsShown()
	
	if has_quick_drop and not menu_shown then
		drop_item_to_angle(actor, backpack, 180)
		xr_sound.get_safe_sound_object("interface\\inv_open"):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
		set_map_spot(backpack)
	return end
	
	backpack_anim.play("unequip")
	level.add_call(
		function()
			return not actor.inventory:is_active_slot_blocked() or (menu_shown and actor_hands_free())
		end,
		function()
			actor:drop_item(backpack)
			set_map_spot(backpack)
		end
	)
end

function set_map_spot(backpack)
	local name_short = read_if_exists(sys_ini, "r_string", backpack:section(), "inv_name_short", read_if_exists(sys_ini, "r_string", backpack:section(), "inv_name", nil))
	local text = string.format("%s: %s", game.translate_string("ui_st_dropped_backpack"), game.translate_string(name_short))
	hud_add_info_message("item_usage", text)
	level.map_add_object_spot_ser(backpack:id(), backpack_spot, text)
end

local actor_obj = get_actor_obj()
local saved_state = nil
local DEF_HUD_SECT = "backpack_hud"
local effect = {
	name = "effector_backpack",
	id = 66677,
}
local anims = {
	"anm_show",
	"anm_hide",
	"anm_idle",
}

function anm_snd_speed()
	local inj_limb = body_health.get_injured_limb()
	local has_injure_pain = (inj_limb == "hand" or inj_limb == "leg_hand") and body_health.get_pain_effect() >= 0
	local speed = has_injure_pain and ANM_SND_SLOWDOWN or 1
	return 1 / speed
end

function play_anim(state)
	if not actor_get_backpack() or SCRIPT_ANIM_PLAYING then
		idle_playing = false
	return end
	local community_hud_sect = DEF_HUD_SECT.."_"..actor:character_community()
	local hud_sect = sys_ini:section_exist(community_hud_sect) and community_hud_sect or DEF_HUD_SECT
		
	game.play_hud_motion(2, hud_sect, anims[state], true, anm_snd_speed(), false)
	idle_playing = (state == 3)
end

function skip_state()
	return actor_obj:is_actor_climb() or actor_obj:is_actor_climbing() or 
			actor_obj:is_actor_crouch() or actor_obj:is_actor_crouching() or 
			actor_obj:is_actor_creep() or actor_obj:is_actor_creeping()
end

function force_crouch(enable)
	if enable then
		saved_state = not skip_state() and actor_obj:get_state_wishful() or nil
		if saved_state then
			actor_obj:set_state_wishful(move_command.mcCrouch)
			actor_obj.clear_crouch = false
		end
	else
		if saved_state then
			actor_obj:set_state_wishful(saved_state)
			actor_obj.clear_crouch = true
		end
	end
end

function play_effects(enable)
	force_crouch(enable)
	play_anim(enable and 1 or 2)
	
	if SCRIPT_ANIM_PLAYING then
	return end
	
	if actor_get_backpack() then
		local snd_name = enable and "interface\\item_usage\\backpack_open" or "interface\\item_usage\\backpack_close"
		local snd_obj = xr_sound.get_safe_sound_object(snd_name)
		snd_obj:play(actor, 0, sound_object.s2d)
		snd_obj.frequency = anm_snd_speed()
		--snd_obj:play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
	end
	if not level.check_complex_effector(effect.id) then 
		level.add_complex_effector(effect.name, effect.id)
	end
end

function play_fast()
	return not actor_get_backpack()
end