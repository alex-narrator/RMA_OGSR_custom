-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_slot",   			fun = this.on_slot})
end

function get_light_sect(item)
	return read_if_exists(sys_ini, "r_string", item:section(), "light_definition", nil)
end
function get_light_sect_second(item)
	return read_if_exists(sys_ini, "r_string", item:section(), "light_definition_second", nil)
end

function can_switch(item)
	return not is_power_device(item) or item:binded_object():get_power_level() > 0
end

function set_torch_params(item)
	update_brightness(item)
	local torch_sect = item:section()
	local light_sect = alife():object(item:id()).is_second_mode and read_if_exists(sys_ini, "r_string", torch_sect, "light_definition_second", nil) or read_if_exists(sys_ini, "r_string", torch_sect, "light_definition", nil)

	local vis_ini = item:get_visual_ini()
	local range = read_if_exists(vis_ini, "r_float", light_sect, "range", 10)
	local angle = read_if_exists(vis_ini, "r_float", light_sect, "spot_angle", 90)
	
	local clr_rgba = split_string(read_if_exists(vis_ini, "r_string", light_sect, "color_r2", nil), ",")	

	local torch_obj = item:get_torch()	
	torch_obj:set_range(range)
	torch_obj:set_angle(math.rad(angle))
	torch_obj:set_rgb(clr_rgba[1], clr_rgba[2], clr_rgba[3])
end

function update_brightness(item)
	if not is_power_device(item) then
	return end
	local brightness = item:binded_object():get_power_level()
	local light_sect = read_if_exists(sys_ini, "r_string", item:section(), "light_definition", nil)
	local brightness_min_k = read_if_exists(item:get_visual_ini(), "r_float", light_sect, "brightness_min_k", 0.3)
	item:get_torch():set_brightness(math.clamp(brightness, brightness_min_k, 1))	
end

function switch_mode(item)
	alife():object(item:id()).is_second_mode = not alife():object(item:id()).is_second_mode
	xr_sound.get_safe_sound_object("torch\\snd_switch_on",sound_object.s2d):play_at_pos(actor,actor:position())
	set_torch_params(item)
end

function switch_torch(item)
	set_torch_params(item)
	item:get_torch():switch()
	xr_sound.get_safe_sound_object(item:is_power_on() and "torch\\snd_switch_on" or "torch\\snd_switch_off",sound_object.s2d):play_at_pos(actor,actor:position())
end

function on_slot(obj, prev_place)
	if obj:get_torch() and get_light_sect(obj) then
		set_torch_params(obj)
	end
end