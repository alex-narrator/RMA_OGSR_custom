-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_take",   			fun = this.on_take})
	sm:subscribe({signal = "on_pda_hack",   		fun = this.on_pda_hack})
	sm:subscribe({signal = "on_hud_state_switch", 	fun = this.on_state_switch})
end

function on_take(item)
	if actor_get_pda() and actor_get_pda():id() == item:id() then
		fill_owner_info(actor_get_pda():id())
	end
end

function fill_owner_info(id)
	local se_obj = alife():object(id)
	local parent = level.object_by_id(se_obj.parent_id)
	if not parent then
	return end
	local od = se_obj.owner_data
	
	if od == nil then
	return end
	
	if od.name ~= "" then
	return end
	
	od.name = parent:character_name()
	od.comm = parent:character_community()
	od.profile = parent:profile_name()
	od.rank = parent:character_rank()
	
	if parent:id() == actor:id() then
	return end
	
	local known_info = ""
	--видаляємо всі відомі NPC інфопорції та переносимо їх у ПДА
	for k, infoportion in pairs(parent:get_known_info()) do
		--log3("~parent %s - removing infoportion %s", parent:name(), infoportion)
		known_info = known_info..infoportion..","
		parent:disable_info_portion(infoportion)
	end
	
	local custom_known_info = storyline_data.custom_known_info[parent:story_id()]
	if custom_known_info then
		--log3("parent %s | custom_known_info %s", parent:name(), custom_known_info)
		for k, infoportion in pairs(custom_known_info) do
			--log3("~parent %s - add custom infoportion %s", parent:name(), infoportion)
			known_info = known_info..infoportion..","
		end	
	end
	
	--log3("~parent %s - pda has info line %s", parent:name(), known_info)
	od.info = known_info
	
	od.treasure = treasure_manager.try_get_treasure(parent)
end

function can_download_info(item)
	local se_obj = alife():object(item:id())
	return item:get_pda() and not is_actors_pda(item) and se_obj.was_hacked == false
end

function download_info(item)
	ogse_signals.get_mgr():call("on_pda_hack", item:id())
	local se_obj = alife():object(item:id())
	se_obj.was_hacked = true
end

function on_pda_hack(id)
	local se_obj = alife():object(id)
	local od = se_obj.owner_data
	
	use_info = split_string(od.info, ",")
	for _,infoportion in ipairs(use_info) do
		infoportion = string.trim(infoportion)
		--log3("~giving info %s from pda", infoportion)
		if not has_alife_info(infoportion) then
			actor:give_info_portion(infoportion) 
		end
	end
	
	if od.treasure ~= "" then
		treasure_manager.give_treasure(od.treasure)
	end
end

function on_state_switch(item, state, old_state)
	if not item:get_pda() then
	return end
	if old_state == global_flags.eHidden then
		set_pda_params(vector():set(0.5,0,0))
	end
	if state == global_flags.eHiding then
		local delay = read_if_exists(sys_ini, "r_float", item:section(), "screen_off_delay", 0.1)
		add_time_delayed_action(delay, 
			function()
				set_pda_params(vector():set(0.5,0,0))
			end
		)		
		return
	end
	if state == global_flags.eShowing then
		local delay = read_if_exists(sys_ini, "r_float", item:section(), "screen_on_delay", 0.1)
		add_time_delayed_action(delay, 
			function()
				if item:is_power_on() then
					set_pda_params(vector():set(0,0,0))
				end
			end
		)	
		return
	end
	if not item:is_power_on() and old_state == global_flags.eShowing then
		play_power_off_anim(item)
	end
end

function play_power_off_anim(item)
	add_update_delayed_action(1,
		function()
			block_non_move_action(true)
			local length = item:play_hud_motion("anm_empty")
			local snd_name = read_if_exists(sys_ini, "r_string", item:section(), "snd_empty", nil)
			xr_sound.get_safe_sound_object(snd_name):play(actor, 0, sound_object.s2d)
			add_time_delayed_action(
				length * 0.001 - 0.9,
				function() 
					block_non_move_action(false)
					actor:activate_slot(NO_ACTIVE_SLOT)
				end
			)
		end
	)
end