-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	--sm:subscribe({signal = "on_take",   			fun = this.on_take})
	sm:subscribe({signal = "on_pda_hack",   		fun = this.on_pda_hack})
	sm:subscribe({signal = "on_hud_state_switch", 	fun = this.on_state_switch})
end

local msg_box = nil
local error_msg = nil

function on_take(item)
	if actor_get_pda() and actor_get_pda():id() == item:id() then
		fill_owner_info(actor_get_pda():id())
	end
end

function generate_password(rank)
	local passwords = read_if_exists(sys_ini, "r_string", "passwords_by_rank", rank, nil)
	if not passwords then
		log3("~no passwords for rank %s", rank)
	return nil end
	passwords = split_string(passwords, ",")
	return passwords[math.random(1, #passwords)]
end

function fill_owner_info(id, desired_password)
	local se_obj = alife():object(id)
	local parent = level.object_by_id(se_obj.parent_id)
	if not parent then
	return end
	local od = se_obj.owner_data
	
	if od == nil then
	return end

	se_obj.lock_state = 1
	
	-- if od.name ~= "" and od.name ~= actor:character_name() then
	-- return end
	
	od.name = parent:character_name()
	od.comm = parent:character_community()
	od.profile = parent:profile_name()
	od.rank = parent:character_rank()
	od.password = desired_password or generate_password(ranks.get_val_rank_name(od.rank))
	if not od.password then
		log3("!failed to generate PDA password for owner: %s, ID %s", parent:character_name(), parent:id())
		od.password = "1111"
	end
	-- if parent:id() == actor:id() then
	-- return end
	
	local known_info = ""
	--видаляємо всі відомі NPC інфопорції та переносимо їх у ПДА
	for k, infoportion in pairs(parent:get_known_info()) do
		--log3("~parent %s - removing infoportion %s", parent:name(), infoportion)
		known_info = known_info..infoportion..","
		parent:disable_info_portion(infoportion)
	end
	
	local custom_known_info = storyline_data.custom_known_info[parent:story_id()]
	if custom_known_info then
		--log3("parent %s | custom_known_info %s", parent:name(), custom_known_info)
		for k, infoportion in pairs(custom_known_info) do
			--log3("~parent %s - add custom infoportion %s", parent:name(), infoportion)
			known_info = known_info..infoportion..","
		end	
	end
	
	--log3("~parent %s - pda has info line %s", parent:name(), known_info)
	od.info = known_info
	
	od.treasure = treasure_manager.try_get_treasure(parent)
end

function verify_password(item, input_password)
	local se_obj = alife():object(item:id())
	local od = se_obj.owner_data
	local password = od.password
	
	se_obj.unlock_attempts = se_obj.unlock_attempts - 1
	
	local text
	
	if input_password == password then
		log3("~password correct")
		news_manager.custom_news(string.format("%s %s [%s]", game.translate_string("st_device_pda_name"), od.name, game.translate_string(ranks.get_val_rank_name(od.rank))), game.translate_string("st_device_password_accepted"), "ui_pda_dark_back")
		download_info(item)
	elseif can_try_hack(item) then
		log3("~password incorrect")
		try_hack(item)
	else
		se_obj.lock_state = 2
		if error_msg then
			error_msg:HideWnd()
			error_msg = nil
		end
		error_msg = ui_message_box.MessageBoxErrorWnd()
		error_msg:SetErrorText(game.translate_string("st_device_dead_locked"), game.translate_string("st_device_dead_locked_tip"))
		news_manager.custom_news(string.format("%s %s [%s]", game.translate_string("st_device_pda_name"), od.name, game.translate_string(ranks.get_val_rank_name(od.rank))), game.translate_string("st_device_dead_locked"), "ui_pda_dark_back")
	end
	local cell_item = actor_menu:GetCellItem(item)
	if cell_item then
		cell_item:ForceUpdate()
	end	
end

function can_try_hack(item)
	local se_obj = alife():object(item:id())
	return is_pda_hackable(item) and se_obj.lock_state == 1 and se_obj.unlock_attempts > 0
end

function try_hack(item)
	local se_obj = alife():object(item:id())
	
	if msg_box then
		msg_box:HideWnd()
		msg_box = nil
	end
	
	msg_box = ui_message_box.MessageBoxPasswordWnd()
	
	local od = se_obj.owner_data
	local password = od.password
	local password_tip = shuffle_string(password)
	local msg = string.format("%s: %s\\n-\\n%s: %s%s", 
		game.translate_string("st_password_tip"), password_tip, 
		game.translate_string("st_unlock_attempts"), se_obj.unlock_attempts > 1 and "%c[default]" or "%c[red]", se_obj.unlock_attempts)
	
	msg_box:InitAction(msg, verify_password, item)
end

function download_info(item)
	ogse_signals.get_mgr():call("on_pda_hack", item:id())
end

function on_pda_hack(id)
	local se_obj = alife():object(id)
	se_obj.lock_state = 0
	local od = se_obj.owner_data
	
	use_info = split_string(od.info, ",")
	for _,infoportion in ipairs(use_info) do
		infoportion = string.trim(infoportion)
		--log3("~giving info %s from pda", infoportion)
		if not has_alife_info(infoportion) then
			actor:give_info_portion(infoportion) 
		end
	end
	
	if od.treasure ~= "" then
		treasure_manager.give_treasure(od.treasure)
	end
	
end

function on_state_switch(item, state, old_state)
	if not item:get_pda() then
	return end
	if old_state == global_flags.eHidden then
		set_pda_params(vector():set(0.5,0,0))
	end
	if state == global_flags.eHiding then
		local delay = read_if_exists(sys_ini, "r_float", item:section(), "screen_off_delay", 0.1)
		add_time_delayed_action(delay, 
			function()
				set_pda_params(vector():set(0.5,0,0))
			end
		)		
		return
	end
	if state == global_flags.eShowing then
		local delay = read_if_exists(sys_ini, "r_float", item:section(), "screen_on_delay", 0.1)
		add_time_delayed_action(delay, 
			function()
				if item:is_power_on() then
					set_pda_params(vector():set(0,0,0))
				end
			end
		)	
		return
	end
	if not item:is_power_on() and old_state == global_flags.eShowing then
		play_power_off_anim(item)
	end
end

function play_power_off_anim(item)
	if not actor:active_item() or actor:active_item():id() ~= item:id() then
	return end
	item:zoom_out()
	add_update_delayed_action(1,
		function()
			block_non_move_action(true)
			local length = item:play_hud_motion("anm_empty")
			local snd_name = read_if_exists(sys_ini, "r_string", item:section(), "snd_empty", nil)
			xr_sound.get_safe_sound_object(snd_name):play(actor, 0, sound_object.s2d)
			add_time_delayed_action(
				length * 0.001 - 0.9,
				function() 
					block_non_move_action(false)
					actor:activate_slot(NO_ACTIVE_SLOT)
				end
			)
		end
	)
end