-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_slot",   							fun = this.on_slot})
	sm:subscribe({signal = "on_ruck",   							fun = this.on_ruck})
	sm:subscribe({signal = "on_drop",   							fun = this.on_ruck})
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   			fun = this.on_zoom_in})
	sm:subscribe({signal = "on_actor_weapon_zoom_out", 				fun = this.on_zoom_out})
	sm:subscribe({signal = "on_death",   							fun = this.on_death})
	sm:subscribe({signal = "on_key_press",   						fun = this.on_key_press})
	sm:subscribe({signal = "on_actor_weapon_scope_mode_change",  	fun = this.on_scope_mode_change})
end

--//слоти в яких можуть бути предмети з ПНБ
local nvd_slots = {
	OUTFIT_SLOT,
	TORCH_SLOT,
	HELMET_SLOT,
}

function get_current_nvd()
	for k, v in ipairs(nvd_slots) do
		item = actor:item_in_slot(v)
		if item and get_nvd_params(item:section()) and alife():object(item:id()).is_nvd_on ~= nil then
			return item
		end
	end
	return nil
end

function get_nvd_params(sect)
	local _tmp = read_if_exists(sys_ini, "r_string", sect, "nv_color", nil)
	if not _tmp then return nil end
	_tmp = split_string(_tmp, ",")
	local params = {
		--//color and intensity
		R = _tmp[1], G = _tmp[2], B = _tmp[3], INTENSITY = read_if_exists(sys_ini, "r_float", sect, "nv_intensity", 2),
		--//effects
		NOISE = read_if_exists(sys_ini, "r_float", sect, "nv_noise", 0),
		SCANLINES = read_if_exists(sys_ini, "r_float", sect, "nv_scanlines", 0),
		VIGNETTE = read_if_exists(sys_ini, "r_float", sect, "nv_vignette", 0),
		WORK_AREA = read_if_exists(sys_ini, "r_float", sect, "nv_work_area", 1),
	}
	return params
end

function can_switch(item)
	return (not is_power_device(item) or item:binded_object():get_power_level() > 0) and item:condition() > 0
end

function switch_nvd(item)
	local sobj = alife():object(item:id())
	sobj.is_nvd_on = not sobj.is_nvd_on
	
	local snd_on = read_if_exists(sys_ini, "r_string", item:section(), "snd_night_vision_on", nil)
	local snd_off = read_if_exists(sys_ini, "r_string", item:section(), "snd_night_vision_off", nil)	
	
	local snd_name = sobj.is_nvd_on and snd_on or snd_off
	if snd_name then
		xr_sound.get_safe_sound_object(snd_name):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)--play_at_pos(actor,actor:position())
	end
	local sect = item:section()
	local wpn = item:get_weapon()
	if wpn and wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope) then
		sect = wpn:get_addon_name(addon.scope)
	end
	set_nvd_effector(sect, sobj.is_nvd_on)
end

function enable_nvd(item, power_on)
	--log3("~enable_nvd for item %s | power_on %s", item:name(), power_on)
	local sobj = alife():object(item:id())
	sobj.is_nvd_on = power_on
	
	local snd_on = read_if_exists(sys_ini, "r_string", item:section(), "snd_night_vision_on", nil)
	local snd_off = read_if_exists(sys_ini, "r_string", item:section(), "snd_night_vision_off", nil)
	
	local snd_name = sobj.is_nvd_on and snd_on or snd_off	
	xr_sound.get_safe_sound_object(snd_name):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)--play_at_pos(actor,actor:position())
	set_nvd_effector(item:section(), sobj.is_nvd_on)
end

function set_nvd_effector(sect, enable)
	--log3("~set_nvd_effector item %s, enable %s", sect, enable)
	if not enable then
		set_pnv_color(0,0,0,0)
		set_pnv_params(0,0,0,0)
	else
		local params = get_nvd_params(sect)
		set_pnv_color(params.R, params.G, params.B, params.INTENSITY)
		set_pnv_params(params.NOISE, params.SCANLINES, params.VIGNETTE, params.WORK_AREA)
	end
end

function on_slot(obj, prev_place)
	if obj:is_weapon() then return end
	local sobj = alife():object(obj:id())
	--log3("~item %s | get_nvd_params %s", obj:section(), not not get_nvd_params(obj:section()))
	if get_nvd_params(obj:section()) then
		if not xr_conditions.black_screen() then
			sobj.is_nvd_on = false
		end
		if sobj.is_nvd_on and can_switch(obj) then
			enable_nvd(obj, true)
		end
	end
end

function on_ruck(obj, prev_place)
	if obj:is_weapon() then return end
	local sobj = alife():object(obj:id())
	if get_nvd_params(obj:section()) and prev_place == item_place.slot then
		if sobj.is_nvd_on then
			enable_nvd(obj, false)
		end
	end
end

function is_nvd_on()
	local nvd = get_current_nvd()
	return nvd and alife():object(nvd:id()).is_nvd_on
end

function is_item_nvd_on(item)
	local nvd = get_current_nvd()
	return nvd and nvd:id() == item:id() and alife():object(nvd:id()).is_nvd_on
end

function on_death(victim, killer)
	if victim:id() ~= actor:id() then
	return end
	if get_current_nvd() then
		on_ruck(get_current_nvd(), item_place.slot)
	end
end

--//scope night vision

function aim_nvd_weapon()
	local act_item = actor:active_item()
	return act_item and act_item:get_weapon() and act_item:get_weapon().zoom_mode and get_nv_sect(act_item) and not act_item:get_weapon():aim_alt_mode()
end

function get_nv_sect(item)
	local wpn = item:get_weapon_m()
	if not wpn then
	return nil end
	
	if wpn:aim_alt_mode() then
	return nil end
	
	local sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or item:section()
	return get_nvd_params(sect) and sect or nil
end

function wpn_scope_allow_nvd(weapon)
	local wpn = weapon:get_weapon()
	local sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or weapon:section()
	return read_if_exists(sys_ini, "r_bool", sect, "scope_allow_nvd", false) or wpn:aim_alt_mode()
end

function on_zoom_in(weapon)
	local nv_sect = get_nv_sect(weapon)
	if not nv_sect then return end
	level.add_call(
		function() 
			return not wpn_IsRotatingToZoom(weapon)
		end,
		function() 
			set_nvd_effector(nv_sect, alife():object(weapon:id()).is_nvd_on)
		end
	)
end

function on_zoom_out(weapon)
	if is_nvd_on() then
	return end
	set_nvd_effector(get_nv_sect(weapon), false)
end

local nvd_action = {
	[key_bindings.kNIGHT_VISION] = true,
}
local zoom_action = {
	[key_bindings.kWPN_ZOOM] = true,
}

function on_key_press(key, game_action)
	try_switch_scope_nvd(key, game_action)
	try_block_aim(key, game_action)
end

function try_switch_scope_nvd(key, game_action)
	if not nvd_action[game_action] then
	return end
	if is_nvd_on() then
	return end
	local act_item = actor:active_item()
	if not act_item or not act_item:is_zoomed() or not get_nv_sect(act_item) then
	return end
	switch_nvd(act_item)
	if act_item:get_weapon() and act_item:get_weapon():second_vp_enabled() then
	return end
	level.add_complex_effector("fire_mode", 1918)
end

function try_block_aim(key, game_action)
	if not zoom_action[game_action] then
	return end
	if is_nvd_on() then
		local wpn = actor:active_item() and actor:active_item():get_weapon()
		if not wpn then
		return end
		if wpn:is_addon_attached(addon.scope) and not wpn_scope_allow_nvd(actor:active_item()) then
			hud_add_info_message("item_usage", game.translate_string("st_nvd_block_scope_aim"), 2)
			actor_obj:block_action(game_action)
			add_update_delayed_action(1, function() actor_obj:unblock_action(game_action) end)
			return
		end
	end	
end

function on_scope_mode_change(weapon)
	if is_nvd_on() then
		local wpn = weapon:get_weapon()
		if not wpn then
		return end
		if wpn:is_addon_attached(addon.scope) and not wpn_scope_allow_nvd(actor:active_item()) then
			hud_add_info_message("item_usage", game.translate_string("st_nvd_block_scope_aim"), 2)
			weapon:zoom_out()
			return
		end
	end
end