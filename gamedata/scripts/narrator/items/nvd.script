-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_slot",   			fun = this.on_slot})
	sm:subscribe({signal = "on_ruck",   			fun = this.on_ruck})
	sm:subscribe({signal = "on_drop",   			fun = this.on_ruck})
end

local on_snd = [[device\torch\nv_start]]
local off_snd = [[device\torch\nv_off]]

function get_nvd_params(item)
	if not is_nvd(item) then return nil end
	local sect = item:section()
	local _tmp = read_if_exists(sys_ini, "r_string", sect, "nv_color", nil)
	if not _tmp then return nil end
	_tmp = split_string(_tmp, ",")
	local params = {
		--//color and intensity
		R = _tmp[1], G = _tmp[2], B = _tmp[3], INTENSITY = read_if_exists(sys_ini, "r_float", sect, "nv_intensity", 2),
		--//effects
		NOISE = read_if_exists(sys_ini, "r_float", sect, "nv_noise", 0),
		SCANLINES = read_if_exists(sys_ini, "r_float", sect, "nv_scanlines", 0),
		VIGNETTE = read_if_exists(sys_ini, "r_float", sect, "nv_vignette", 0),
		FLICKERING = read_if_exists(sys_ini, "r_float", sect, "nv_flickering", 0),
	}
	return params
end

function can_switch(item)
	return (not is_power_device(item) or item:binded_object():get_power_level() > 0) and item:condition() > 0
end

function switch_nvd(item)
	local sobj = alife():object(item:id())
	sobj.is_nvd_on = not sobj.is_nvd_on
	local snd_name = sobj.is_nvd_on and on_snd or off_snd
	xr_sound.get_safe_sound_object(snd_name,sound_object.s2d):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)--play_at_pos(actor,actor:position())
	set_nvd_effector(item, sobj.is_nvd_on)
end

function enable_nvd(item, power_on)
	local sobj = alife():object(item:id())
	sobj.is_nvd_on = power_on
	local snd_name = sobj.is_nvd_on and on_snd or off_snd
	xr_sound.get_safe_sound_object(snd_name,sound_object.s2d):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)--play_at_pos(actor,actor:position())
	set_nvd_effector(item, sobj.is_nvd_on)
end

function set_nvd_effector(item, enable)
	--log3("set_nvd_effector item %s, enable %s", item:name(), enable)
	if not enable then
		set_pnv_color(0,0,0,0)
		set_pnv_params(0,0,0,0)
	else
		local params = get_nvd_params(item)
		set_pnv_color(params.R, params.G, params.B, params.INTENSITY)
		set_pnv_params(params.NOISE, params.SCANLINES, params.VIGNETTE, params.FLICKERING)
	end
end

function on_slot(obj, prev_place)
	local sobj = alife():object(obj:id())
	if get_nvd_params(obj) then
		if not xr_conditions.black_screen() then
			sobj.is_nvd_on = false
		end
		if sobj.is_nvd_on and can_switch(obj) then
			enable_nvd(obj, true)
		end
	end
end

function on_ruck(obj, prev_place)
	local sobj = alife():object(obj:id())
	if get_nvd_params(obj) and prev_place == item_place.slot then
		if sobj.is_nvd_on then
			enable_nvd(obj, false)
		end
	end
end

function is_nvd_on(item)
	return actor_get_nvd() and item:id() == actor_get_nvd():id() and alife():object(item:id()).is_nvd_on
end