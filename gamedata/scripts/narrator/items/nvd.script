-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_spawn",   							fun = this.on_spawn})
	sm:subscribe({signal = "on_slot",   							fun = this.on_slot})
	sm:subscribe({signal = "on_ruck",   							fun = this.on_ruck})
	sm:subscribe({signal = "on_drop",   							fun = this.on_ruck})
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   			fun = this.on_zoom_in})
	sm:subscribe({signal = "on_actor_weapon_zoom_out", 				fun = this.on_zoom_out})
	sm:subscribe({signal = "on_death",   							fun = this.on_death})
	sm:subscribe({signal = "on_key_press",   						fun = this.on_key_press})
	sm:subscribe({signal = "on_actor_weapon_scope_mode_change",  	fun = this.on_scope_mode_change})
end

local console = get_console()

--//слоти в яких можуть бути предмети з ПНБ
local nvd_slots = {
	OUTFIT_SLOT,
	TORCH_SLOT,
	HELMET_SLOT,
}

local INTENSITY_MIN, INTENSITY_MAX, INTENSITY_DEFAULT = 0.5, 3, 1.5
local CURR_INTENSITY = INTENSITY_DEFAULT
local operate_sound

function get_current_intensity()
	return CURR_INTENSITY
end

function get_current_nvd()
	for k, v in ipairs(nvd_slots) do
		item = actor:item_in_slot(v)
		if item and get_nvd_params(item:section()) and alife():object(item:id()).is_nvd_on ~= nil then
			return item
		end
	end
	return nil
end

function get_nvd_params(sect)
	local NVD_MODE = read_if_exists(sys_ini, "r_u32", sect, "nv_mode", nil)
	if not NVD_MODE then return nil end
	local nv_color = read_if_exists(sys_ini, "r_string", sect, "nv_color", "0.2, 0.3, 0.2")
	nv_color = split_string(nv_color, ",")
	local params = {
		--//color and intensity
		R 				= nv_color[1], 
		G 				= nv_color[2], 
		B 				= nv_color[3], 
		GAIN 			= read_if_exists(sys_ini, "r_float", sect, "nv_gain", 			2),
		--//effects
		RADIUS 			= read_if_exists(sys_ini, "r_float", sect, "nv_radius", 		0.5),
		NOISE 			= read_if_exists(sys_ini, "r_float", sect, "nv_noise", 			0),
		SCANLINES 		= read_if_exists(sys_ini, "r_float", sect, "nv_scanlines", 		0),
		SCINTILLATION 	= read_if_exists(sys_ini, "r_float", sect, "nv_scintillation", 	0),
		VIGNETTE_SIZE 	= read_if_exists(sys_ini, "r_float", sect, "nv_vignette_size", 	0),
		VIGNETTE_MODE 	= read_if_exists(sys_ini, "r_float", sect, "nv_vignette_mode", 	0),
		GLITCH 			= read_if_exists(sys_ini, "r_float", sect, "nv_glitch", 		0),
		TUBE_NUM 		= read_if_exists(sys_ini, "r_float", sect, "nv_tube_num", 		2),
		STEP 			= read_if_exists(sys_ini, "r_float", sect, "nv_step", 			0.5),
		--STEP_COUNT 		= read_if_exists(sys_ini, "r_float", sect, "nv_step_count", 	1),
		
		HUD_INFO_OFFSET = read_if_exists(sys_ini, "r_string", sect, "nv_hud_info_offset", nil),
	}
	--//heatvision params
	local tmp 			= read_if_exists(sys_ini, "r_string", sect, "hv_steps", 		"0, 0, 0, 0")
	tmp = split_string(tmp, ",")
	params.HV_STEPS = {
		x = tmp[1],
		y = tmp[2],
		z = tmp[3],
		w = tmp[4],
	}
	tmp 				= read_if_exists(sys_ini, "r_string", sect, "hv_blurring", 		"0, 0, 0, 0")
	tmp = split_string(tmp, ",")
	params.HV_BLUR = {
		x = tmp[1],
		y = tmp[2],
		z = tmp[3],
		w = tmp[4],
	}
	tmp 				= read_if_exists(sys_ini, "r_string", sect, "hv_fade_distance", "0, 0, 0, 0")
	tmp = split_string(tmp, ",")
	params.HV_FADE_DIST = {
		x = tmp[1],
		y = tmp[2],
		z = tmp[3],
		w = tmp[4],
	}
	
	return params
end

function can_switch(item)
	return (not is_power_device(item) or item:binded_object():get_power_level() > 0) and item:condition() > 0
end

function can_switch_intensity(item)
	return get_nvd_params(item:section()).STEP > 0
end

function switch_nvd_intensity(item)
	local sect = item:section()
	local params = get_nvd_params(sect)
	-- local max_i = params.STEP * params.STEP_COUNT
	-- local min_i = -max_i
	CURR_INTENSITY = CURR_INTENSITY + params.STEP
	if CURR_INTENSITY > INTENSITY_MAX then--max_i then
		CURR_INTENSITY = INTENSITY_MIN--min_i
	end
	if CURR_INTENSITY < INTENSITY_MIN then --min_i then
		CURR_INTENSITY = INTENSITY_MAX--max_i
	end
	set_nvd_effector(sect, alife():object(item:id()).is_nvd_on)
	-- local switch_snd = read_if_exists(sys_ini, "r_string", sect, "snd_nvd_switch", "interface\\mark_adjust")
	-- if switch_snd then
		-- xr_sound.get_safe_sound_object(switch_snd):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
	-- end
	-- level.add_cam_effector([[camera_effects\item_use\mark_adjust.anm]], 5559, false, "")
	play_switch_sound(sect)
end

function play_switch_sound(sect)
	local switch_snd = read_if_exists(sys_ini, "r_string", sect, "snd_nvd_switch", "interface\\mark_adjust")
	if switch_snd then
		xr_sound.get_safe_sound_object(switch_snd):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
	end
	level.add_cam_effector([[camera_effects\item_use\mark_adjust.anm]], 5559, false, "")
end

function switch_nvd(item)
	local sobj = alife():object(item:id())
	sobj.is_nvd_on = not sobj.is_nvd_on
	
	local sect = item:section()
	local wpn = item:get_weapon()
	if wpn and wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope) then
		sect = wpn:get_addon_name(addon.scope)
	end
	
	play_nvd_sound(sect, sobj.is_nvd_on)
	
	set_nvd_effector(sect, sobj.is_nvd_on)
end

function enable_nvd(item, power_on)
	--log3("~enable_nvd for item %s | power_on %s", item:name(), power_on)
	local sobj = alife():object(item:id())
	sobj.is_nvd_on = power_on
	
	play_nvd_sound(item:section(), power_on)
	
	set_nvd_effector(item:section(), sobj.is_nvd_on)
end

function play_nvd_sound(section, is_on)
	local snd_on = read_if_exists(sys_ini, "r_string", section, "snd_nvd_on", nil)
	local snd_off = read_if_exists(sys_ini, "r_string", section, "snd_nvd_off", nil)
	
	local snd_name = is_on and snd_on or snd_off
	local action_sound
	if snd_name then
		action_sound = xr_sound.get_safe_sound_object(snd_name)
		action_sound:play(actor, 0, sound_object.s2d)
	end
	
	local snd_operate = read_if_exists(sys_ini, "r_string", section, "snd_nvd_operate", nil)
	if snd_operate then
		if is_on then
			level.add_call(
				function()
					return not action_sound or not action_sound:playing()
				end,
				function()
					operate_sound = xr_sound.get_safe_sound_object(snd_operate)
					operate_sound:play(actor, 0, sound_object.s2d + sound_object.looped)
				end
			)
		else
			if operate_sound then
				operate_sound:stop()
				operate_sound = nil
			end
		end
	end
end

function set_nvd_effector(sect, enable)
	--log3("~set_nvd_effector item %s, enable %s", sect, enable)
	if not enable then
		console:execute("r_pnv_mode 0")
		CURR_INTENSITY = INTENSITY_DEFAULT
	else
		local params = get_nvd_params(sect)
		console:execute("r_pnv_mode 1")
		
		shader_set_custom_param("pnv_color", params.R, params.G, params.B, 0)
		
		console:execute("r_pnv_gain_current "..params.GAIN)
		console:execute("r_pnv_gain_offset "..CURR_INTENSITY)
		
		console:execute("r_pnv_radius "..params.RADIUS)
		console:execute("r_pnv_noise "..params.NOISE)
		console:execute("r_pnv_scanlines "..params.SCANLINES)
		local scint = 1 - params.SCINTILLATION
		console:execute("r_pnv_scintillation "..scint)
		
		console:execute("r_pnv_size_vignet "..params.VIGNETTE_SIZE)
		console:execute("r_pnv_alfa_vignete "..params.VIGNETTE_MODE)
		
		console:execute("r_pnv_glitch "..params.GLITCH)
		console:execute("r_pnv_num_tubes "..params.TUBE_NUM)
		
		shader_set_custom_param("heat_vision_steps", params.HV_STEPS.x, params.HV_STEPS.y, params.HV_STEPS.z, params.HV_STEPS.w)
		shader_set_custom_param("heat_vision_blurring", params.HV_BLUR.x, params.HV_BLUR.y, params.HV_BLUR.z, params.HV_BLUR.w)
		shader_set_custom_param("heat_fade_distance", params.HV_FADE_DIST.x, params.HV_FADE_DIST.y, params.HV_FADE_DIST.z, params.HV_FADE_DIST.w)
	end
end

function on_slot(obj, prev_place)
	if obj:is_weapon() then return end
	local sobj = alife():object(obj:id())
	--log3("~item %s | get_nvd_params %s", obj:section(), not not get_nvd_params(obj:section()))
	if get_nvd_params(obj:section()) then
		if not xr_conditions.black_screen() then
			sobj.is_nvd_on = false
		end
		if sobj.is_nvd_on and can_switch(obj) then
			enable_nvd(obj, true)
		end
	end
end

function on_ruck(obj, prev_place)
	if obj:is_weapon() then return end
	local sobj = alife():object(obj:id())
	if get_nvd_params(obj:section()) and prev_place == item_place.slot then
		--log3("~nvd to ruck")
		if sobj.is_nvd_on then
			enable_nvd(obj, false)
			CURR_INTENSITY = INTENSITY_DEFAULT
		end
	end
end

function is_nvd_on()
	local nvd = get_current_nvd()
	return nvd and alife():object(nvd:id()).is_nvd_on
end

function is_item_nvd_on(item)
	local nvd = get_current_nvd()
	return nvd and nvd:id() == item:id() and alife():object(nvd:id()).is_nvd_on
end

function on_death(victim, killer)
	if victim:id() ~= actor:id() then
	return end
	if get_current_nvd() then
		on_ruck(get_current_nvd(), item_place.slot)
	end
end

function on_spawn()
	set_nvd_effector(nil, false)
end

--//scope night vision

function aim_nvd_weapon()
	-- local act_item = actor:active_item()
	-- return act_item and act_item:get_weapon() and act_item:get_weapon().zoom_mode and get_nv_sect(act_item) and not act_item:get_weapon():aim_alt_mode()
	local act_item = actor:active_item()
	if not act_item then
	return false end
	local wpn = act_item:get_weapon()
	if not wpn then
	return false end
	if not wpn:is_3dss_enabled() then
	return false end	
	if not wpn.zoom_mode then
	return false end
	-- local sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or act_item:section()
	-- return read_if_exists(sys_ini, "r_u32", sect, "s3ds_image_type", 0) == IT_NV
	return shader_get_custom_param_vector("s3ds_param_3").x == IT_NV
end

function aim_hv_weapon()
	-- local act_item = actor:active_item()
	-- return act_item and act_item:get_weapon() and act_item:get_weapon().zoom_mode and get_nv_sect(act_item) and not act_item:get_weapon():aim_alt_mode()
	local act_item = actor:active_item()
	if not act_item then
	return false end
	local wpn = act_item:get_weapon()
	if not wpn then
	return false end
	if not wpn:is_3dss_enabled() then
	return false end	
	if not wpn.zoom_mode then
	return false end
	-- local sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or act_item:section()
	-- return read_if_exists(sys_ini, "r_u32", sect, "s3ds_image_type", 0) > IT_NV
	return shader_get_custom_param_vector("s3ds_param_3").x > IT_NV
end

function get_nv_sect(item)
	local wpn = item:get_weapon_m()
	if not wpn then
	return nil end
	
	if wpn:aim_alt_mode() then
	return nil end
	
	local sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or item:section()
	return get_nvd_params(sect) and sect or nil
end

function wpn_scope_allow_nvd(weapon)
	local wpn = weapon:get_weapon()
	local sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or weapon:section()
	return read_if_exists(sys_ini, "r_bool", sect, "scope_allow_nvd", true) or wpn:aim_alt_mode()
end

function on_zoom_in(weapon)
	local nv_sect = get_nv_sect(weapon)
	if not nv_sect then return end
	CURR_INTENSITY = 0
	level.add_call(
		function() 
			return not wpn_IsRotatingToZoom(weapon)
		end,
		function() 
			set_nvd_effector(nv_sect, alife():object(weapon:id()).is_nvd_on and not weapon:get_gl_mode())
		end
	)
end

function on_zoom_out(weapon)
	if is_nvd_on() then
	return end
	set_nvd_effector(get_nv_sect(weapon), false)
end

local nvd_action = {
	[key_bindings.kNIGHT_VISION] = true,
}
local zoom_action = {
	[key_bindings.kWPN_ZOOM] = true,
}

function on_key_press(key, game_action)
	try_switch_scope_nvd(key, game_action)
	try_block_aim(key, game_action)
	try_switch_nvd_intensity(key, game_action)
end

function try_switch_nvd_intensity(key, game_action)
	if not nvd_action[game_action] then
	return end
	if not key_state(bind_to_dik(key_bindings.kADDITIONAL_ACTION)) then
	return end
	if not actor_hands_free() then
	return end
	local nvd = get_current_nvd()
	if not nvd then
	return end
	if not can_switch(nvd) or not can_switch_intensity(nvd) then
	return end
	switch_nvd_intensity(nvd)
end

function try_switch_scope_nvd(key, game_action)
	if not nvd_action[game_action] then
	return end
	if is_nvd_on() then
	return end
	local act_item = actor:active_item()
	if not act_item or not act_item:is_zoomed() or not get_nv_sect(act_item) then
	return end
	switch_nvd(act_item)
	-- if act_item:get_weapon() and act_item:get_weapon():second_vp_enabled() then
	-- return end
	level.add_complex_effector("fire_mode", 1918)
end

function try_block_aim(key, game_action)
	if not zoom_action[game_action] then
	return end
	if is_nvd_on() then
		local wpn = actor:active_item() and actor:active_item():get_weapon()
		if not wpn then
		return end
		if wpn:is_addon_attached(addon.scope) and not wpn_scope_allow_nvd(actor:active_item()) then
			hud_add_info_message("item_usage", game.translate_string("st_nvd_block_scope_aim"), 2)
			actor_obj:block_action(game_action)
			add_update_delayed_action(1, function() actor_obj:unblock_action(game_action) end)
			return
		end
	end	
end

function on_scope_mode_change(weapon)
	if is_nvd_on() then
		local wpn = weapon:get_weapon()
		if not wpn then
		return end
		if wpn:is_addon_attached(addon.scope) and not wpn_scope_allow_nvd(actor:active_item()) then
			hud_add_info_message("item_usage", game.translate_string("st_nvd_block_scope_aim"), 2)
			weapon:zoom_out()
			return
		end
	end
end