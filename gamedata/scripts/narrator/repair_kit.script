-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "inv_drag_drop", fun = this.try_repair})
end

function try_repair(obj, drop_on_obj)
	if not can_repair(obj, drop_on_obj) then
	return false end
	show_repair_wnd(obj, drop_on_obj)
end

function can_repair(obj, drop_on_obj)
	if not drop_on_obj then
	return false end
	local repair_type = read_if_exists(sys_ini, "r_float", obj:section(), "repair_type", 0)
	local can_repair = 
		(repair_type == 1 and drop_on_obj:is_knife()) or
		(repair_type == 2 and drop_on_obj:is_weapon_magazined()) or
		(repair_type == 3 and drop_on_obj:is_outfit())
	return can_repair and check_condition(obj, drop_on_obj)
end

function get_rank_k()
	local rank = actor:character_rank()
	
	if rank < 300 then 		--novice
		return 0.8
	elseif rank < 600 then 	--experienced
		return 0.9
	elseif rank < 900 then 	--veteran
		return 1.1
	else					--master
		return 1.2
	end
end

function check_condition(obj, drop_on_obj)
	local victim_cond = drop_on_obj:condition()
	local min_cond = read_if_exists(sys_ini, "r_float", obj:section(), "condition_threshold", 0)
	return victim_cond > 0 and victim_cond < 1 and min_cond and victim_cond > min_cond
end

function show_repair_wnd(obj, drop_on_obj)
	local repair_msg_box = ui_message_box.MessageBoxWnd()
	local msg_text = string.format(
		"%s %s\\n%s %s ?", 
		game.translate_string("st_repair_item"), 
		game.translate_string(get_inv_name(drop_on_obj:section())), 
		game.translate_string("st_repair_with"), 
		game.translate_string(get_inv_name(obj:section())))
	repair_msg_box:InitAction(msg_text, repair, obj, drop_on_obj)
end

repair_effector_id = 20000

function repair(obj, drop_on_obj)
	local rep_kit_sect = obj:section()
	local cond_gain = read_if_exists(sys_ini, "r_float", rep_kit_sect, "repair_condition_gain", 0)
	drop_on_obj:change_condition(cond_gain * get_rank_k())
	local repair_count = read_if_exists(sys_ini, "r_float", rep_kit_sect, "repair_count", 0)
	if repair_count > 0 then
		obj:change_condition(-1/repair_count)
		if obj:condition() == 0 then
			alife():release(alife():object(obj:id()), true)
		end
	end
	local repair_sound = read_if_exists(sys_ini, "r_string", rep_kit_sect, "use_sound", nil)
	if repair_sound then
		xr_sound.get_safe_sound_object(repair_sound,sound_object.s2d):play_at_pos(actor,actor:position())
	end
	local repair_effector = read_if_exists(sys_ini, "r_string", rep_kit_sect, "use_effector", nil)
	if repair_effector then
		level.remove_complex_effector(repair_effector_id)
		level.add_complex_effector(repair_effector, repair_effector_id)
	end
end

--//script menu actions
function repair_0_tip(obj)
	return string.format("%s %s", game.translate_string("st_repair"), game.translate_string(get_inv_name(actor:item_in_slot(0):section())))
end
function can_repair_0(obj)
	return can_repair(obj, actor:item_in_slot(0))
end
function repair_0(obj)
	repair(obj, actor:item_in_slot(0))
end

function repair_1_tip(obj)
	return string.format("%s %s", game.translate_string("st_repair"), game.translate_string(get_inv_name(actor:item_in_slot(1):section())))
end
function can_repair_1(obj)
	return can_repair(obj, actor:item_in_slot(1))
end
function repair_1(obj)
	repair(obj, actor:item_in_slot(1))
end

function repair_2_tip(obj)
	return string.format("%s %s", game.translate_string("st_repair"), game.translate_string(get_inv_name(actor:item_in_slot(2):section())))
end
function can_repair_2(obj)
	return can_repair(obj, actor:item_in_slot(2))
end
function repair_2(obj)
	repair(obj, actor:item_in_slot(2))
end

function repair_4_tip(obj)
	return string.format("%s %s", game.translate_string("st_repair"), game.translate_string(get_inv_name(actor:item_in_slot(4):section())))
end
function can_repair_4(obj)
	return can_repair(obj, actor:item_in_slot(4))
end
function repair_4(obj)
	repair(obj, actor:item_in_slot(4))
end

function repair_6_tip(obj)
	return string.format("%s %s", game.translate_string("st_repair"), game.translate_string(get_inv_name(actor:item_in_slot(6):section())))
end
function can_repair_6(obj)
	return can_repair(obj, actor:item_in_slot(6))
end
function repair_6(obj)
	repair(obj, actor:item_in_slot(6))
end