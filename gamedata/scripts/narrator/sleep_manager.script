-- -*- mode: lua; coding: windows-1251-dos -*-
-----------------------------------------------------------
-- С использованием наработок $DreamMod v0.2 by Ab@dDon ---
-----------------------------------------------------------
--edited by narrator @ 2023

function attach(sm)
	sm:subscribe({signal = "on_new_game_start", fun = this.create_mattresses})
end

local DEBUG_SPOT = false
local ADD_SPOT = false

local sleep_h, sleep_m = 0, 0
local dream_name = nil
local is_sleeping = false

local params_sect 			= "sleep_params"
local cond_sect 			= "sleep_conditions"
--//params
local ENEMY_CHECK_RADIUS 	= read_if_exists(sys_ini, "float", 	params_sect, 	"enemy_radius", 	50)
local SLEEP_SPOT 			= read_if_exists(sys_ini, "string", 	params_sect, 	"spot", 			"spot_place_to_rest_cop")
local PROP_SECT 			= read_if_exists(sys_ini, "string", 	params_sect, 	"prop_sect", 		"mattress")
local PROP_PREFIX 			= read_if_exists(sys_ini, "string", 	params_sect, 	"prop_prefix", 		"sleep_prop_")
local SAVE_AFTER_SLEEP 		= read_if_exists(sys_ini, "bool", 	params_sect, 	"save_after_sleep", true)
--//conditions
local SOMNOLENCE_K 			= read_if_exists(sys_ini, "float", 	cond_sect, 		"somnolence_k", 	0.5)
local HEALTH_K 				= read_if_exists(sys_ini, "float", 	cond_sect, 		"health_k", 		0.5)
local POWER_K 				= read_if_exists(sys_ini, "float", 	cond_sect, 		"power_k", 			0.5)
local SATIETY_K 			= read_if_exists(sys_ini, "float", 	cond_sect, 		"satiety_k", 		0.5)
local ALCOHOL_K 			= read_if_exists(sys_ini, "float", 	cond_sect, 		"alcohol_k", 		0.5)
local PSY_HEALTH_K 			= read_if_exists(sys_ini, "float", 	cond_sect, 		"psy_health_k", 	0.5)

--//пише координати спавну матрасу у файл sleeping_props.txt
--//файл буде лежати у каталозі bin_x64
local prop_num = 0
function write_prop_pos_to_file()
	local pos = actor:position()
	local file = io.open("sleeping_props.txt", "a")
	--local text = string.format("{level = '%s', pos = {%.2f, %.2f, %.2f}},\n", level.name(), pos.x, pos.y, pos.z)
	local text = string.format("[%s]\nprop_id_%s = %.2f, %.2f, %.2f\n", PROP_PREFIX..level.name(), prop_num, pos.x, pos.y, pos.z)
	prop_num = prop_num + 1
	file:write(text)
	file:close()
end
--//пише координати зони для сну у спальнику у файл sleeping_places.txt
--//файл буде лежати у каталозі bin_x64
local place_id = 0
function write_place_pos_to_file(radius)
	radius = radius or 3
	local pos = actor:position()
	local file = io.open("sleeping_places.txt", "a")
	--local text = string.format("{level = '%s', pos = {%.2f, %.2f, %.2f}, radius = %s},\n", level.name(), pos.x, pos.y, pos.z, radius)
	local text = string.format("[%s]\nplace_id_%s = %.2f, %.2f, %.2f, %.2f\n", PROP_PREFIX..level.name(), prop_num, pos.x, pos.y, pos.z, radius)
	place_id = place_id + 1
	file:write(text)
	file:close()
end



function on_mattress_use(obj)
	if ADD_SPOT and level.map_has_object_spot(obj:id(), SLEEP_SPOT) == 0 then
		level.map_add_object_spot_ser(obj:id(), SLEEP_SPOT, game.translate_string("ui_st_place_to_rest"))
	end
	if can_sleep() then
		if is_3d_pda() and actor:active_item() and actor:active_item():get_pda() then
			actor:activate_slot(NO_ACTIVE_SLOT)
		end
		--ui_sleep.show_sleep_window()
		ui_skip_time.show_skip_time_window("sleep", start_sleep)
	else
		show_cant_sleep_msg()
	end
end

function create_mattresses()
	-- local t = profile_timer()
	-- t:start()
	
	local name, value = "", ""
	if not gv_ids then
		fill_vertex_data()
	end
	for level_name, _ in pairs(gv_ids) do
		local sect = PROP_PREFIX..level_name
		if sys_ini:section_exist(sect) then
			local n = sys_ini:line_count(sect)
			for i=0,n-1 do
				result, name, value = sys_ini:r_line(sect,i,"","")
				local coord_tbl = split_string(value, ",", true)
				local pos = vector():set(coord_tbl[1], coord_tbl[2], coord_tbl[3])
				local obj = spawn_to_level(PROP_SECT, pos, level_name)
				--log3("~level name %s | param name %s | x=%s, y=%s, z=%s", level_name, name, pos.x, pos.y, pos.z)
				if DEBUG_SPOT then
					local txt = string.format("level: [%s]\\nparam name: [%s]\\npos: [%.2f, %.2f, %.2f]",level_name, name, pos.x, pos.y, pos.z)
					level.map_add_object_spot_ser(obj.id, SLEEP_SPOT, txt)
				end
			end		
		end
	end	
		
	-- t:stop()
	-- log3("~create_mattresses profiled time %s micro-seconds | %s seconds", t:time(), t:time() * 0.000001)
end

function actor_in_sleep_zone()
	local lvl_name = level.name()
	local actor_pos = actor:position()
	local zone_pos
	for k,v in pairs(sleep_zones) do
		zone_pos = vector():set(v.pos[1], v.pos[2], v.pos[3])
		if v.level == lvl_name and actor_in_zone(zone_pos, actor_pos, v.radius) then
			return true
		end
	end
	return false
end

function actor_in_zone(pos1, pos2, r)
	return (pos1.y <= pos2.y) and (pos2.y <= pos1.y + 2) and (math.pow(pos1.x - pos2.x, 2) + math.pow(pos1.z - pos2.z, 2) <= math.pow(r, 2))
end

function start_sleep(h, m)
	sleep_h = h
	sleep_m = m or 0
	
	actor:stop_talk()
	actor:hide_weapon()
	level.disable_input()
	level.add_pp_effector("sleep_fade.ppe", 11, false)
	level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "sleep_manager.play_start_sleep")
	somnolence.play_yawn()
	is_sleeping = true
end

function play_start_sleep()
	game.start_tutorial("time_scaling")
end

function perform_sleep()
	dream_name = dream.sleep_video_name_callback()
	local dream = dream_name ~= "" and dream_name or "without_dream"
	game.start_tutorial(dream)
end

function change_time()
	--log3("~change time")
	if sleep_h <= 0 and sleep_m <= 0 then
		log_news("!can`t perform sleep because sleep timer is %s:%s", sleep_h, sleep_m)
	return end
	change_game_time(0, sleep_h, sleep_m)
	local sleep_time = ((sleep_h * 3600) + (sleep_m * 60))
	sleep_conditions(sleep_time)
	sleep_h, sleep_m = 0, 0	
	play_awake_effects()
end

function sleep_conditions(sleep_time)
	local actor_cond = actor_obj.condition
	local delta
	
	--log3("~sleep_time %s", sleep_time)
	
	--штатна регенерація здоров'я за час сну
	delta = sleep_time * actor_cond.health_restore_v * HEALTH_K
	--додатковий реген уві сні
	actor.health = delta
	--log3("~change health %s", delta)

	--штатна регенерація псі-здоров'я за час сну
	delta = sleep_time * actor_cond.psy_health_v * PSY_HEALTH_K
	--додатковий реген уві сні
	actor.psy_health = delta
	--log3("~change psy_health %s", delta)
	
	--штатна регенерація витривалості за час сну
	delta = sleep_time * actor_cond.power_v * POWER_K
	--додатковий реген уві сні
	actor.power = delta
	--log3("~change power %s", delta)
	
	--штатна зменшення рівня алкоголю за час сну
	delta = sleep_time * actor_cond.alcohol_v * ALCOHOL_K
	--додаткове тверезіння уві сні
	actor.alcohol = delta
	--log3("~change alcohol %s", delta)
	
	--штатне зменшення ситості за час сну
	delta = sleep_time * actor_cond.satiety_v * SATIETY_K
	--компенсація втрати ситості
	actor.satiety = delta
	--log3("~change satiety %s", delta)
	
	delta = sleep_time * somnolence.get_v() * SOMNOLENCE_K
	--компенсуємо надбаня сонливості та зменшуємо сонливість
	somnolence.change_val(-delta)
	--log3("~change somnolence %s", -delta)
end

local nightmare = {
	["aes_sky_red"] = true,
	["dream_4"] 	= true,
	["dream_5"] 	= true,
}
function play_awake_effects()
	level.add_cam_effector("camera_effects\\prison_1.anm", 25, false, "sleep_manager.restore_control")
	level.add_pp_effector("yantar_underground_psi.ppe", 2007, false)
	level.add_pp_effector("total_recall.ppe", 2008, false)
	if nightmare[dream_name] then
		somnolence.play_heavy_breath_nightmare()
	else
		somnolence.play_wake_up()
	end
	dream_name = nil
end

function restore_control()
	actor:restore_weapon()
	level.enable_input()
	make_sleep_savegame()
	is_sleeping = false
end

local reason
function can_sleep()
	if has_enemy_near(actor, ENEMY_CHECK_RADIUS) then
		reason = "st_enemies_nearby"
	return false end
	if somnolence.dont_want_to_sleep() then
		reason = "st_dont_want_sleep"
	return false end
	return true
end

function show_cant_sleep_msg()
	local refuse_text = string.format("%s: %s", game.translate_string("ui_st_cant_sleep"), game.translate_string(reason))
	hud_add_info_message("item_usage", refuse_text)
end

function is_sleeping_now()
	return is_sleeping
end

function make_sleep_savegame()
	if not SAVE_AFTER_SLEEP then
	return end
	--local save_cmd = string.format("save %s - %s", user_name(), game.translate_string("ui_st_after_sleep"))
	local save_cmd = string.format("save %s", game.translate_string("ui_st_after_sleep"))
	get_console():execute(save_cmd)
end