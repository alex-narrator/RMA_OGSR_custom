function attach(sm)
	sm:subscribe({signal = "on_key_press",   fun = this.process_drop})
end

function process_drop(key, game_action)
	if level.main_input_receiver() or 
		game_action ~= key_bindings.kDROP_BACKPACK then
	return end
	
	try_drop()
end

function try_drop()
	local backpack = actor_get_backpack()
	if not backpack then 
	return end
	
	local has_quick_drop = read_if_exists(sys_ini, "r_bool", backpack:section(), "quick_drop", false)
	if not has_quick_drop then
	return end
	
	actor:drop_item(backpack)
	
	hud_add_info_message("item_usage", "st_backpack_dropped")
end

local actor_obj = get_actor_obj()
local saved_state = nil
local effect = {
	name = "effector_backpack",
	id = 66677,
}
local anims = {
	"anm_show",
	"anm_hide",
	"anm_idle",
}
function play_anim(state)
	game.play_hud_motion(2, "backpack_hud", anims[state], true, 1, false)
end

function skip_state()
	return actor_obj:is_actor_climb() or actor_obj:is_actor_climbing() or 
			actor_obj:is_actor_crouch() or actor_obj:is_actor_crouching() or 
			actor_obj:is_actor_creep() or actor_obj:is_actor_creeping()
end

function force_crouch(enable)
	if enable then
		saved_state = not skip_state() and actor_obj:get_state_wishful() or nil
		if saved_state then
			actor_obj:set_state_wishful(move_command.mcCrouch)
			actor_obj.clear_crouch = false
		end
	else
		if saved_state then
			actor_obj:set_state_wishful(saved_state)
			actor_obj.clear_crouch = true
		end
	end
end

function play_effects(enable)
	force_crouch(enable)
	play_anim(enable and 1 or 2)
	
	local snd_name = enable and "interface\\item_usage\\backpack_open" or "interface\\item_usage\\backpack_close"
	xr_sound.get_safe_sound_object(snd_name, sound_object.s2d):play_at_pos(actor,actor:position())
	if not level.check_complex_effector(effect.name) then 
		level.add_complex_effector(effect.name, effect.id)
	end
end