-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press",   	fun = this.on_key_press})
	sm:subscribe({signal = "on_pda_show", 		fun = this.on_pda_swow})	
	sm:subscribe({signal = "on_pda_hide",   	fun = this.on_pda_hide})
end

local actor_obj = get_actor_obj()
local hud_sect = "pda_hud"
local hud_aim_sect = "pda_aim_hud"
local ANIM_FAST = true

local subscribed = false

function play_2d_anim()
	return actor_get_pda() and not get_console():get_bool("g_3d_pda")
end

function try_play_pda_sound(snd_name)
	if not snd_name then return end
	xr_sound.get_safe_sound_object(snd_name):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
end

local pda_action = {
	[key_bindings.kACTIVE_JOBS] = true,
	[key_bindings.kMAP] 		= true,
	[key_bindings.kCONTACTS] 	= true,
	[key_bindings.kJOURNAL] 	= true,
}

function on_key_press(key, game_action)
	if not play_2d_anim() then
	return end
	if not pda_action[game_action] then
	return end
	if level.main_input_receiver() then
	return end
	if _G.SCRIPT_ANIM_PLAYING then
	return end
	actor_obj:block_action(game_action)
	local already_blocked = actor.inventory:is_active_slot_blocked()
	if not already_blocked then
		actor:hide_weapon(ANIM_FAST)
	end
	local pda = actor_get_pda()
	level.add_call(
		function() 
			return not actor:active_item() and not actor:active_device()
		end,
		function()
			_G.SCRIPT_ANIM_PLAYING = true
			local length = game.play_hud_motion(2, hud_sect, "anm_show", true, 1, false)
			try_play_pda_sound(read_if_exists(sys_ini, "r_string", pda:section(), "snd_draw", nil))
			add_time_delayed_action(
				length * 0.001,
				function()
					if not pda:is_power_on() then
						local length = game.play_hud_motion(2, hud_sect, "anm_empty", true, 1, false)
						try_play_pda_sound(read_if_exists(sys_ini, "r_string", pda:section(), "snd_empty", nil))
						add_time_delayed_action(
							length * 0.001 - 0.9,
							function()
								local length = game.play_hud_motion(2, hud_sect, "anm_hide", true, 1, false)
								try_play_pda_sound(read_if_exists(sys_ini, "r_string", pda:section(), "snd_holster", nil))
								add_time_delayed_action(
									length * 0.001,
									function()
										actor_obj:unblock_action(game_action)
										_G.SCRIPT_ANIM_PLAYING = false
									end
								)
							end
						)
					else
						actor_obj:unblock_action(game_action)
						level.send_event_key_press(bind_to_dik(game_action))
						_G.SCRIPT_ANIM_PLAYING = false
					end
				end
			)
		end
	)
end

function on_pda_hide()
	if not play_2d_anim() then
	return end
	block_non_move_action(true)
	dof_mir.stop_dof()
	-- local already_blocked = actor.inventory:is_active_slot_blocked()
	-- if not already_blocked then
		-- actor:hide_weapon(ANIM_FAST)
	-- end	
	level.add_call(
		function() 
			return not actor:active_item() and not actor:active_device()
		end,
		function()
			local length = game.play_hud_motion(2, hud_sect, "anm_hide", true, 1, false)
			try_play_pda_sound(read_if_exists(sys_ini, "r_string", actor_get_pda():section(), "snd_holster", nil))
			add_time_delayed_action(
				length * 0.001,
				function()
					block_non_move_action(false)
					actor:restore_weapon(ANIM_FAST)
				end
			)			
		end
	)
end

function on_pda_swow()
	if not play_2d_anim() then
	return end
	dof_mir.start_dof()
end