-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press", 				fun = this.on_key_press})
end

local KICK_IMPULSE = 250
local KICK_POWER = 0.5
local KICK_DIST = actor.inventory.take_dist
local POWER_DEC_K = 0.001
local ANM_SPEED = 2

local hud_effector_id = 5560

function can_play_anim()
	return --level.get_target_obj() and 
		--level.get_target_dist() <= KICK_DIST and
		not level.main_input_receiver() and
		actor_hands_free() and 
		not SCRIPT_ANIM_PLAYING and 
		not actor:ph_capture()-- and
		--(not actor:active_item() or not actor:active_item():is_knife()) 
end

function on_key_press(key, game_action)
	if game_action ~= key_bindings.kKICK or
		not can_play_anim()
	then
	return end
		
	if actor_cant_walk() then
	return end
		
	block_non_move_action(true)
	local to_center = is_crosshair_hard()
	actor:center_crosshair(to_center)
		
	local hud_sect = "arm_kick_hud"
	local act_item = actor:active_item()
	local wpn = act_item and act_item:get_weapon() or nil
	
	if act_item then
		-- if wpn and wpn.zoom_mode then
			-- wpn:zoom_out()
		-- end			
		act_item:zoom_out()
		
		hud_sect = "rifle_kick_hud"
		
		-- if get_clsid(act_item) == clsid.wpn_bm16_s then
			-- hud_sect = "sawed_kick_hud"
		-- elseif act_item:is_pistol() then
		if act_item:is_pistol() then
			hud_sect = "pistol_kick_hud"
		elseif act_item:is_knife() or act_item:is_missile() then
			hud_sect = "knife_kick_hud"
		end
	end
	
	local length = game.play_hud_motion(2, hud_sect, "anm_use", true, ANM_SPEED, false)
	_G.SCRIPT_ANIM_PLAYING = true
	-- local eff_name = read_if_exists(sys_ini, "r_string", hud_sect, "hud_effector", nil)
	-- level.add_complex_effector(eff_name, hud_effector_id)
	
	local sound_name = "interface\\kick\\swing\\swing_"..math.random(1,6)
	xr_sound.get_safe_sound_object(sound_name):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
	local kick_forward = level.get_key_state(bind_to_dik(key_bindings.kADDITIONAL_ACTION))
	
	add_time_delayed_action(
		read_if_exists(sys_ini, "r_float", hud_sect, "use_delay", 0.5) / ANM_SPEED,
		function()
			kick(kick_forward)
			if act_item and (act_item:is_knife() or act_item:is_missile()) then
				game.stop_hud_motion()
			end
			_G.SCRIPT_ANIM_PLAYING = false
		end
	)
	add_time_delayed_action(
		length * 0.001,
		function()
			block_non_move_action(false)
			if to_center then
				actor:center_crosshair(false)
			end
		end
	)
end

function kick(forward_dir)
	local target = level.get_target_obj()
	if not target or 
		level.get_target_dist() > KICK_DIST
	then
	return end
	
	--log3("~forward_dir %s", forward_dir)
	local act_item = actor:active_item()
	local act_item_add = act_item and math.sqrt(act_item:weight()) or 1
	act_item_add = math.clamp(act_item_add, 1, act_item_add)
	
	local dir = forward_dir and actor:direction() or device().cam_dir --//копняк або уперед або у напрямку камери
	local rq = level.get_current_ray_query()
	local bone_id = rq and rq.element or 0
	local impulse = KICK_IMPULSE * actor.power * act_item_add
	local power = KICK_POWER * actor.power * act_item_add
	
	local h = hit()
	h.power = power
	h.impulse = impulse
	h.direction = dir
	h.bone = bone_id
	h.draftsman = actor
	h.type = hit.strike
	target:hit(h)
	
	local mass = target:mass()
	if target:get_inventory_owner() or target:get_container() then
		mass = mass + target:get_total_weight()
	end
	
	dir:mul(impulse * mass)
	local ph = target:get_physics_shell()
	if ph then 
		ph_bone = ph:get_element_by_bone_id(h.bone) 
		if ph_bone then
			ph_bone:apply_force(dir.x,dir.y,dir.z)
		else
			ph:apply_force(dir.x,dir.y,dir.z)
		end
	end
	
	local power_dec = mass * POWER_DEC_K
	power_dec = power_dec + power_dec * act_item_add
	actor.power = - power_dec
	
	--log3("~kick object %s | mass %s | power_dec %s", target:name(), mass, power_dec)
	
	ogse_signals.get_mgr():call("on_actor_kick", target, power, power_dec)
	
	local sound_name = "interface\\kick\\metal\\metal_"..math.random(1,4)
	if target:is_stalker() or target:is_monster() then
		sound_name = "interface\\kick\\flesh\\flesh_"..math.random(1,6)
	else
		local spawn_name = read_if_exists(sys_ini, "r_string", target:section(), "$spawn", nil)
		if spawn_name and string.find(spawn_name,"wood") then
			sound_name = "interface\\kick\\wood\\wood_"..math.random(1,4)
		end
	end
	xr_sound.get_safe_sound_object(sound_name):play_no_feedback(target, sound_object.s2d, 0, vector(), 1.0)
end