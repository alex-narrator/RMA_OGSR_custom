-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press",   			fun = this.on_key_press})
	sm:subscribe({signal = "on_mouse_wheel",   			fun = this.on_mouse_wheel})
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   fun = this.on_zoom_in})
	sm:subscribe({signal = "on_actor_weapon_zoom_out", 	fun = this.on_zoom_out})
end

local actor_obj = get_actor_obj()
local firemode_switch = {
	[key_bindings.kWPN_FIREMODE_PREV] = true,
	[key_bindings.kWPN_FIREMODE_NEXT] = true,
}

function is_switch_slot()
	return get_console():get_bool("g_mouse_wheel_switch_slot")
end

function on_zoom_in(weapon)
	level.add_complex_effector("aim", 1908)
end

function on_zoom_out(weapon)
	level.add_complex_effector("aim", 1907)
end

function get_zoom_data(item)
	local wpn = item:get_weapon()
	if not wpn then
		return nil 
	end
	local zoom_sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or item:section()
	return split_string(read_if_exists(sys_ini, "r_string", zoom_sect, "scope_zoom_factor", nil), ",")
end

function on_mouse_wheel()
	if is_switch_slot() or not actor_hands_free() then
	return end
	
	local act_item = actor:active_item()
	local act_wpn = act_item and act_item:get_weapon_m() or nil
	if not act_wpn or not has_fire_modes(act_item) or (get_zoom_data(act_item) and table.size(get_zoom_data(act_item)) > 1) then
	return end
	
	play_switch_anim(act_item)
end

function on_key_press(key, game_action)	
	if not actor_hands_free() then
	return end
	
	local act_item = actor:active_item()
	local act_wpn = act_item and act_item:get_weapon_m() or nil
	
	if not act_wpn then
	return end
		
	if game_action == key_bindings.kWPN_FIRE then
		if act_wpn and act_wpn:is_misfire() then
			level.add_complex_effector("jammed", 1913)
		end
	end
	
	if firemode_switch[game_action] then
		if act_wpn and has_fire_modes(act_item) then
			play_switch_anim(act_item)
		end
	end
end

function play_switch_anim(item)
	level.add_complex_effector("fire_mode", 1912)
	local switch_snd = read_if_exists(sys_ini, "r_string", item:section(), "snd_firemode", "")
	xr_sound.get_safe_sound_object(switch_snd):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
	ui_hud_info.on_key_press(nil, key_bindings.kCHECKACTIVEITEM)
	-- if hud_anim_exists(item, "anm_switch") then
		-- game.play_hud_motion(2, get_hud_sect(item), "anm_switch", false, 1, false)
	-- end
end