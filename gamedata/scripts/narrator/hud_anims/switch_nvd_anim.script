-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press",   		fun = this.on_key_press})
end

local nvd_action = {
	[key_bindings.kNIGHT_VISION] = true,
}

local hud_effector_id = 5558

function wpn_scope_allow_nvd(weapon)
	local wpn = weapon:get_weapon()
	local sect = (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope)) and wpn:get_addon_name(addon.scope) or weapon:section()
	return read_if_exists(sys_ini, "r_bool", sect, "scope_allow_nvd", false) or wpn:scope_mode_second()
end

function aim_scope()
	local act_item = actor:active_item()
	return act_item and act_item:get_weapon() and act_item:get_weapon().zoom_mode and act_item:get_weapon():is_addon_attached(addon.scope) and not wpn_scope_allow_nvd(act_item)
end

function on_key_press(key, game_action)
	local curr_nvd = nvd.get_current_nvd()
	if not nvd_action[game_action] or
		level.main_input_receiver() or
		not actor_hands_free() or
		nvd.aim_nvd_weapon() or
		aim_scope() or
		SCRIPT_ANIM_PLAYING or 
		not curr_nvd
	then
		if nvd_action[game_action] and curr_nvd and aim_scope() and not nvd.aim_nvd_weapon() then
			hud_add_info_message("item_usage", game.translate_string("st_scope_aim_block_nvd"), 2)
		end
	return end
	
	local hud_sect = "switch_torch_hud"
	
	game.play_hud_motion(1, hud_sect, "anm_use", false, 1, false)
	_G.SCRIPT_ANIM_PLAYING = true
	local eff_name = read_if_exists(sys_ini, "r_string", hud_sect, "hud_effector", nil)
	level.add_complex_effector(eff_name, hud_effector_id)
	
	add_time_delayed_action(
		read_if_exists(sys_ini, "r_float", hud_sect, "use_delay", 1.5),
		function()
			if not nvd.can_switch(curr_nvd) then 
			return end
			nvd.switch_nvd(curr_nvd)
		end
	)
	
	level.add_call(
		function()
			return game.hud_motion_allowed()
		end,
		function()
			_G.SCRIPT_ANIM_PLAYING = false
		end
	)
end