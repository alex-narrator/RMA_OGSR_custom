-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   fun = this.on_zoom_in})
end

local ezi = false
local hard_hold = false
local base_k = false
local zoom_factor = 1
local subscribed = false

local AIM_INERTION_HARD_HOLD = 0.2
local HUD_FOV_K_HARDHOLD = 0.95
local HARDHOLD_FOV_CHANGE_TIME = 0.25 * 1000 * level.get_time_factor()
local FOV_CHANGE_PART = HUD_FOV_K_HARDHOLD / HARDHOLD_FOV_CHANGE_TIME

local DEBUG_DISABLE = false

local ZOOM_SOMNOLENCE_K = read_if_exists(sys_ini, "r_float", "actor_condition", "somnolence_zoom_effector_k", 10)
local CROUCH_K = 0.25

function can_set_hard_hold(game_action)
	return not level.main_input_receiver() and game_action == key_bindings.kADDITIONAL_ACTION and ezi and not actor_obj:is_actor_creep() and not force_disable_hard_hold()
end

function get_zoom_effector_k()
	local crouch_k = 1
	if actor_obj:is_actor_crouch() then
		crouch_k = CROUCH_K
	end
	return (1 + (ZOOM_SOMNOLENCE_K * somnolence.get_val()))/zoom_factor * crouch_k
end

function force_disable_hard_hold()
	return stamina.get_val() == 0 or somnolence.get_val() == 1 or actor_obj.condition.cant_sprint or actor_obj.condition.limping
end

function is_hard_hold()
	if actor_obj.condition.cant_sprint or actor_obj.condition.limping then
	return false end
	return hard_hold or actor_obj:is_actor_creep()
end

function set_hard_hold(on)
	hard_hold = on
end

function apply_aim_params(hard_hold, delta)
	local act_item = actor:active_item()
	local act_item_2 = actor:active_device()
	
	local inertion = hard_hold and AIM_INERTION_HARD_HOLD or 1
	
	if act_item then
		act_item:set_aim_inertion(inertion)
	end
	if act_item_2 then
		act_item_2:set_aim_inertion(inertion)
	end
	
	if hard_hold and act_item:get_weapon().zoom_hud_fov_k > HUD_FOV_K_HARDHOLD then
		act_item:get_weapon().zoom_hud_fov_k = act_item:get_weapon().zoom_hud_fov_k - delta * FOV_CHANGE_PART
	elseif not hard_hold and act_item:get_weapon().zoom_hud_fov_k <= 1 then
		act_item:get_weapon().zoom_hud_fov_k = act_item:get_weapon().zoom_hud_fov_k + delta * FOV_CHANGE_PART
	end
end

function get_hard_hold()
	return hard_hold
end

function on_key_press(key, game_action)
	if not can_set_hard_hold(game_action) then
	return end
	set_hard_hold(true)
end

function on_key_release(key, game_action)
	if not can_set_hard_hold(game_action) then
	return end	
	set_hard_hold(false)
end

function on_zoom_in(weapon)
	zoom_factor = weapon:get_zoom_factor()
	if not subscribed then
		subscribed = {
			{ signal = "on_update", 				fun = this.on_update },
			{ signal = "on_key_press", 				fun = this.on_key_press },
			{ signal = "on_key_release", 			fun = this.on_key_release },
			{ signal = "on_actor_weapon_zoom_out", 	fun = this.on_zoom_out},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:subscribe( s )
		end
	end
	
	--hud_add_info_message("item_usage", game.translate_string("st_hold_key_to_hard_hold"), 3)
	add_time_delayed_action(1,
	function()
		if not actor_obj:is_zoom_aiming_mode() then
		return end
		
		local wpn = weapon:get_weapon()
		
		local s3ds = wpn:is_3dss_enabled()

		local marks = ui_scope_collimator_mark.can_switch_marks(weapon) and not s3ds
		local illum = ui_scope_collimator_mark.can_switch_marks(weapon) and s3ds
		
		local is_nvd = nvd.aim_nvd_weapon()--nvd.get_nv_sect(weapon) and not wpn:aim_alt_mode()
		local is_hv = nvd.aim_hv_weapon()
		local alt_aim = read_if_exists(sys_ini, "r_bool", weapon:section(), "aim_alt_forced", false) or (wpn:addon_attachable(addon.scope) and wpn:is_addon_attached(addon.scope) and read_if_exists(sys_ini, "r_bool", wpn:get_addon_name(addon.scope), "aim_alt", false))

		local tip = game.translate_string("st_hold_key_to_hard_hold")		
		if marks then
			tip = tip.."\\n"..game.translate_string("st_press_key_to_switch_mark")
		end
		if illum then
			tip = tip.."\\n"..game.translate_string("st_press_key_to_switch_illum")
		end
		if is_nvd then
			tip = tip.."\\n"..game.translate_string("st_press_key_to_switch_night_vision")
		end
		if is_hv then
			tip = tip.."\\n"..game.translate_string("st_press_key_to_switch_heat_vision")
		end
		if alt_aim then
			tip = tip.."\\n"..game.translate_string("st_press_key_to_switch_aim")
		end		
		hud_add_info_message("item_usage", tip, 2)
	end
	)
end

function on_zoom_out(weapon)
	if subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:unsubscribe( s )
		end
		subscribed = false
	end
	ezi = false
	hard_hold = false
	base_k = false
	zoom_factor = 1
	hud_remove_info_message("item_usage")
end

function on_update(delta)
	if not ezi then
		ezi = find_effector_zi()
		if not ezi then
		return end
		base_k = ezi.zoom_aim_disp_k
	end
	ezi.zoom_aim_disp_k = base_k * get_zoom_effector_k()
	ezi.pause_effect = not ui_scope_texture.has_scope_static() or DEBUG_DISABLE or is_hard_hold()
	
	if ezi.pause_effect and (force_disable_hard_hold() or actor_obj:is_actor_creep()) then
		set_hard_hold(false)
	end
	
	apply_aim_params(is_hard_hold(), delta)
end