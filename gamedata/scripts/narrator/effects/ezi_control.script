-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_actor_weapon_zoom_in",   fun = this.on_zoom_in})
end

local ezi = false
local hard_hold = false
local base_k = false
local zoom_factor = false
local subscribed = false

local DEBUG_DISABLE = false

local actor_obj = get_actor_obj()
local ZOOM_SOMNOLENCE_K = read_if_exists(sys_ini, "r_float", "actor_condition", "somnolence_zoom_effector_k", 10)
local CROUCH_K = 0.25

function can_set_hard_hold(game_action)
	return not level.main_input_receiver() and game_action == key_bindings.kADDITIONAL_ACTION and ezi and not actor_obj:is_actor_creep() and not force_disable_hard_hold()
end

function get_zoom_effector_k()
	local crouch_k = 1
	if actor_obj:is_actor_crouch() then
		crouch_k = CROUCH_K
	end
	return (1 + (ZOOM_SOMNOLENCE_K * somnolence.get_val()))/zoom_factor * crouch_k
end

function force_disable_hard_hold()
	return stamina.get_val() == 0 or somnolence.get_val() == 0 or actor_obj.condition.cant_sprint or actor_obj.condition.limping
end

function is_hard_hold()
	if actor_obj.condition.cant_sprint or actor_obj.condition.limping then
	return false end
	return hard_hold or actor_obj:is_actor_creep()
end

function set_hard_hold(on)
	hard_hold = on
end

function set_stop_aim_inertion(on)
	local act_item = actor:active_item()
	local act_item_2 = actor:active_device()
	
	if act_item then
		act_item:stop_aim_inertion(on)
	end
	if act_item_2 then
		act_item_2:stop_aim_inertion(on)
	end
end

function get_hard_hold()
	return hard_hold
end

function on_key_press(key, game_action)
	if not can_set_hard_hold(game_action) then
	return end
	set_hard_hold(true)
end

function on_key_release(key, game_action)
	if not can_set_hard_hold(game_action) then
	return end	
	set_hard_hold(false)
end

function on_zoom_in(weapon)
	if DEBUG_DISABLE then
	return end
	
	zoom_factor = weapon:get_zoom_factor()
	level.add_cam_effector("camera_effects\\actor_actions\\zoom_crp.anm", 1908, false, "")
	if not subscribed then
		subscribed = {
			{ signal = "on_update", 				fun = this.on_update },
			{ signal = "on_key_press", 				fun = this.on_key_press },
			{ signal = "on_key_release", 			fun = this.on_key_release },
			{ signal = "on_actor_weapon_zoom_out", 	fun = this.on_zoom_out},
		}
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:subscribe( s )
		end
	end
	
	--hud_add_info_message("item_usage", game.translate_string("st_hold_key_to_hard_hold"), 3)
	add_time_delayed_action(1,
	function()
		if not get_actor_obj():is_zoom_aiming_mode() then
		return end
		hud_add_info_message("item_usage", game.translate_string("st_hold_key_to_hard_hold"), 2)
	end
	)
end

function on_zoom_out(weapon)
	level.add_cam_effector("camera_effects\\actor_actions\\zoom_crp.anm", 1907, false, "")
	if subscribed then
		local sm = ogse_signals.get_mgr()
		for _, s in ipairs( subscribed ) do
			sm:unsubscribe( s )
		end
		subscribed = false
	end
	ezi = false
	hard_hold = false
	base_k = false
	zoom_factor = false
	hud_remove_info_message("item_usage")
end

function on_update(delta)
	if not ezi then
		ezi = find_effector_zi()
		if not ezi then
		return end
		base_k = ezi.zoom_aim_disp_k
	end
	ezi.zoom_aim_disp_k = base_k * get_zoom_effector_k()
	ezi.pause_effect = is_hard_hold()
	
	if ezi.pause_effect and (force_disable_hard_hold() or actor_obj:is_actor_creep()) then
		set_hard_hold(false)
	end
	
	set_stop_aim_inertion(is_hard_hold())
end