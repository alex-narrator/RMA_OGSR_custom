function attach(sm)
	sm:subscribe({signal = "on_eat",   fun = this.use_item_effects})
	sm:subscribe({signal = "on_before_use_item",   fun = this.check_use_enabled})
	sm:subscribe({signal = "on_booster_enable",   fun = this.enable_effect})
	sm:subscribe({signal = "on_booster_disable",   fun = this.disable_effect})
end

--ефекти використання предметів
local use_effector_id = 66613 --спеціальний id для ефектору використання, щоб саме його видаляти при використанні іншого предмету
local boost_efefctor_id = 666650 --id ефектору бустера за замовчуванням

function send_refusal_tip(item)
	refusal_text = string.format("%s %s", game.translate_string(get_inv_name(item:section())), game.translate_string("st_cant_eat_item"))
	news_manager.send_tip(db.actor, refusal_text)
end

function check_use_enabled(item)
	local eatable_item = item:get_eatable_item()
	if not eatable_item then
	return end
	local actor = db.actor
	
	if not read_if_exists(sys_ini, "r_bool", item:section(), "helmet_use", true) then
		local refusal_text
		local check_item = actor:item_in_slot(6)
		if check_item and (read_if_exists(sys_ini, "r_bool", check_item:section(), "helmet_built_in", false) or outfit_effects.get_hud_params(check_item:section())) then
			eatable_item.can_be_eaten = false
			send_refusal_tip(check_item)
		return end
	
		check_item = actor:item_in_slot(11)
		if check_item and outfit_effects.get_hud_params(check_item:section()) then
			eatable_item.can_be_eaten = false
			send_refusal_tip(check_item)
		return end
	
		check_item = actor:item_in_slot(15)
		if check_item and outfit_effects.get_hud_params(check_item:section()) then
			eatable_item.can_be_eaten = false
			send_refusal_tip(check_item)
		return end
	end
	
	eatable_item.can_be_eaten = true
end

function use_item_effects(obj, user)
	local sect = obj:section()
	--sounds
	local snd_name = read_if_exists(sys_ini, "r_string", sect, "use_sound", nil)
	if snd_name then
		log3("~ snd name %s", snd_name)
		xr_sound.get_safe_sound_object(snd_name,sound_object.s2d):play_at_pos(user,user:position())
		log3("~ used item %s played sound %s for user %s", sect, snd_name, user:name())
	end
	--тільки для актора
	if user:is_actor() then
		--active item action
		local act_item = user:active_item()
		if act_item then
			--act_item:play_hud_motion("anm_show")
			user:activate_slot(NO_ACTIVE_SLOT)
		end
		--use effectors
		local eff_name = read_if_exists(sys_ini, "r_string", obj:section(), "use_effector", nil)
		if eff_name then
			level.remove_complex_effector(use_effector_id)
			level.add_complex_effector(eff_name, use_effector_id)
			log3("~ used item %s played effector %s for user %s", sect, eff_name, user:name())
		end
	end
end

function enable_effect(booster)
	local effector_name = read_if_exists(sys_ini, "r_string", booster.section, "boost_effector", false)
	local effector_id = read_if_exists(sys_ini, "r_float", booster.section, "boost_effector_id", false)
	if not effector_name then return end
	level.add_complex_effector(effector_name, effector_id)
	log3("~ enable booster effect %s, id %s", effector_name, effector_id)
end

function disable_effect(booster)
	local effector_id = read_if_exists(sys_ini, "r_float", booster.section, "boost_effector_id", false)
	if not effector_id then return end
	level.remove_complex_effector(effector_id)
	log3("~ disabling booster effect %s, id %s", booster.section, effector_id)
end