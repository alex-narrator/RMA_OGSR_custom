-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_before_first_update", 	fun = this.on_before_first_update})
	sm:subscribe({signal = "on_new_game_start", 		fun = this.on_new_game_start})
end

local STARTUP_LOCATION = "l01_escape"

function on_before_first_update()
	if not has_alife_info("storyline_actor_start") and level.name() == STARTUP_LOCATION then
		actor:give_info_portion("storyline_actor_start")
		_G.g_start_avi = true
		ogse_signals.get_mgr():call("on_new_game_start")
	end

	if not has_alife_info("global_dialogs") then
		actor:give_info_portion("global_dialogs")
	end

	if not has_alife_info("level_changer_icons") then
		actor:give_info_portion("level_changer_icons")
	end
end

function on_new_game_start()
	new_game_spawn()
end

local addons_flags = {
	["scope"] 		= { addon_flag.scope, 		function(wpn, val) wpn.current_scope = val 		end, },
	["silencer"] 	= { addon_flag.silencer, 	function(wpn, val) wpn.current_silencer = val 	end, },
	["launcher"] 	= { addon_flag.launcher, 	function(wpn, val) wpn.current_launcher = val 	end, },
	["laser"] 		= { addon_flag.laser, 		function(wpn, val) wpn.current_laser = val 		end, },
	["flashlight"] 	= { addon_flag.flashlight, 	function(wpn, val) wpn.current_flashlight = val end, },
	["stock"] 		= { addon_flag.stock, 		function(wpn, val) wpn.current_stock = val 		end, },
	["extender"] 	= { addon_flag.extender, 	function(wpn, val) wpn.current_extender = val 	end, },
	["forend"] 		= { addon_flag.forend, 		function(wpn, val) wpn.current_forend = val 	end, },
	["magazine"] 	= { addon_flag.magazine, 	function(wpn, val) wpn.current_magazine = val 	end, },
}

function new_game_spawn()
	local sim = alife()
	local se_item
	for k,v in ipairs(storyline_data.custom_spawn_sections) do
		if sys_ini:section_exist(v.section) then
			if v.level then
				local spawn_dir = nil
				if v.dir then
					spawn_dir = vector():set(v.dir[1],v.dir[2],v.dir[3])
				end
				local spawn_pos = vector():set(v.pos[1],v.pos[2],v.pos[3])
				se_item = spawn_to_level(v.section, spawn_pos, v.level, spawn_dir)
				if v.story_id then
					sim:assign_story_id(se_item.id, v.story_id)
				end
				if v.custom_data then
					se_item.custom_data = v.custom_data
				end
				if v.shape then
					local pk = get_netpk( se_item, 1 )
					local data = pk:get()
					data.restrictor_type = v.restrictor_type or 0
					local offset = v.shape._offset and vector():set(v.shape._offset[1], v.shape._offset[2], v.shape._offset[3]) or vector():set(0, 0, 0)
					if v.shape._type == "sphere" then
						local radius = v.shape._radius or 1
						data.shapes:addSphere(radius, offset)
					else
						local axis_x = v.shape._axis_x and vector():set(v.shape._axis_x[1], v.shape._axis_x[2], v.shape._axis_x[3]) or vector():set(0, 0, 0)
						local axis_y = v.shape._axis_x and vector():set(v.shape._axis_y[1], v.shape._axis_y[2], v.shape._axis_y[3]) or vector():set(0, 0, 0)
						local axis_z = v.shape._axis_z and vector():set(v.shape._axis_z[1], v.shape._axis_z[2], v.shape._axis_z[3]) or vector():set(0, 0, 0)
						data.shapes:addBox(matrix():set(axis_x, axis_y, axis_z, offset))
					end
					pk:set( data )					
				end
				if v.startup_anim then
					sim:object(se_item.id).startup_animation = v.startup_anim
				end
				if v.installed_addons then
					local wpn = sim:object(se_item.id):get_weapon()
					if wpn then
						local addon_fl = wpn.addon_flags
						for _k, _v in pairs(v.installed_addons) do
							if addons_flags[_k] ~= nil then
								log3("~set %s to %s", _k, _v)
								if _k ~= "magazine" then
									log3("~set %s", addons_flags[_k][1])
									addon_fl:set(addons_flags[_k][1],true)
								end
								addons_flags[_k][2](wpn, _v)	
							end
						end
						wpn.addon_flags = addon_fl
						if v.ammo_type then
							wpn.ammo_type = v.ammo_type
						end
					end
				end					
			end
			if v.owner_sid then
				level.add_call(
					function()
						return sim:story_object(v.owner_sid)
					end,
					function()
						se_item = spawn_to_owner(v.section, sim:story_object(v.owner_sid).id)
						if v.story_id then
							sim:assign_story_id(se_item.id, v.story_id)
						end
						if v.custom_data then
							se_item.custom_data = v.custom_data
						end
						if v.installed_addons then
							local wpn = sim:object(se_item.id):get_weapon()
							if wpn then
								local addon_fl = wpn.addon_flags
								for _k, _v in pairs(v.installed_addons) do
									if addons_flags[_k] ~= nil then
										log3("~set %s to %s", _k, _v)
										if _k ~= "magazine" then
											log3("~set %s", addons_flags[_k][1])
											addon_fl:set(addons_flags[_k][1],true)
										end
										addons_flags[_k][2](wpn, _v)	
									end
								end
								wpn.addon_flags = addon_fl
								if v.ammo_type then
									wpn.ammo_type = v.ammo_type
								end
							end
						end						
					end
				)
			end
		else
			log3("! can't find section %s to create object in %s", v.section, script_name())
		end
	end
end