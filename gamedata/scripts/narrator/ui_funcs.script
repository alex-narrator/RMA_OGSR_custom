function attach(sm)
	sm:subscribe({signal = "on_level_changer",   fun = this.add_level_name})
	sm:subscribe({signal = "on_item_focus",   fun = this.item_focus})
	sm:subscribe({signal = "on_item_focus_lost",   fun = this.item_focus_lost})
	sm:subscribe({signal = "on_info_portion",   fun = this.npc_map_spots})
end

local sm = ogse_signals.get_mgr()

function add_level_name( obj, wnd )
  local sobj = obj:get_alife_object()
  local lc   = sobj:get_level_changer()
  local dest_vertex = lc.dest_game_vertex_id
  local dest_lname  = alife():level_name(
    game_graph():vertex( dest_vertex ):level_id()
  )
  local msg_text_wnd = wnd:FindChild( "message_box_change_level:message_text" )
  msg_text_wnd:GetCUIStatic():SetText(
	game.translate_string( "level_changer_invitation" )..
	" "..
	game.translate_string( dest_lname )..
	"?"
  )
end

function npc_map_spots(npc, info_id)
	if not npc:is_actor() then
	return end
	
	local slot_desc = {signal = "on_update", fun = map_spots_npc.update_hints}
	if info_id == "ui_pda" then
		sm:subscribe(slot_desc)
	elseif info_id == "ui_pda_hide" then
		sm:unsubscribe(slot_desc)
	end
end

function item_focus(obj)
	log3("item %s focus", obj:section())
end

function item_focus_lost(obj)
	log3("item %s focus lost", obj:section())
end