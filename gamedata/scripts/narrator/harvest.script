-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_monster_update",   	fun = this.on_monster_update})
end

local HARVEST_DEBUG = false

function on_monster_update(monster, delta)
	if monster:alive() then
	return end
	local tip_text = has_loot(monster) and (get_good_knife() and "monster_use_or_drag" or "monster_use_or_drag_no_knife") or "game_object_drag"
	monster:set_tip_text(tip_text)
end

function can_harvest(monster)
	return has_loot(monster) and get_good_knife()
end

function try_harvest(target)
	if not can_harvest(target) then
	return false end
	
	harvest_anim.play_harvest(target)
	return true
end

function take_loot(monster, knife)
	local cond_dec = read_if_exists(sys_ini, "float", monster:section(), "knife_harvest_cond_k", 1) * read_if_exists(sys_ini, "float", knife:section(), "condition_shot_dec_on_hit", 0)
	for i = 0, monster:ruck_count() - 1 do
		local item = monster:item_in_ruck(i)
		if item then
			knife:change_condition(-cond_dec)
			monster:transfer_item(item, actor)
			news_manager.item_tip(item, "harvest")
		end
	end
end

function has_loot(monster)
	return monster:ruck_count() > 0 or HARVEST_DEBUG
end

function get_good_knife()
	for i = 0, sys_ini:r_u32("inventory","slots") - 1 do
		local item = actor:item_in_slot(i)
		if item and item:is_knife() and item:condition() > 0 then
			return item
		end
	end
	return nil
end