-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_hit_actor", 	fun = this.on_hit})
	sm:subscribe({signal = "on_save", 		fun = this.on_save})
	sm:subscribe({signal = "on_load", 		fun = this.on_load})
	sm:subscribe({signal = "on_spawn", 		fun = this.on_spawn})
end

local head_bone = {
	["bip01_head"] = true,
}
local upper_limbs = {
	["bip01_l_upperarm"] = true,
	["bip01_l_forearm"] = true,
	["bip01_l_hand"] = true,
	["bip01_r_upperarm"] = true,
	["bip01_r_forearm"] = true,
	["bip01_r_hand"] = true,	
}
local lower_limbs = {
	["bip01_l_thigh"] = true,
	["bip01_l_calf"] = true,
	["bip01_l_foot"] = true,
	["bip01_r_thigh"] = true,
	["bip01_r_calf"] = true,
	["bip01_r_foot"] = true,
}
local counted_hit_types = {
	--["burn"] = true,
	["strike"] = true,
	--["wound"] = true,
	["fire_wound"] = true,
	["physic_strike"] = true,
}

local gd_injure_prob = {
	0.2, 	--//novice
	0.4, 	--//stalker
	0.6, 	--//veteran
	0.8, 	--//master	
}

local actor_obj = get_actor_obj()

local groggy_treshold, groggy_snd, groggy_eff, groggy_cam_eff, groggy_ppe_eff
local groggy_cam_eff_id, groggy_ppe_eff_id = 5596, 5597
local eff_dec = 0.01

local upper_limbs_hit_amount = 0.3
local lower_limbs_hit_amount = 0.3
local injure_hit_power = 0.01

local sm = ogse_signals.get_mgr()
local legs_subscribe = false
local hands_subscribe = false

local hand_injured = false
local leg_injured = false

local painkiller_effect = 0

function get_pain_effect()
	return painkiller_effect
end
function set_pain_effect(val)
	painkiller_effect = val
end
function add_pain_effect(val)
	painkiller_effect = painkiller_effect + val
end

function injure_hit()
	local res_hit = injure_hit_power + injure_hit_power * get_pain_effect()
	if get_pain_effect() < 0 then
		--log3("~res_hit %s", -res_hit*0.1)
		actor.health = -res_hit*0.1
	return end
	local h = hit()
	h.draftsman = actor 
	h.type = hit.wound
	h.direction = vector():set(0,0,0) 
	h.power = res_hit
	--log3("~res_hit %s", res_hit)
	h.impulse = 0.0
	actor:hit(h)
end

function get_injured_limb()
	if hand_injured and leg_injured then
		return "leg_hand"
	elseif hand_injured then
		return "hand"
	elseif leg_injured then
		return "leg"
	else
		return "none"
	end
end

function random_prob()
	local rnd = math.random()
	local probe = gd_injure_prob[level.get_game_difficulty()+1]
	log3("~%s random %s probe %s | %s", script_name(), rnd, probe, rnd <= probe and "INJURE" or "IGNORE")
	return rnd <= probe
end

function on_spawn()
	load_groggy_params()
	
	subscribe_hands()
	subscribe_legs()
end

function subscribe_legs()
	if leg_injured and not legs_subscribe then
		legs_subscribe = { signal = "on_update", fun = this.on_update }
		sm:subscribe( legs_subscribe )
	end
end
function unsubscribe_legs()
	if legs_subscribe then
		sm:unsubscribe( legs_subscribe )
		legs_subscribe = false
	end
end

function subscribe_hands()
	if hand_injured and not hands_subscribe then
		hands_subscribe = { signal = "on_actor_weapon_zoom_in", fun = this.on_zoom_in }
		sm:subscribe( hands_subscribe )
	end
end
function unsubscribe_hands()
	if hands_subscribe then
		sm:unsubscribe( hands_subscribe )
		hands_subscribe = false
	end
end

function load_groggy_params()
	local sect = "actor_groggy"
	groggy_treshold = read_if_exists(sys_ini, "r_float", sect, "treshold", nil)
	groggy_snd = read_if_exists(sys_ini, "r_string", sect, "snd", nil)
	groggy_eff = read_if_exists(sys_ini, "r_string", sect, "effector", nil)
	if groggy_eff then
		groggy_cam_eff = read_if_exists(sys_ini, "r_string", groggy_eff, "cam_eff_name", nil)
		groggy_ppe_eff = read_if_exists(sys_ini, "r_string", groggy_eff, "pp_eff_name", nil)
	end
end

function on_save(packet)
	xr_vars.save_var("hand_injured", hand_injured)
	xr_vars.save_var("leg_injured", leg_injured)
end

function on_load(reader)
	hand_injured = xr_vars.load_var("hand_injured", hand_injured)
	leg_injured = xr_vars.load_var("leg_injured", leg_injured)
end

function try_groggy_effect(health_lost)
	if not groggy_treshold or health_lost < groggy_treshold then 
	return end
	
	log3("~groggy effect on hit amount %s", health_lost)
	
	level.remove_cam_effector(groggy_cam_eff_id)
	level.remove_pp_effector(groggy_ppe_eff)
			
	local eff_power = 10
			
	if groggy_cam_eff then
		level.add_cam_effector(groggy_cam_eff, groggy_cam_eff_id, true)
	end
	if groggy_ppe_eff then
		level.add_pp_effector(groggy_ppe_eff, groggy_ppe_eff_id, true)
		eff_power = eff_power * health_lost
		level.set_pp_effector_factor(groggy_ppe_eff_id, eff_power)
	end			
			
	local snd = xr_sound.get_safe_sound_object(groggy_snd,sound_object.s2d)
	snd:play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
			
	level.add_call(
		function()
			eff_power = actor:alive() and eff_power - eff_dec or 0
			if groggy_ppe_eff then
				level.set_pp_effector_factor(groggy_ppe_eff_id, eff_power)
			end
			return eff_power <= 0
		end,
		function()
			level.remove_cam_effector(groggy_cam_eff_id)
			level.remove_pp_effector(groggy_ppe_eff)
		end				
	)	
end

function try_upper_limbs_injure(health_lost)
	if health_lost < upper_limbs_hit_amount or hand_injured or not random_prob() then
	return end
	
	hand_injured = true
	hud_add_info_message("item_usage", "st_hand_injured")
	
	log3("~upper limbs injure on hit amount %s", health_lost)
end

function try_lower_limbs_injure(health_lost)
	if health_lost < lower_limbs_hit_amount or leg_injured or not random_prob() then
	return end
	
	leg_injured = true
	hud_add_info_message("item_usage", "st_leg_injured")
	
	log3("~lower limbs injure on hit amount %s", health_lost)
	
	if not legs_subscribe then
		legs_subscribe = { signal = "on_update", fun = this.on_update }
		sm:subscribe( legs_subscribe )
	end
end

function on_hit(victim, health_lost, direction, draftsman, bone_id, hit_type)
	--log3("~%s on_hit: victim %s | health_lost %s | draftsman %s | bone %s | hit_type %s", script_name(), victim:name(), health_lost, draftsman:name(), victim:get_bone_name(bone_id), get_hit_type_name(hit_type))
	local hit_type_name = get_hit_type_name(hit_type)
	if not counted_hit_types[hit_type_name] then
	return end
	local bone_name = victim:get_bone_name(bone_id)
	if head_bone[bone_name] then
		try_groggy_effect(health_lost)
	return end
	if upper_limbs[bone_name] then
		try_upper_limbs_injure(health_lost)
	return end
	if lower_limbs[bone_name] then
		try_lower_limbs_injure(health_lost)	
	return end	
end

function on_zoom_in(weapon)
	if not hand_injured or read_if_exists(sys_ini, "r_bool", weapon:section(), "single_handed", true) then
		unsubscribe_hands()
	return end
	--injure_hit()
	level.add_call(
		function()
			if actor.health < sys_ini:r_float("actor_condition", "limping_health_begin") then
				weapon:get_weapon():zoom_out()
				hud_add_info_message("item_usage", "st_hand_injured")
			else
				injure_hit()
			end
			return not weapon or not weapon:get_weapon().zoom_mode
		end,
		function()
		end
	)
	if get_pain_effect() < 0 then
	return end
	weapon:get_weapon():zoom_out()
	hud_add_info_message("item_usage", "st_hand_injured")
end

function on_update()
	if not leg_injured then
		unsubscribe_legs()
	return end
	if not actor_obj:is_actor_sprinting() then
	return end
	injure_hit()
	if get_pain_effect() < 0 then
	return end
	actor_break_sprint()
	hud_add_info_message("item_usage", "st_leg_injured")	
end

function heal_injure(item, limb)
	local snd_name = read_if_exists(sys_ini, "r_string", item:section(), "use_sound", nil)
	local action_delay = 1
	if snd_name then
		local snd = xr_sound.get_safe_sound_object(snd_name,sound_object.s2d)
		snd:play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
		action_delay = snd:length() * 0.001
	end

	local effector = read_if_exists(sys_ini, "r_string", item:section(), "use_effector", nil)
	if effector then
		level.add_complex_effector(effector, 5598)
	end

	local use_count = read_if_exists(sys_ini, "r_float", item:section(), "use_count", 1)
	item:change_condition(-1/use_count)
	if item:condition() == 0 then
		alife():release(alife():object(item:id()), true)
	end
	
	block_non_move_action(true)
	add_time_delayed_action(action_delay, 
		function()
			if limb == "hand" then 
				hand_injured = false
				unsubscribe_hands()
			elseif limb == "leg" then 
				leg_injured = false
				unsubscribe_legs()
			end
			block_non_move_action(false)
		end
	)	
end

function apply_pain_effect(sect, enable)
	local pain_boost = read_if_exists(sys_ini, "r_float", sect, "boost_pain", 0)
	if pain_boost == 0 then
	return end
	add_pain_effect(enable and pain_boost or -pain_boost)
end

--//script menu actions
function can_heal_nand(item)
	return hand_injured and read_if_exists(sys_ini, "r_bool", item:section(), "heal_injuries", false)
end
function heal_nand(item)
	heal_injure(item, "hand")
end

function can_heal_leg(item)
	return leg_injured and read_if_exists(sys_ini, "r_bool", item:section(), "heal_injuries", false)
end
function heal_leg(item)
	heal_injure(item, "leg")
end