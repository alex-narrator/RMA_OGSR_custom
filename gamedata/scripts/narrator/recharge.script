-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "inv_drag_drop", fun = this.try_recharge})
end

function try_recharge(obj, drop_on_obj)
	if not can_recharge(obj, drop_on_obj) then 
	return end
	show_recharge_wnd(obj, drop_on_obj)
end

function can_recharge(obj, drop_on_obj)
	return parent_is_actor(obj) and is_power_device(drop_on_obj) and drop_on_obj:binded_object():can_attach(obj)
end

function show_recharge_wnd(obj, drop_on_obj)
	local recharge_msg_box = ui_message_box.MessageBoxWnd()
	local msg_text = string.format(
		"%s %s\\n%s %s ?", 
		game.translate_string("st_recharge_item"), 
		game.translate_string(get_inv_name(drop_on_obj:section())), 
		game.translate_string("st_recharge_with"), 
		game.translate_string(get_inv_name(obj:section())))
	recharge_msg_box:InitAction(msg_text, recharge, obj, drop_on_obj)
end

recharge_effector_id = 20001

function recharge(obj, drop_on_obj)
	drop_on_obj:binded_object():recharge(obj)
	local battery_sect = obj:section()	
	local recharge_sound = read_if_exists(sys_ini, "r_string", battery_sect, "use_sound", nil)
	if recharge_sound then
		xr_sound.get_safe_sound_object(recharge_sound):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
	end
	local recharge_effector = read_if_exists(sys_ini, "r_string", battery_sect, "use_effector", nil)
	if recharge_effector then
		level.remove_complex_effector(recharge_effector_id)
		level.add_complex_effector(recharge_effector, recharge_effector_id)
	end
end

function action_allowed(item)
	return parent_is_actor(item) or actor_menu:GetMode() == "inventory" or actor_menu:GetMode() == "carbody"
end

--//script menu actions
function detach_power_source_tip(obj)
	return string.format("%s %s", game.translate_string("st_detach"), game.translate_string(get_inv_name_short(obj:binded_object():get_power_sect())))
end
function can_detach_power_source(obj)
	return is_power_device(obj) and obj:binded_object():can_detach_power_source() and action_allowed(obj)
end
function detach_power_source(obj)
	obj:binded_object():detach_power_source()
	local cell_item = actor_menu:GetCellItem(obj)
	if cell_item then
		cell_item:ForceUpdate()
	end
end

function pda_tip(obj)
	return string.format("%s %s", game.translate_string("st_attach_to"), game.translate_string(get_inv_name_short(actor_get_pda():section())))
end
function can_recharge_pda(obj)
	return can_recharge(obj, actor_get_pda())
end
function recharge_pda(obj)
	recharge(obj, actor_get_pda())
end

function torch_tip(obj)
	return string.format("%s %s", game.translate_string("st_attach_to"), game.translate_string(get_inv_name_short(actor_get_torch():section())))
end
function can_recharge_torch(obj)
	return can_recharge(obj, actor_get_torch())
end
function recharge_torch(obj)
	recharge(obj, actor_get_torch())
end

function detector_tip(obj)
	return string.format("%s %s", game.translate_string("st_attach_to"), game.translate_string(get_inv_name_short(actor_get_device():section())))
end
function can_recharge_detector(obj)
	return can_recharge(obj, actor_get_device())
end
function recharge_detector(obj)
	recharge(obj, actor_get_device())
end