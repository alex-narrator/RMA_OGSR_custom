-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_campfire_zone_spawn", fun = this.on_campfire_zone_spawn})
	sm:subscribe({signal = "on_campfire_zone_destroy", fun = this.on_campfire_zone_destroy})
	sm:subscribe({signal = "on_campfire_usable_spawn", fun = this.on_campfire_usable_spawn})
	sm:subscribe({signal = "on_campfire_usable_destroy", fun = this.on_campfire_usable_destroy})	
	sm:subscribe({signal = "on_first_update", fun = this.on_first_update})
end

local campfire_zones = {}
local campfire_usable = {}
local CAMPFIRE_LIGHT_DIST = 4

function get_nearest_campfire_zone(pos, distance)
	for id,_ in pairs(campfire_zones) do
		campfire = level.object_by_id(id)
		local dist = pos:distance_to(campfire:position())
		if dist <= distance then
			return campfire
		end
	end
	return nil
end

function get_nearest_campfire_usable(pos, distance)
	for id,_ in pairs(campfire_usable) do
		campfire = level.object_by_id(id)
		local dist = pos:distance_to(campfire:position())
		if dist <= distance then
			return campfire
		end
	end
	return nil
end

function on_campfire_zone_spawn(campfire)
	local se_campfire = alife():object(campfire:id())
	if se_campfire.usable_campfire_id == 0 then
		local fireplace_usable = spawn_to_level("fireplace", campfire:position(), level.name(), campfire:direction())
		se_campfire.usable_campfire_id = fireplace_usable.id
		--log3("~create usable fireplace %s for campfire %s", fireplace_usable:name(), campfire:name())
	end
	campfire_zones[campfire:id()] = se_campfire.usable_campfire_id
end

function on_campfire_zone_destroy(campfire)
	if not campfire_zones[campfire:id()] then
	return end
	campfire_zones[campfire:id()] = nil
end

function get_campfire_zones()
	return campfire_zones
end

function on_campfire_usable_spawn(campfire)
	campfire_usable[campfire:id()] = true
end

function on_campfire_usable_destroy(campfire)
	if not campfire_usable[campfire:id()] then
	return end
	campfire_usable[campfire:id()] = nil
end

function get_campfire_usable()
	return campfire_usable
end

function on_first_update()
	--//вимикаємо всі лампочки в багаттях - idle_light аномалії світить достатньо
	for k,v in pairs(campfire_zones) do
		local campfire = level.object_by_id(k)
		for kk,vv in pairs(light_manager.get_lights()) do
			local light = level.object_by_id(kk)
			if distance_between_safe(light, campfire) <= CAMPFIRE_LIGHT_DIST then
				local se_light = alife():object(light:id())
				if se_light and se_light.is_on then
					light:get_hanging_lamp():turn_off()
					se_light.is_on = false
					--log3("~switch off light %s", light:name())
				end
			end
		end
	end	
end