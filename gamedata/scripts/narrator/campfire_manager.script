-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_campfire_spawn", fun = this.on_campfire_spawn})
	sm:subscribe({signal = "on_campfire_destroy", fun = this.on_campfire_destroy})
	sm:subscribe({signal = "on_campfire_update", fun = this.on_campfire_update})
	sm:subscribe({signal = "on_update", fun = this.on_update})
end

local campfires = {}
local usable_campfire = false

function get_nearest_campfire(target)
	local campfire, nearest_campfire = false, false
	local dist, min_dist = false, 100000
	for id,_ in pairs(campfires) do
		campfire = level.object_by_id(id)
		dist = distance_between_safe(target, campfire)
		if dist < min_dist then
			nearest_campfire = campfire
			min_dist = dist
		end
	end
	return nearest_campfire, min_dist
end

function on_campfire_spawn(campfire)
	campfires[campfire:id()] = true
end

function on_campfire_destroy(campfire)
	if not campfires[campfire:id()] then
	return end
	campfires[campfire:id()] = nil
end

function on_campfire_update(campfire, delta)
	local nearest_campfire = get_nearest_campfire(actor)
	if not nearest_campfire or nearest_campfire:id() ~= campfire:id() then
	return end
end

function on_update()
	local nearest_campfire, nearest_dist = get_nearest_campfire(actor)
	if nearest_campfire and 
		is_actor_looking_to_pos(nearest_campfire:position(), nearest_campfire:radius()) and 
		nearest_dist <= get_actor_obj().inventory.take_dist 
	then
		local text = game.translate_string("ui_use_campfire")
		hud_add_info_message("quick_info", text)
		usable_campfire = nearest_campfire
	elseif usable_campfire then
		hud_remove_info_message("quick_info")
		usable_campfire = false
	end
end