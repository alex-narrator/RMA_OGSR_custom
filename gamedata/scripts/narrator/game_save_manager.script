-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press",   	fun = this.on_key_press})
	sm:subscribe({signal = "on_task_stage",   	fun = this.on_task})
end

local ON_TASK_SAVE_UPDATE_DELAY = 50

local quick_save_keys = {
	[key_bindings.kQUICK_SAVE] = true,
	[key_bindings.kQUICK_LOAD] = true,
}

function on_key_press(key, game_action)
	if not quick_save_keys[game_action] then 
	return end
	
	if game_action == key_bindings.kQUICK_SAVE then
		make_quick_save()
	else
		quick_last_load()
	end
end

function make_quick_save()
	--local save_name = user_name().."_quicksave_"
	local save_name = "quicksave_"
		
	local last_quick_name = false
	
	local flist = getFS():file_list_open_ex( "$game_saves$", FS.FS_ListFiles + FS.FS_ClampExt + FS.FS_RootOnly + FS.FS_NoLower, "*.sav" )
	flist:Sort(FS.FS_sort_by_modif_down)
	for file in flist:GetAll() do
		if string.find(file:NameFull(), save_name) then
			last_quick_name = file:NameFull()
			break
		end
	end

	local i = 1
	if last_quick_name then
		local last_quick_num = last_quick_name:gsub(save_name, "")
		last_quick_num = tonumber(last_quick_num)
		if last_quick_num and last_quick_num < get_script_option_value("quick_save_max") then
			i = last_quick_num + 1
		end		
	end
	local next_save_name = save_name..i
	
	local save_cmd = string.format("save %s", next_save_name)
	get_console():execute(save_cmd)
end

function quick_last_load()
	get_console():execute("load_last_save")
end

function can_save_game()
	local result = true
	local refuse_reason
	local save_game_mode = get_script_option_value("game_save_mode")
	--log3("~save_game_mode [%s]", save_game_mode)
	if save_game_mode == 1 then
		result = not has_enemy_near(actor, get_script_option_value("check_enemy_radius"))
		if not result then
			refuse_reason = "st_enemies_nearby"
		end
	end
	if save_game_mode == 2 then
		result = campfire_effects.actor_used_campfire()
		if not result then
			refuse_reason = "st_not_fireplace"
		end		
	end
	--log3("~can save game [%s]", result)
	if refuse_reason then
		local refuse_text = string.format("%s: %s", game.translate_string("ui_st_cant_save_game"), game.translate_string(refuse_reason))
		hud_add_info_message("item_usage", refuse_text, 5)
	end
	return result
end

function on_task(task, objective, stage)
	add_update_delayed_action(ON_TASK_SAVE_UPDATE_DELAY,
		function()
			--local save_cmd = string.format("save %s", string.format("%s [%s] %s", user_name(), game.translate_string("general_"..stage.."_task"), game.translate_string(task:get_title())))
			local save_cmd = string.format("save %s", string.format("[%s] %s", game.translate_string("general_"..stage.."_task"), game.translate_string(task:get_title())))
			get_console():execute(save_cmd)	
		end
	)
end