function attach(sm)
	sm:subscribe({signal = "on_inventory_show", fun = this.process_effects})
	sm:subscribe({signal = "on_inventory_hide", fun = this.process_effects})
	sm:subscribe({signal = "on_carbody_show", 	fun = this.process_effects})
	sm:subscribe({signal = "on_carbody_hide", 	fun = this.process_effects})
end

function process_effects(npc, info_id)
	local enable = (info_id == "ui_inventory" or info_id == "ui_car_body")
	play_effects(enable)
end

local effects = {--/ effector_name, effector_id
	["open"] = {"effector_inv_open", 66677},
	["close"] = {"effector_inv_close", 66678},
}
local saved_state = -1
local actor = get_actor_obj()

function effect_playing()
	return level.check_complex_effector(effects["open"][2]) or level.check_complex_effector(effects["close"][2])
end

function skip_state()
	return actor:is_actor_climb() or actor:is_actor_climbing() or 
			actor:is_actor_crouch() or actor:is_actor_crouching() or 
			actor:is_actor_creep() or actor:is_actor_creeping()
end

function play_effects(enable)
	local effect
	local is_playing_now = effect_playing()
	if enable then
		saved_state = skip_state() and -1 or actor:get_state_wishful()
		if saved_state ~= -1 then
			actor:set_state_wishful(move_command.mcCrouch)
		end
		if is_playing_now then return end
		effect = effects["open"]
		level.add_complex_effector(effect[1], effect[2])
	else
		if saved_state ~= -1 then
			actor:set_state_wishful(saved_state)
		end
		if is_playing_now then return end
		effect = effects["close"]
		level.add_complex_effector(effect[1], effect[2])
	end
end