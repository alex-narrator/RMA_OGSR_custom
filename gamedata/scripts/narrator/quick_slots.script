-- -*- mode: lua; coding: windows-1251-dos -*-
local quick_action = {
	[key_bindings.kQUICK_SLOT_0] = true,
	[key_bindings.kQUICK_SLOT_1] = true,
	[key_bindings.kQUICK_SLOT_2] = true,
	[key_bindings.kQUICK_SLOT_3] = true,
}

local quick_sect = {
	[0] = "",
	[1] = "",
	[2] = "",
	[3] = "",
}

local quick_selected

function attach(sm)
	sm:subscribe({signal = "on_key_press",   		fun = this.on_key_press})
	sm:subscribe({signal = "on_save",   			fun = this.on_save})
	sm:subscribe({signal = "on_load",   			fun = this.on_load})
	sm:subscribe({signal = "on_cell_item_mouse",   	fun = this.try_set_item})
end

function on_key_press(key, game_action)
	if level.main_input_receiver() or 
		not quick_action[game_action] or
		not actor_hands_free()
	then
	return end
	
	local slot_num = game_action - key_bindings.kQUICK_SLOT_0
	use_quick_item(slot_num)
end

function try_set_item(obj, x, y, action)
	local item_allowed = read_if_exists(sys_ini, "r_bool", obj:section(), "quick_slot", false)
	if action ~= ui_events.DRAG_DROP_ITEM_DROP or 
		not quick_selected or 
		not item_allowed 
	then 
	return end
	
	set_item(obj:section(), quick_selected)
	set_selected(nil)
end

function use_quick_item(slot_num)
	local item = get_item(slot_num)
	if not item then
	return end
	
	if item:is_eatable_item() then
		actor:eat(item)
		return
	end
	
	if actor_get_backpack() and 
		item:id() == actor_get_backpack():id() then
		backpack.try_drop()
		return
	end
	
	if item:is_helmet() then
		gasmask.wear_mask(item)
		return
	end
end

function get_item(slot_num)
	local sect = quick_sect[slot_num]
	local item = nil
	--шукаємо предмети у розгрузці
	for k,v in pairs(loadout.get_loaded_items()) do
		item = level.object_by_id(k)
		if item and item:section() == sect then
			return item
		end
	end
	--шукаєм рюкзак
	if actor_get_backpack() and actor_get_backpack():section() == sect then
		return actor_get_backpack()
	end
	--шукаємо протигаз
	if actor_get_helmet() and actor_get_helmet():section() == sect then
		return actor_get_helmet()
	elseif actor:object(sect) and actor:object(sect):is_helmet() then
		return actor:object(sect)
	end	
	return nil
end

function set_item(item_sect, slot_num)
	quick_sect[slot_num] = item_sect
	for num, sect in pairs(quick_sect) do
		if sect == item_sect and num ~= slot_num then
			quick_sect[num] = ""
		end
	end
	xr_sound.get_safe_sound_object("interface\\inv_slot", sound_object.s2d):play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)--play_at_pos(actor,actor:position())
	ogse_signals.get_mgr():call("on_quick_item_set", item_sect, slot_num)
end

function get_item_sect(slot_num)
	return quick_sect[slot_num]
end

function get_item_count(slot_num)
	local sect = quick_sect[slot_num]
	local res = 0
	if not sect then
		return res
	end
	local item
	--шукаєм предмети у розгрузці
	for k,v in pairs(loadout.get_loaded_items()) do
		item = level.object_by_id(k)
		if item and item:section() == sect then
			res = res + 1
		end
	end
	--шукаєм рюкзак
	if actor_get_backpack() and actor_get_backpack():section() == sect then
		res = res + 1
	end
	--шукаємо шолом
	if actor_get_helmet() and actor_get_helmet():section() == sect then
		res = res + 1
	elseif actor:object(sect) and actor:object(sect):is_helmet() then
		res = res + 1
	end
	return res
end

function set_selected(val)
	quick_selected = val
end

function on_save(packet)
	xr_vars.save_var(script_name(), quick_sect)
end

function on_load(reader)
	quick_sect = xr_vars.load_var(script_name(), quick_sect)
end

--//функції для скриптового пункту контекстного меню
local selected_slot = nil
function can_set(item)
	if not read_if_exists(sys_ini, "r_bool", item:section(), "quick_slot", false) then
	return false end
	
	selected_slot = nil
	for slot_num,item_sect in pairs(quick_sect) do
		if item_sect == "" then
			selected_slot = slot_num
			return true
		end
	end
	for slot_num,item_sect in pairs(quick_sect) do
		if item_sect ~= item:section() then
			selected_slot = slot_num
			return true
		end
	end	
	return false
end
function set(item)
	set_item(item:section(), selected_slot)
end
function menu_tip_set(item)
	return game.translate_string("st_to_quick_slot_"..selected_slot)
end