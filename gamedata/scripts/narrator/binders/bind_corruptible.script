-- -*- mode: lua; coding: windows-1251-dos -*-
------------------------------------------------------------------------------------------
--біндер предметів що псуються з часом
------------------------------------------------------------------------------------------

local CONDITION_DECREASE_UPDATE_TIME = 10 --//час оновлення декременту у ігрових секундах
local zero_time = game.CTime()

function init(obj)
	if not is_corruptible(obj) then
		log3("![%s]:init failed to bind object name:[%s] section:[%s] - not a corruptible item\nsee se_item.script for corruptible items (must have a self.last_time_called field)", script_name(), obj:name(), obj:section())
	return end
    local new_binder = corruptible_binder(obj)
    obj:bind_object(new_binder)
end

--послідовність викликів:
--__init
--reload
--load (if save was called before)
--net_spawn

class "corruptible_binder" (object_binder)
function corruptible_binder:__init(obj) super(obj)
	--log3("%s __init for object %s", script_name(), self.object:name())
	self.corruption_time = 0
	self.condition_decrease = 0
	self.destroy_corrupted = false
	self.se_obj = alife():object(self.object:id())
end
 
function corruptible_binder:reload(section)
	--log3("%s reload for object %s", script_name(), self.object:name())
    object_binder.reload(self, section)
	self.corruption_time = read_if_exists(sys_ini, "u32", self.object:section(), "corruption_time", 1)
	self.condition_decrease = (1 / (3600 * self.corruption_time))
	self.destroy_corrupted = read_if_exists(sys_ini, "bool", self.object:section(), "destroy_corrupted", false)
end
 
function corruptible_binder:net_spawn(data)
	--log3("%s net_spawn for object %s", script_name(), self.object:name())
    local spawned = object_binder.net_spawn(self, data)
	return spawned
end
 
function corruptible_binder:update(delta)
    object_binder.update(self, delta)
	
	if self:can_be_corrupted() then
		--log3("[%s] item %s is corrupting now", script_name(), self.object:name())
		self:decrease_condition()
	end
end
 
function corruptible_binder:can_be_corrupted()
	return self.object:condition()
end

function corruptible_binder:decrease_condition()
	local game_time = game.get_game_time()
	
	if self:get_last_time_called() == zero_time then
		self:set_last_time_called(game_time)
	end
	
	-- log3("%s:decrease_condition last_time_called %s : %s for item %s", script_name(), self:get_last_time_called():dateToString(game.CTime.DateToDay), self:get_last_time_called():timeToString(game.CTime.TimeToMilisecs), self.object:name())
	-- log3("%s:decrease_condition game_time %s : %s for item %s",script_name(), game_time:dateToString(game.CTime.DateToDay), game_time:timeToString(game.CTime.TimeToMilisecs), self.object:name())
	
	local delta_time = game_time:diffSec(self:get_last_time_called())
	-- log3("%s delta_time %s for %s", script_name(), delta_time, self.object:name())
	
	if delta_time < CONDITION_DECREASE_UPDATE_TIME then
	return end
	
	self:set_last_time_called(game_time)
	
	self.object:change_condition(-self.condition_decrease * delta_time)
	
	if self.object:condition() == 0 and self.destroy_corrupted then
		local obj_name = self.object:name()
		if self.object:parent() then
			self.object:parent():drop_item(self.object)
		end
		if not self.object then
			log3("!%s : can't destroy item [%s] - it`s alreday released", script_name(), obj_name)
		return end
		alife():release(alife():object(self.object:id()), true)
		--log3("~[%s] item %s destroyed due to total corruption at %s %s", script_name(), self.object:name(), game_time:dateToString(game.CTime.DateToDay), game_time:timeToString(game.CTime.TimeToMilisecs), self.object:name())
		
		if parent_is_actor(self.object) then
			news_manager.item_tip(self.object, "destroyed_corrupted")
		end
	end
end

function corruptible_binder:get_last_time_called()
	return self.se_obj.last_time_called
end

function corruptible_binder:set_last_time_called(_time)
	self.se_obj.last_time_called = _time
end