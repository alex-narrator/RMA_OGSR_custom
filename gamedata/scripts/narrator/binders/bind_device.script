------------------------------------------------------------------------------------------
--біндер приладів що використовують джерела живлення
------------------------------------------------------------------------------------------

local storage = xr_vars.get_storage("power_device")

local POWER_CONSUMING_UPDATE_TIME = 10 --//час оновлення декременту у ігрових секундах

function init(obj)
    local new_binder = device_binder(obj)
    obj:bind_object(new_binder)
end

--послідовність викликів:
--__init
--reload
--load (if save was called before)
--net_spawn

class "device_binder" (object_binder)
function device_binder:__init(obj) super(obj)
	--log3("%s __init for object %s", script_name(), self.object:name())
	self.power_level = 1
	self.work_time = false
	self.power_consumption = false
	self.last_update_time = false
	self.cur_power_sect = 1
	self.power_sect_tbl = {}
	
	if not storage[self.object:id()] then
		storage[self.object:id()] = {
			power_level = self.power_level, 
			cur_power_sect = self.cur_power_sect,
		}
	end
end
 
function device_binder:reload(section)
	--log3("%s reload for object %s", script_name(), self.object:name())
    object_binder.reload(self, section)
	
	local power_sect_str = read_if_exists(sys_ini, "r_string", self.object:section(), "power_source", self.object:section())
	self.power_sect_tbl = split_string(power_sect_str, ",")
end
 
function device_binder:net_spawn(data)
	--log3("%s net_spawn for object %s", script_name(), self.object:name())
    local spawned = object_binder.net_spawn(self, data)

	self.power_level = storage[self.object:id()].power_level
	self.cur_power_sect = storage[self.object:id()].cur_power_sect
	self:init_power_source()

	return spawned
end

function device_binder:net_export(packet)
	object_binder.net_export(self, packet)
	log3("%s net_Export for %s", script_name(), self.object:name())
end

function device_binder:net_import(packet)
	object_binder.net_import(self, packet)
	log3("%s net_Import for %s", script_name(), self.object:name())
end
 
function device_binder:update(delta)
    object_binder.update(self, delta)
	
	if self:is_working() then
		--log3("~[%s]: device %s is working now", script_name(), self.object:name())
		self:decrease_power()
	end
end
 
function device_binder:init_power_source()
	self.work_time = read_if_exists(sys_ini, "r_u32", self:get_power_sect(), "work_time", 1)
	self.power_consumption = 1 / (self.work_time * 3600)
end

function device_binder:is_working()
	local device = false
	
	local actor_pda = actor_get_pda()
	if actor_pda and actor_pda:id() == self.object:id() then
		device = self.object
	end
	
	local actor_torch = actor_get_torch()
	if actor_torch and actor_torch:id() == self.object:id() then
		device = self.object
	end
	
	local actor_detector = actor_get_detector()
	if actor_detector and actor_detector:id() == self.object:id() then
		device = self.object
	end
	
	return device and device:is_power_on()
end

function device_binder:decrease_power()
	if self.object:condition() == 0 or self:get_power_level() == 0 then
		if self.object:is_power_on() then
			self.object:switch_power(false)
		end
	return end
	
	local game_time = game.get_game_time()
	
	if not self.last_update_time then
		self.last_update_time = game_time
	end
	
	--log3("%s:decrease_condition self.last_update_time %s : %s for item %s", script_name(), self.last_update_time:dateToString(game.CTime.DateToDay), self.last_update_time:timeToString(game.CTime.TimeToMilisecs), self.object:name())
	--log3("%s:decrease_condition game_time %s : %s for item %s",script_name(), game_time:dateToString(game.CTime.DateToDay), game_time:timeToString(game.CTime.TimeToMilisecs), self.object:name())
	
	local delta_time = game_time:diffSec(self.last_update_time)
	--log3("%s delta_time %s for %s", script_name(), delta_time, self.object:name())
	
	
	if delta_time < POWER_CONSUMING_UPDATE_TIME then
	return end
	
	self.last_update_time = game_time
	
	self:change_power_level(-self.power_consumption * delta_time)
end

function device_binder:power_source_detachable()
	return self.power_sect_tbl[1] ~= self.object:section()
end

function device_binder:can_attach(obj)
	return self:power_source_detachable() and 
		self.object:condition() > 0 and 
		obj:condition() > 0 and 
		self:get_power_sect_num(obj:section())
end

function device_binder:get_power_sect()
	return self.power_sect_tbl[self.cur_power_sect]
end

function device_binder:set_power_sect(num)
	if num > #self.power_sect_tbl then
		log3("![%s]: wrong self.cur_power_sect [%s/%s] for device [%s] - set default battery section", script_name(), num, #self.power_sect_tbl, self.object:section())
		num = 1
	end
	self.cur_power_sect = num
	storage[self.object:id()].cur_power_sect = self.cur_power_sect
end

function device_binder:get_power_sect_num(section)
	for k, v in pairs(self.power_sect_tbl) do
		if section == v then
			return k
		end
	end
	return false
end

function device_binder:get_work_time()
	return self.work_time
end

function device_binder:get_power_level()
	return self.power_level
end

function device_binder:set_power_level(val)
	self.power_level = val
	self.power_level = math.clamp(self.power_level,0,1)
	storage[self.object:id()].power_level = self.power_level
end

function device_binder:change_power_level(val)
	self.power_level = self.power_level + val
	self.power_level = math.clamp(self.power_level,0,1)
	storage[self.object:id()].power_level = self.power_level
end

function device_binder:recharge(obj_battery)
	if self:get_power_level() > 0 then
		if self:power_source_detachable() then
			local parent = self.object:parent()
			local sobj = alife():create(self:get_power_sect(), parent:position(), parent:level_vertex_id(), parent:game_vertex_id(), parent:id())
			local sobj_iitem = alife():object(sobj.id):get_inventory_item()
			sobj_iitem.item_condition = self:get_power_level()
		end
	end
	
	local new_power_level = obj_battery:condition()
	self:set_power_level(new_power_level)
	self:set_power_sect(self:get_power_sect_num(obj_battery:section()))
	
	alife():release(alife():object(obj_battery:id()), true)
	if not self.object:is_power_on() then
		self.object:switch_power(true)
	end
end