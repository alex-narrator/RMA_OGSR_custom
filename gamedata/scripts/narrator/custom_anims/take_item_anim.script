function attach(sm)
	sm:subscribe({signal = "on_key_press", 				fun = this.on_key_press})
	sm:subscribe({signal = "on_pickup_item_showing", 	fun = this.on_pickup_item_showing})
end

local BLOCK_TAKE_DELAY 	= 0.7
local is_playing = false
local item_icon = false
local pickup_item = false
local hud_sect = "pickup_hud"
local hud_effector_id = 5559

function on_pickup_item_showing(item, icon)
	item_icon = icon
	pickup_item = item
end

function is_quick_info_shown()
	return get_main_window() and get_main_window():FindChild("quick_info") and get_main_window():FindChild("quick_info"):IsShown()
end

function can_play_for_container()
	return not pickup_item:is_inventory_box() or 
		not is_quick_info_shown() or
		level.get_key_state(bind_to_dik(key_bindings.kADDITIONAL_ACTION)) or
		(not level.get_target_obj() or level.get_target_obj():id() ~= pickup_item:id())
end

function check_target_item()
	return not level.get_target_obj() or level.get_target_obj():is_inventory_item()
end

function can_play_anim()
	return item_icon and item_icon:IsShown() and actor_hands_free() and not is_playing and check_target_item() and can_play_for_container()
end

function on_key_press(key, game_action)
	if game_action ~= key_bindings.kUSE or
		not can_play_anim()
	then
	return end
		
	is_playing = true
	get_actor_obj():block_action(key_bindings.kUSE)
		
	local wpn = actor:active_item() and actor:active_item():get_weapon()
	if wpn and wpn.zoom_mode then
		wpn:zoom_out()
	end
	
	game.play_hud_anm("camera_effects\\item_use\\two_handed_weapon_effect.anm", 0, 1.4, 1, false)
	game.play_hud_motion(1, hud_sect, "anm_use", false, 1, false)
	local eff_name = read_if_exists(sys_ini, "r_string", hud_sect, "hud_effector", nil)
	level.add_complex_effector(eff_name, hud_effector_id)
	
	xr_sound.get_safe_sound_object("interface\\item_usage\\pickup",sound_object.s2d):play_at_pos(actor,actor:position())
	
	add_time_delayed_action(
		BLOCK_TAKE_DELAY, 
		function() 
			get_actor_obj():unblock_action(key_bindings.kUSE)
			level.send_event_key_press(bind_to_dik(key_bindings.kUSE))
			level.send_event_key_release(bind_to_dik(key_bindings.kUSE))
			is_playing = false
		end
	)
end