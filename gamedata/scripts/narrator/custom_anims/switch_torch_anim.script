-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_key_press",   		fun = this.on_key_press})
	sm:subscribe({signal = "on_spawn",   			fun = this.on_spawn})
end

local torch_action = {
	[key_bindings.kTORCH] = true,
}

local actor_obj = get_actor_obj()
local is_playing = false
local hud_effector_id = 5557

function on_spawn()
	for action,_ in pairs(torch_action) do
		actor_obj:block_action(action)
	end
end

function on_key_press(key, game_action)
	local curr_torch = actor_get_torch()
	if not torch_action[game_action] or
		not actor_hands_free() or
		is_playing or actor:get_holder() or
		not curr_torch
	then
	return end
	
	local torch_sect = curr_torch:section()
	
	if game_action == key_bindings.kTORCH and 
		not torch.get_light_sect(curr_torch)
	then return end
	
	local hud_sect = get_hud_sect(actor_get_torch())
	
	game.play_hud_motion(1, hud_sect, "anm_use", false, 1, false)
	local eff_name = read_if_exists(sys_ini, "r_string", hud_sect, "hud_effector", nil)
	level.add_complex_effector(eff_name, hud_effector_id)
	is_playing = true
	
	local switch_mode = game_action == key_bindings.kTORCH and
		level.get_key_state(bind_to_dik(key_bindings.kADDITIONAL_ACTION)) and 
		torch.get_light_sect_second(curr_torch)
	
	add_time_delayed_action(
		read_if_exists(sys_ini, "r_float", hud_sect, "use_delay", 1.5),
		function()

			if not torch.can_switch(curr_torch) then
			return end
			
			if switch_mode then
				torch.switch_mode(curr_torch)
			else
				torch.switch_torch(curr_torch)
			end
		end
	)
	
	level.add_call(
		function()
			return game.hud_motion_allowed()
		end,
		function()
			is_playing = false
		end
	)
end