-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "inv_drag_drop", fun = this.try_service})
end

function try_service(obj, drop_on_obj)
	if can_service(obj, drop_on_obj) then
		show_service_wnd(obj, drop_on_obj)
	return end
	local tool = get_tool_sect(drop_on_obj)
	if tool and tool == obj:section() and can_disassemble_item(drop_on_obj) then
		show_disassemble_wnd(obj, drop_on_obj)
	return end
end

function action_allowed(item)
	return parent_is_actor(item) or actor_menu:GetMode() == "inventory" or actor_menu:GetMode() == "carbody"
end

function can_service(obj, drop_on_obj)
	if not drop_on_obj then
	return false end
	local service_type = read_if_exists(sys_ini, "r_string", obj:section(), "service_type", nil)
	local can_service = false
	if not service_type then
		local parts = read_if_exists(sys_ini, "r_string", drop_on_obj:section(), "disassemble_parts", nil)
		can_service = parts and string.find(parts, obj:section())
	else
		can_service = (service_type == "knife" and drop_on_obj:is_knife()) or
		(service_type == "weapon" and drop_on_obj:is_weapon_magazined()) or
		(service_type == "helmet" and drop_on_obj:is_helmet()) or
		(service_type == "outfit" and (drop_on_obj:is_outfit() or drop_on_obj:get_container()))
	end
	return can_service and check_condition(obj, drop_on_obj) and action_allowed(drop_on_obj) and action_allowed(obj)
end

function get_rank_k()
	local rank = actor:character_rank()
	if rank < 300 then 		--novice
		return 0.8
	elseif rank < 600 then 	--experienced
		return 0.9
	elseif rank < 900 then 	--veteran
		return 1.1
	else					--master
		return 1.2
	end
end

function check_condition(obj, drop_on_obj)
	local victim_cond = drop_on_obj:condition()
	local min_cond = read_if_exists(sys_ini, "r_float", obj:section(), "service_cond_threshold", 0)
	return victim_cond > 0 and victim_cond < 1 and victim_cond > min_cond
end

function max_cond_add(obj, drop_on_obj)
	local cond_gain = read_if_exists(sys_ini, "r_float", obj:section(), "service_condition_gain", 0)
	local cond_add = cond_gain * get_rank_k()
	local parts = read_if_exists(sys_ini, "r_string", drop_on_obj:section(), "disassemble_parts", nil)
	if parts and string.find(parts, obj:section()) then
		cond_add = cond_add * obj:condition()
	end
	cond_add = math.clamp(cond_add, 0.01, 1)
	cond_add = cond_add + cond_add * campfire_effects.service_bonus()
	cond_add = math.round(cond_add, 3)
	return cond_add
end

function show_service_wnd(obj, drop_on_obj)
	local service_msg_box = ui_message_box.MessageBoxWnd()
	local msg_text = string.format(
		"%s %s\\n%s %s ?\\n-\\n%s %s%s",
		game.translate_string(read_if_exists(sys_ini, "r_string", drop_on_obj:section(), "service_tip", "st_service_item")), 
		game.translate_string(get_inv_name(drop_on_obj:section())), 
		game.translate_string("st_service_with"), 
		game.translate_string(get_inv_name(obj:section())),
		game.translate_string("st_max_codition_gain"),
		max_cond_add(obj, drop_on_obj) * 100,
		game.translate_string("st_percent")
	)
	service_msg_box:InitAction(msg_text, service, obj, drop_on_obj)
end

local repair_effector_id = 20000

function service(obj, drop_on_obj)
	local rep_kit_sect = obj:section()
	
	local repair_sound = read_if_exists(sys_ini, "r_string", rep_kit_sect, "use_sound", nil)
	local action_delay = 1
	if repair_sound then
		local snd = xr_sound.get_safe_sound_object(repair_sound)
		snd:play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
		action_delay = snd:length() * 0.001
	end
	local repair_effector = read_if_exists(sys_ini, "r_string", rep_kit_sect, "use_effector", nil)
	if repair_effector then
		level.remove_complex_effector(repair_effector_id)
		level.add_complex_effector(repair_effector, repair_effector_id)
	end	
	
	local function make_service()
		local cond_add = max_cond_add(obj, drop_on_obj)
		local cond_start = drop_on_obj:condition()
		drop_on_obj:change_condition(cond_add)
		local cond_end = drop_on_obj:condition()
		local text = string.format("%s %s %.1f%s", game.translate_string(get_inv_name(drop_on_obj:section())), game.translate_string("st_codition_gain"), (cond_end-cond_start)*100, game.translate_string("st_percent"))
		news_manager.custom_news(game.translate_string("st_service_news_header"), text, "ui_icon_repair_tool")
		
		local use_count = read_if_exists(sys_ini, "r_float", rep_kit_sect, "use_count", 0)
		if use_count > 0 then
			obj:change_condition(-1/use_count)
			if obj:condition() == 0 then
				alife():release(alife():object(obj:id()), true)
			end
		end
		block_non_move_action(false)
	end
	
	block_non_move_action(true)
	add_time_delayed_action(action_delay, make_service)
end

--//script menu actions
function service_0_tip(obj)
	return string.format("%s %s", game.translate_string("st_service"), game.translate_string(get_inv_name_short(actor:item_in_slot(0):section())))
end
function can_service_0(obj)
	return can_service(obj, actor:item_in_slot(0))
end
function service_0(obj)
	--service(obj, actor:item_in_slot(0))
	show_service_wnd(obj, actor:item_in_slot(0))
end

function service_1_tip(obj)
	return string.format("%s %s", game.translate_string("st_service"), game.translate_string(get_inv_name_short(actor:item_in_slot(1):section())))
end
function can_service_1(obj)
	return can_service(obj, actor:item_in_slot(1))
end
function service_1(obj)
	--service(obj, actor:item_in_slot(1))
	show_service_wnd(obj, actor:item_in_slot(1))
end

function service_2_tip(obj)
	return string.format("%s %s", game.translate_string("st_service"), game.translate_string(get_inv_name_short(actor:item_in_slot(2):section())))
end
function can_service_2(obj)
	return can_service(obj, actor:item_in_slot(2))
end
function service_2(obj)
	--service(obj, actor:item_in_slot(2))
	show_service_wnd(obj, actor:item_in_slot(2))
end

function service_4_tip(obj)
	return string.format("%s %s", game.translate_string("st_service"), game.translate_string(get_inv_name_short(actor:item_in_slot(4):section())))
end
function can_service_4(obj)
	return can_service(obj, actor:item_in_slot(4))
end
function service_4(obj)
	--service(obj, actor:item_in_slot(4))
	show_service_wnd(obj, actor:item_in_slot(4))
end

function service_6_tip(obj)
	return string.format("%s %s", game.translate_string("st_service"), game.translate_string(get_inv_name_short(actor:item_in_slot(6):section())))
end
function can_service_6(obj)
	return can_service(obj, actor:item_in_slot(6))
end
function service_6(obj)
	--service(obj, actor:item_in_slot(6))
	show_service_wnd(obj, actor:item_in_slot(6))
end


--//DISASSEMBLE

local wpn_prefix = [[interface\item_usage\inv_disassemble_metal_fast_]]
local outfit_prefix = [[interface\item_usage\inv_disassemble_cloth_fast_]]

local addon_type = {
	"silencer",
	"scope",
	"grenade_launcher",
	"laser",
	"flashlight",
	"stock",
	"extender",
	"forend",
}

function prepair(item)
	if actor:is_in_slot(item) then
		actor:move_to_ruck(item)
	end
	if recharge.can_detach_power_source(item) then
		recharge.detach_power_source(item)
	end
	-- if pda.can_download_info(item) then
		-- pda.download_info(item)
	-- end
	if vest_plates.can_detach_plate(item) then
		vest_plates.detach_plate(item)
	end
	local wpn = item:get_weapon_m()
	if wpn then
		item:unload_magazine_full()
		local addon_name
		for k,v in pairs(addon_type) do
			local i = k-1
			if wpn:is_addon_attached(i) and wpn:addon_attachable(i) then
				--wpn:detach_addon(wpn:get_addon_name(i), true)
				detach_addon(item, wpn:get_addon_name(i))
			end
		end
	end
end

function disassemble_item(tool, item, cell_item)
	local sect = item:section()
	local parent = item:parent()
	
	local snd_name = read_if_exists(sys_ini, "r_string", sect, "disassemble_snd", nil)
	if not snd_name then
		snd_name = item:is_weapon() and wpn_prefix or outfit_prefix
		local rnd_max = item:is_weapon() and 4 or 3
		snd_name = snd_name..math.random(1, rnd_max)
	end
	
	local snd = xr_sound.get_safe_sound_object(snd_name)
	snd:play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
	local action_delay = snd:length() * 0.001
	
	if cell_item then
		for k,v in pairs(cell_item:GetChilds()) do
			item = level.object_by_id(k)
			prepair(item)
		end
		item = cell_item:GetItem()
		prepair(item)
	else
		prepair(item)
	end
	
	local function action(item)
		if tool and tool:condition() <= 0 then
		return end
		
		local item_cond = item:condition()
		parent:drop_item(item)
		alife():release(alife():object(item:id()), true)
	
		if tool then
			local use_count = read_if_exists(sys_ini, "r_float", tool:section(), "use_count", 0)			
			if use_count > 0 then
				tool:change_condition(-1/use_count)
				if tool:condition() == 0 then
					if tool:parent() then
						tool:parent():drop_item(tool)
					end
					alife():release(alife():object(tool:id()), true)
				end
			end		
		end
		local parts = parse_parts(sys_ini:r_string(sect, "disassemble_parts"))
		for k,v in pairs(parts) do
			while v.count > 0 do
				local se_part = spawn_to_owner(v.section)
				local sobj_iitem = alife():object(se_part.id):get_inventory_item()
				sobj_iitem.item_condition = item_cond
				v.count = v.count - 1
			end
		end	
	end
	
	local function make_disassemble()
		if cell_item then
			for k,v in pairs(cell_item:GetChilds()) do
				item = level.object_by_id(k)
				if can_disassemble_item(item) then
					action(item)
				end
			end
			item = cell_item:GetItem()
			if can_disassemble_item(item) then
				action(item)
			end
		else
			action(item)
		end
		block_non_move_action(false)
	end
	
	block_non_move_action(true)
	add_time_delayed_action(action_delay, make_disassemble)	
end

function parse_parts(line)
	local t = split_string(line, ",")
	local ret_table = {}
	local k = 1
	while k <= #t do
		local parts = {}
		parts.section = t[k]
		-- Проверяем что это не последняя запись
		if t[k+1] ~= nil then
			local p = tonumber(t[k+1])
			if p then
				-- забиваем число
				parts.count = p
				k = k + 2
			else
				-- забиваем дефолт
				parts.count = 1
				k = k + 1
			end
		else
			parts.count = 1
			k = k + 1
		end
		table.insert(ret_table, parts)
	end
	return ret_table
end

function get_tool_sect(item)
	return read_if_exists(sys_ini, "r_string", item:section(), "disassemble_tool", nil)
end

function can_disassemble_item(item)
	local sect = item:section()
	local parts = read_if_exists(sys_ini, "r_string", sect, "disassemble_parts", nil)
	local tool = get_tool_sect(item)
	return parts and (not tool or actor:object(tool)) and action_allowed(item)
end

function show_disassemble_wnd(obj, drop_on_obj, cell_item)
	local count = 1
	if cell_item then
		count = count + cell_item:GetChildsCount()
	end
	local service_msg_box = ui_message_box.MessageBoxWnd("red")
	local msg_text = string.format(
		"%s %s%s?\\n%s\\n", 
		game.translate_string(read_if_exists(sys_ini, "r_string", drop_on_obj:section(), "disassemble_tip", "st_disassemble_item")), 
		count > 1 and string.format("%s ", count) or "",
		game.translate_string(get_inv_name(drop_on_obj:section())),
		game.translate_string("st_disassemble_parts")
	)
	local parts = parse_parts(sys_ini:r_string(drop_on_obj:section(), "disassemble_parts"))
	local part_str
	for k,v in pairs(parts) do
		part_str = string.format("%s %s x%s\\n", 
			game.translate_string("st_list_mark"),
			game.translate_string(get_inv_name(v.section)),
			tonumber(v.count) * count
		)
		msg_text = msg_text..part_str
	end
	service_msg_box:InitAction(msg_text, disassemble_item, obj, drop_on_obj, cell_item)
end

function get_saw_off_tool_sect(item)
	return read_if_exists(sys_ini, "r_string", item:section(), "sawed_off_tool", nil)
end

function can_saw_off_item(item)
	local sawed_off_sect = read_if_exists(sys_ini, "r_string", item:section(), "sawed_off", nil)
	if not sawed_off_sect then
	return false end
	local tool = get_saw_off_tool_sect(item)
	return not tool or actor:object(tool) and action_allowed(item)
end

local def_saw_off_snd = [[interface\item_usage\inv_repair_kit_with_brushes]]

function saw_off_item(tool, item)
	local sect = item:section()
	local parent = item:parent()
	
	local snd_name = read_if_exists(sys_ini, "r_string", sect, "saw_off_sound", def_saw_off_snd)
	local snd = xr_sound.get_safe_sound_object(snd_name)
	snd:play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
	
	local action_delay = snd:length() * 0.001
	
	prepair(item)
	
	local function make_saw_off()
		item:get_weapon_m():respawn_weapon(sys_ini:r_string(sect, "sawed_off"))
	
		if tool then
			local use_count = read_if_exists(sys_ini, "r_float", tool:section(), "use_count", 0)
			if use_count > 0 then
				tool:change_condition(-1/use_count)
				if tool:condition() == 0 then
					if tool:parent() then
						tool:parent():drop_item(tool)
					end				
					alife():release(alife():object(tool:id()), true)
				end
			end		
		end
		block_non_move_action(false)
	end
	
	block_non_move_action(true)
	add_time_delayed_action(action_delay, make_saw_off)	
end

function show_saw_off_wnd(obj, drop_on_obj)
	local service_msg_box = ui_message_box.MessageBoxWnd("red")
	local msg_text = string.format(
		"%s %s\\n%s %s ?", 
		game.translate_string("st_saw_off_remove"), 
		game.translate_string(get_inv_name(drop_on_obj:section())), 
		game.translate_string("st_sawed_off_take"), 
		game.translate_string(get_inv_name(sys_ini:r_string(drop_on_obj:section(), "sawed_off"))))
	service_msg_box:InitAction(msg_text, saw_off_item, obj, drop_on_obj)
end

--//script menu actions

function can_disassemble(obj)
	return can_disassemble_item(obj)
end
function disassemble(obj, cell_item)
	--disassemble_item(obj)
	local tool = get_tool_sect(obj) and actor:object(get_tool_sect(obj))
	show_disassemble_wnd(tool, obj, cell_item)
end

function can_saw_off(obj)
	return can_saw_off_item(obj)
end
function saw_off(obj)
	local tool = get_saw_off_tool_sect(obj) and actor:object(get_saw_off_tool_sect(obj))
	show_saw_off_wnd(tool, obj)
end