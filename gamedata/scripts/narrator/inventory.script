-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_first_update",   fun = this.on_first_update})
end

local LIMITED_BOLTS = read_if_exists(sys_ini, "r_bool", "features", "limited_bolts", false)

function on_first_update()
	local inv = actor.inventory
	local item
	for i = 0, sys_ini:r_u32("inventory","slots") - 1 do
		item = actor:item_in_slot(i)
		if item and not inv:is_slot_allowed(i) then
			actor:move_to_ruck(item)
			log3("! item [%s] founded in not allowed slot [%s], moving to ruck", item:section(), i)
		end
	end
end

function drop_belt_to_ruck()
	actor:iterate_belt(function(dummy, item) actor:move_to_ruck(item) end, nil)
end

function set_max_belt(item)
	actor.inventory.max_belt = item and read_if_exists(sys_ini, "r_u32", item:section(), "belt_size", 0) or read_if_exists(sys_ini, "r_u32", "inventory", "max_belt", 0)
	if level.is_removing_objects() or xr_conditions.black_screen() then
	return end	
	drop_belt_to_ruck()
end

function set_equiped_items_visibility(visible)
	--log3("set_equiped_items_visibility(%s) is called", visible)
	function perform_action(dummy, item)
		if actor:is_on_belt(item) or
			actor:is_in_slot(item)
		then
			if visible then
				set_item_inv_visible(item)
			else
				set_item_inv_hidden(item)
			end
		end
	end	
	actor:iterate_inventory(perform_action, nil)
end

function check_items_to_show(inv_owner, show_mode)
	if not inv_owner then return end
	local function check_by_mode(item, show_mode)
		if show_mode == "all" then
			return get_clsid(item) ~= clsid.obj_bolt or (LIMITED_BOLTS or inv_owner:id() == actor:id())
		elseif show_mode == "weapon" then
			return item:is_weapon() or string.find(item:section(), "wp_") or string.find(item:section(), "wpn_")
		elseif show_mode == "ammo" then
			return item:is_ammo() or item:is_grenade()
		elseif show_mode == "outfit" then
			return item:is_outfit() or item:is_helmet() or loadout.is_module(item) or item:get_container()
		elseif show_mode == "eatable" then
			return item:is_eatable_item() and not string.find(item:section(), "pda")
		elseif show_mode == "artefact" then
			return item:is_artefact()
		elseif show_mode == "device" then
			return item:is_torch() or item:get_pda() or item:get_detector() or is_power_device(item) or string.find(item:section(), "pda")
		elseif show_mode == "misc" then
			return check_by_mode(item, "all") and not (
				check_by_mode(item, "weapon") or
				check_by_mode(item, "ammo") or 
				check_by_mode(item, "outfit") or 
				check_by_mode(item, "eatable") or 
				check_by_mode(item, "artefact") or 
				check_by_mode(item, "device")
				)
		else
			log3("!check_items_to_show - try to check item %s for non-descriptet show_mode %s", item:section(), show_mode)
			return false
		end
	end
	
	function perform_action(dummy, item)
		if check_by_mode(item, show_mode) then
			set_item_inv_visible(item)
		else
			set_item_inv_hidden(item)
		end
	end	
	if inv_owner:is_actor() then
		inv_owner:iterate_ruck(perform_action, nil)
	else
		inv_owner:iterate_inventory(perform_action, nil)
	end
end

function set_item_visibility(inv_owner, show_mode)
	if not inv_owner then return end
	local item_type = ui_inv_utils.get_type
	function perform_action(dummy, item)
		if show_mode == 0 or (item_type(item) == show_mode or item_type(item) == 0) then
			set_item_inv_visible(item)
		else
			set_item_inv_hidden(item)
		end
	end
	if inv_owner:is_actor() and actor:has_info("ui_inventory") then
		inv_owner:iterate_ruck(perform_action, nil)
	else
		inv_owner:iterate_inventory(perform_action, nil)
	end	
end

function take_all(inv_owner)
	if not inv_owner then return end
	function perform_action(dummy, item)
		if LIMITED_BOLTS or get_clsid(item) ~= clsid.obj_bolt then
			inv_owner:transfer_item(item, actor)
		end
	end	
	inv_owner:iterate_inventory(perform_action, nil)
end

function move_all_ruck(inv_owner)
	if not inv_owner then return end
	function perform_action(dummy, item)
		if (LIMITED_BOLTS or get_clsid(item) ~= clsid.obj_bolt) and not loadout.can_remove(item) then
			actor:transfer_item(item, inv_owner)
		end
	end	
	actor:iterate_ruck(perform_action, nil)
end