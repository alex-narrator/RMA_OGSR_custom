function attach(sm)
	sm:subscribe({signal = "on_spawn",   			fun = this.on_spawn})
	sm:subscribe({signal = "on_update",   			fun = this.on_update})
	sm:subscribe({signal = "on_save",   			fun = this.on_save})
	sm:subscribe({signal = "on_load",   			fun = this.on_load})
end

local weather_data = {
	wfx_time = 0,
	weather_fx = nil,
	update_time = 0,
	update_level = "",
	forced_weather_change_on_time_change = false,
	last_hour = 0,
	state_string = nil,
	state={},
	graphs={},
}
local graphs_ini = ini_file_cached("environment\\dynamic_weather_graphs.ltx")

function on_spawn()
	reset()
end

function on_update()
	update()
end

function on_save()
	save_weather()
end

function on_load()
	load_weather()
end

-- Вызывается после load(). Состояние погоды уже загружено.
function reset()
	-- Загрузить кондлист с погодой.
	local level_name = level.name()
	local weather = read_if_exists(game_ini, "r_string", level_name, "weathers", "[default]")
	local postprocess = read_if_exists(game_ini, "r_string", level_name, "postprocess", nil)
	if postprocess then
		printf("LEVEL POSTPROCESS: level: [%s], postprocess: [%s]", level_name, postprocess)
		level.add_pp_effector(postprocess, 999, true)
	else
		printf("LEVEL POSTPROCESS: level: [%s], postprocess: [none]", level_name)
		level.remove_pp_effector(999)
	end
	weather_list = xr_logic.parse_condlist(actor, level_name, "weather", weather)	
    select_weather(true)
	weather_data.last_hour=level.get_time_hours()
end
function forced_weather_change()
	weather_data.forced_weather_change_on_time_change = true
end
-- Обновляем погоду раз в час.
function update()
	weather_data.weather_fx = level.is_wfx_playing() and level.get_weather() or nil
	--if not benchmark.weather then
		if weather_data.last_hour~=level.get_time_hours() then
				weather_data.last_hour=level.get_time_hours()
				for lvl,st in pairs(weather_data.state) do
				st.current_state=st.next_state
				st.next_state=get_next_state(st.graph,st.current_state)
				end
				-- Устанавливаем погоду на текущем уровне
				select_weather(false)
		end
	--end
end

function select_weather(now)
	local weather = xr_logic.pick_section_from_condlist(actor, actor, weather_list)
	local graph=get_graph_by_name(weather)
	local weather_section_name=""
	-- Проверим, совпадает ли текущий граф уровня с полученным по кондлисту...
	if graph==nil then
		-- Переходим на статику
		weather_data.state[weather]=nil
		weather_section_name=weather
	else
		-- Новая погода - динамическая. Проверим, нужно ли менять/устанавливать граф
			if weather_data.state[weather]==nil or weather_data.state[weather].graph_name~=weather then
			-- Граф изменился. Переходим на него.
			weather_data.state[weather]=init_by_graph(graph,weather)
		-- else
			-- now = false
			end
			-- Получаем название секции по текущему состоянию.
			local st=weather_data.state[weather]
			--weather_section_name="dw_"..st.current_state.."_"..st.next_state.."_"..level.get_time_hours()
			weather_section_name="default_"..st.current_state
	end
	if now then
		weather_data.last_hour=level.get_time_hours()
	end
	if weather_data.forced_weather_change_on_time_change then
		now = true
		weather_data.forced_weather_change_on_time_change = false
	end
	if not(weather_fx) then
		level.set_weather(weather_section_name,now)
	else
		--log3("~weather_fx is %s now", weather_fx)
		level.start_weather_fx_from_time(weather_fx, weather_data.wfx_time)
	end
	printf("WEATHER: '%s' now '%s'", weather_section_name, tostring(now))
	-- if xrs_news then
		-- xrs_news.news_call(1,1,nil,nil,weather_section_name,nil)
	-- end
end

-- Возвращает начальное состояние погоды.
function init_by_graph(graph,graph_name)
	local cur_state=get_next_state(graph,"")
	local next_state=get_next_state(graph,cur_state)
	return {current_state=cur_state,next_state=next_state,graph_name=graph_name,graph=graph}
end

-- Возвращает одно из следующих состояний графа, согласно прописанным вероятностям.
function get_next_state(graph,state)
	local sum=0
	for st,prob in pairs(graph) do
		--if state==st then prob=prob*2 end
		sum=sum+prob
	end
	local rnd=math.random()*sum
	local next_state
	for st,prob in pairs(graph) do
		--if state==st then prob=prob*2 end
		next_state=st
		rnd=rnd-prob
		if (rnd<=0) then
			break
		end
	end
	return next_state
end

-- Устанавливаем состояние менеджера, распарсивая строку состояния
function set_state_as_string(ss)
	weather_data.state={}
	for lvlstring in string.gmatch(ss,"[^;]+") do
		local i,j,grname,curs,nexs=string.find(lvlstring,"([^=]+)=([^,]+),([^,]+)")
		if not grname then
			abort("set_state_as_string: malformed state string. "..ss)
		end
		--local lvl_name=unpack_level(lvl)
		local current_state=unpack_state(curs)
		local next_state=unpack_state(nexs)
		local graph_name=unpack_graph_name(grname)
		local graph=get_graph_by_name(graph_name)
		if graph==nil then
		-- Старая сохранёнка? Будем считать что на этом уровне - статическая погода
		else
			weather_data.state[graph_name]={current_state=current_state,next_state=next_state,graph_name=graph_name,graph=graph}
		end
	end
end

-- Преобразуем текущее состояние менеджера в строку
function get_state_as_string()
	local lvlstrings={}
	for lvl_name,st in pairs(weather_data.state) do
		--local lvl=pack_level(lvl_name)
		local curs=pack_state(st.current_state)
		local nexs=pack_state(st.next_state)
		local grn=pack_graph_name(st.graph_name)
		table.insert(lvlstrings,grn.."="..curs..","..nexs)
	end
	return table.concat(lvlstrings,";")
end


--выпарсиваем секцию инифайла в табличку
function parse_ini_section_to_array(ini,section)
	local tmp=nil
	if ini and ini:section_exist(section) then
		tmp={}
		local result, id, value = nil, nil, nil
		for a=0,ini:line_count(section)-1 do
			result, id, value = ini:r_line(section,a,"","")
			if id~=nil and string.trim(id)~="" and string.trim(id)~=nil then
				tmp[string.trim(id)]=string.trim(value)
			end
		end
	end
	return tmp
end
-- Получить граф (таблицу переходов состояний погоды) по его названию и названию игрового уровня
function get_graph_by_name(name)
	if not weather_data.graphs[name] then
		weather_data.graphs[name] = parse_ini_section_to_array(graphs_ini,name)
	end
	return weather_data.graphs[name]
end


-- Запаковать название вершины графа
function pack_state(state)
	-- Пока паковать не будем.
	return state
end

-- Распаковать название вершины графа
function unpack_state(st)
	-- Пока паковать не будем
	return st
end

-- Запаковать название графа переходов погоды
function pack_graph_name(graph_name)
	-- Пока паковать не будем.
	return graph_name
end

-- Распаковать название графа переходов погоды
function unpack_graph_name(grn)
	-- Пока паковать не будем
	return grn
end

function load_weather()
	weather_data = xr_vars.load_var("weather_data", weather_data)
	--log3("~on load weather - weather data %s", weather_data)	
	set_state_as_string(weather_data.state_string or "")
end

function save_weather()
	weather_data.state_string = get_state_as_string()
	xr_vars.save_var("weather_data", weather_data)
	--log3("~on save weather - weather data %s", weather_data)
end