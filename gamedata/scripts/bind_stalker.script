function init    (obj)
	xr_motivator.AddToMotivator(obj)
end

function actor_init    (npc)
	npc:bind_object(actor_binder(npc))
end

local game_difficulty_by_num = {
	[0] = "gd_novice",
	[1] = "gd_stalker",
	[2] = "gd_veteran",
	[3] = "gd_master"
	}

lasthealth  = 0
lasttime	= 0
post_process = 0
local weapon_hide = false
----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init (obj) super(obj)
	_G.actor = self.object
	--
	self.sm = ogse_signals.get_mgr()
	self.sm:call("on_load_before_all")
	self.sm:call("on_init", obj)
	--
	self.bCheckStart = false
	self.weather_manager = level_weathers.WeatherManager()
	self.actor_detector = xr_detector.actor_detector()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	printf("actor net spawn")
	
	level.show_indicators()

	self.bCheckStart = true
	self.weapon_hide = false -- спрятано или нет оружие при разговоре.
	weapon_hide = false -- устанавливаем глобальный дефолтовый флаг.

	if object_binder.net_spawn(self,data) == false then
		return false
	end

	db.add_actor(self.object)
	
	if self.st.disable_input_time == nil then
		level.enable_input()
	end
	
	--на випадок якщо гравець перезавантажився
	--у той час поки діяло блокування керування,
	--наприклад від скриптових анімацій
	block_non_move_action(false)

	self.weather_manager:reset()
--	game_stats.initialize ()

	if(actor_stats.add_to_ranking~=nil)then
		actor_stats.add_to_ranking(self.object:id())
	end

	--' Загружаем настройки дропа
	death_manager.init_drop_settings()
	--weather_init.on_game_load(obj) --здається це більш не потрібно + конфліктує з реалізаціями викидів
	self.sm:call("on_spawn", data)
	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()
	if(actor_stats.remove_from_ranking~=nil)then
		actor_stats.remove_from_ranking(self.object:id())
	end
--	game_stats.shutdown ()
	db.del_actor(self.object)

    sr_light.clean_up ()

	self.object:set_callback(callback.inventory_info, nil)
	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	--self.object:set_callback(callback.actor_sleep, nil)
	self.object:set_callback(callback.task_state, nil)
	self.object:set_callback(callback.level_border_enter, nil)
	self.object:set_callback(callback.level_border_exit, nil)
	self.object:set_callback(callback.take_item_from_box, nil)
	self.object:set_callback(callback.level_changer_action, nil)
	self.object:set_callback(callback.use_object, nil)
	self.object:set_callback(callback.on_booster_enable, nil)
	self.object:set_callback(callback.on_booster_disable, nil)
	self.object:set_callback(callback.hit, nil)
	self.object:set_callback(callback.death, nil)
	self.object:set_callback(callback.on_ruck, nil)
	self.object:set_callback(callback.on_slot, nil)
	self.object:set_callback(callback.on_belt, nil)
	self.object:set_callback(callback.on_vest, nil)
	--
	self.object:set_callback(callback.on_cell_item_focus, nil)
	self.object:set_callback(callback.on_cell_item_focus_lost, nil)
	self.object:set_callback(callback.on_cell_item_mouse, nil)
	--
	self.object:set_callback(callback.on_key_press, nil)
	self.object:set_callback(callback.on_key_release, nil)
	self.object:set_callback(callback.on_key_hold, nil)
	self.object:set_callback(callback.on_mouse_wheel, nil)
	--
	self.object:set_callback(callback.map_relation_location_added, nil)
	--
	self.object:set_callback(callback.on_hud_state_switch, nil)
	self.object:set_callback(callback.on_actor_weapon_zoom_in, nil)
	self.object:set_callback(callback.on_actor_weapon_zoom_out, nil)
	self.object:set_callback(callback.on_weapon_shell_drop, nil)
	--
	self.object:set_callback(callback.update_items_effect, nil)
	--
	self.object:set_callback(callback.on_before_use_item, nil)
	self.object:set_callback(callback.on_pickup_item_showing, nil)
	
	self.object:set_callback(callback.on_group_items, nil)
	self.object:set_callback(callback.on_grenade_type_switch, nil)
	
	self.object:set_callback(callback.trade_perform_operation, nil)

	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end

	xr_sound.stop_all_sound_object()
	--
	self.sm:call("on_destroy")
	--
	object_binder.net_destroy(self)
	--
	_G.actor = false
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
	object_binder.reinit(self)
	
	local npc_id = self.object:id()

	db.storage[npc_id] = { }

	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.next_restrictors_update_time = -10000

	self.object:set_callback(callback.inventory_info, self.info_callback, self)
	self.object:set_callback(callback.article_info, self.article_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self) -- for game stats
	--self.object:set_callback(callback.actor_sleep, self.sleep_callback, self)
	self.object:set_callback(callback.task_state, self.task_callback, self)
	--self.object:set_callback(callback.map_location_added, self.map_location_added_callback, self)
	self.object:set_callback(callback.level_border_enter, self.level_border_enter, self)
	self.object:set_callback(callback.level_border_exit, self.level_border_exit, self)
	self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	self.object:set_callback(callback.level_changer_action, self.level_changer_action, self)
	self.object:set_callback(callback.use_object, self.use_object, self)
	self.object:set_callback(callback.on_booster_enable, self.on_booster_enable, self)
	self.object:set_callback(callback.on_booster_disable, self.on_booster_disable, self)
	self.object:set_callback(callback.hit, self.on_hit, self)
	self.object:set_callback(callback.death, self.on_death, self)
	self.object:set_callback(callback.on_ruck, self.on_ruck, self)
	self.object:set_callback(callback.on_slot, self.on_slot, self)
	self.object:set_callback(callback.on_belt, self.on_belt, self)
	self.object:set_callback(callback.on_vest, self.on_vest, self)
	--
	self.object:set_callback(callback.on_cell_item_focus, self.on_cell_item_focus, self)
	self.object:set_callback(callback.on_cell_item_focus_lost, self.on_cell_item_focus_lost, self)
	self.object:set_callback(callback.on_cell_item_mouse, self.on_cell_item_mouse, self)
	--
	self.object:set_callback(callback.on_key_press, self.on_key_press, self)
	self.object:set_callback(callback.on_key_release, self.on_key_release, self)
	self.object:set_callback(callback.on_key_hold, self.on_key_hold, self)
	self.object:set_callback(callback.on_mouse_wheel, self.on_mouse_wheel, self)
	--
	self.object:set_callback(callback.map_relation_location_added, self.on_map_relation_location_added, self)
	--
	self.object:set_callback(callback.on_hud_state_switch, self.on_hud_state_switch, self)
	self.object:set_callback(callback.on_actor_weapon_zoom_in, self.on_actor_weapon_zoom_in, self)
	self.object:set_callback(callback.on_actor_weapon_zoom_out, self.on_actor_weapon_zoom_out, self)
	self.object:set_callback(callback.on_weapon_shell_drop, self.on_weapon_shell_drop, self)
	--
	self.object:set_callback(callback.update_items_effect, self.update_items_effect, self)
	--
	self.object:set_callback(callback.on_before_use_item, self.on_before_use_item, self)
	self.object:set_callback(callback.on_pickup_item_showing, self.on_pickup_item_showing, self)
	
	self.object:set_callback(callback.on_group_items, self.on_group_items, self)
	self.object:set_callback(callback.on_grenade_type_switch, self.on_grenade_type_switch, self)
	
	self.object:set_callback(callback.trade_perform_operation, self.trade_perform_operation, self)
	--
	self.sm:call("on_reinit")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	-- if box:story_id() then
		-- treasure_manager.take_item_from_box(box, box:story_id())
	-- end
--[[	
	local respawner = se_respawn.get_respawner_by_parent(story_id)
	if respawner == nil then
		return
	end
	
	--' Необходимо уменьшить счетчик в респавнере
	respawner:remove_spawned(item:id())

	local smart_terrain = db.strn_by_respawn[respawner:name()]
	if smart_terrain == nil then
		return
	end

	local npc = smart_terrain.gulag:get_nearest_online_obj(db.actor:position())
    if npc ~= nil then
	    xr_sound.set_sound_play(npc, "reac_box")
	    xr_gulag.setGulagEnemy(smart_terrain:name() , db.actor)		
    end
]]
	--
	self.sm:call("on_take_from_box", box, item, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_enter(npc, info_id)
	self.actor_detector:actor_enter()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_exit(npc, info_id)
	self.actor_detector:actor_exit()
end
----------------------------------------------------------------------------------------------------------------------
local infop_signals = {
	ui_pda = "on_pda_show",
	ui_pda_hide = "on_pda_hide",
	ui_pda_actor_info = "on_pda_actor_info",
	ui_inventory = "on_inventory_show",
	ui_inventory_hide = "on_inventory_hide",
	ui_car_body = "on_carbody_show",
	ui_car_body_hide = "on_carbody_hide",
	ui_dialog = "on_dialog_show",
	ui_dialog_hide = "on_dialog_hide",
	ui_talk = "on_talk_show",
	ui_talk_hide = "on_talk_hide",
	ui_trade = "on_trade_show",
	ui_trade_hide = "on_trade_hide",
}
function actor_binder:info_callback(npc, info_id)
	--log3("*INFO*: npc='%s' id='%s'", npc:name(), info_id)
	--' Сюжет
	level_tasks.proceed(self.object)
	-- Отметки на карте
	level_tasks.process_info_portion(info_id)
	self.sm:call("on_info_portion", npc, info_id)
	local signal = infop_signals[info_id]
	if signal then
		log3("~infoportion %s received", info_id)
		self.sm:call(signal, npc, info_id)
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_trade (item, sell_bye, money)
    if sell_bye == true then
       game_stats.money_trade_update (money)
    else       
       game_stats.money_trade_update (-money) 
    end   
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:article_callback(npc, group, name, article_type, text)
	--printf("article_callback [%s][%s]", group, name)
	if device().precache_frame >1 then return end
	
	-- if group == "Diary" then
		-- news_manager.send_encyclopedy("diary", group)
	-- else
		-- news_manager.send_encyclopedy("encyclopedy", group)
	-- end
	news_manager.send_encyclopedy(article_type, group, name)
	--
	self.sm:call("on_article", npc, group, name, article_type, text)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_take (obj)
    level_tasks.proceed(self.object)
    --game_stats.update_take_item (obj, self.object)
	self.sm:call("on_take", obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_drop(obj, prev_place)
    level_tasks.proceed(self.object)
    --game_stats.update_drop_item (obj, self.object)
	self.sm:call("on_drop", obj, prev_place)
end
----------------------------------------------------------------------------------------------------------------------

function actor_binder:task_callback(_task, _objective, _state)
	task_manager.task_callback(_task:get_id(), _objective:get_idx(), _state)
	if _objective:get_idx() == 0 then
		if _state == task.fail then
			news_manager.send_task(db.actor, "fail", _task, _objective)
		elseif _state == task.completed then
			task_manager.reward_by_task(_task)
			news_manager.send_task(db.actor, "complete", _task, _objective)
		else
			news_manager.send_task(db.actor, "new", _task, _objective)
		end
	else
		if _task:get_objective(0):get_state() == task.in_progress then
			news_manager.send_task(db.actor, "update", _task, _objective)
		end
	end
	self.sm:call("on_task", _task, _objective, _state)
end

----------------------------------------------------------------------------------------------------------------------
function actor_binder:map_location_added_callback(spot_type_str, object_id)
	if (false==app_ready()) or (device().precache_frame>1) then return end
	--'news_manager.send_task(db.actor, "new")
end
----------------------------------------------------------------------------------------------------------------------
local update_was_never_called = true
	
function actor_binder:update(delta)
	if update_was_never_called then
		self.sm:call( "on_before_first_update" )
	end
	self.sm:call( "on_before_update", delta )
	
	
	object_binder.update(self, delta)
	-- DEBUG slowdown
--	slowdown.update()

	local time = time_global()
	
	game_stats.update (delta, self.object)

	-- апдейт погоды
	self.weather_manager:update()
	
	-- апдейт схемы детектора
	self.actor_detector:update()

	-- апдейт звуковой схемы актера
	xr_sound.update_actor()
	
	--' Проверка потери жизни
--[[
	if self.object.health - lasthealth > 0.001 or
	   self.object.health - lasthealth < -0.001 then
		printf("%f | %f", self.object.health, self.object.health - lasthealth, game.time() - lasttime)
		lasthealth = self.object.health
		lasttime = game.time()
	end
]]	
	-- Обновление отключения ввода с клавиатуры.
	if self.st.disable_input_time ~= nil and
	   game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle 
	then
		level.enable_input()
		self.st.disable_input_time = nil
	end
	-- Обновление сна с переносом чувака в указанную позицию
	if self.st.sleep_relocate_time ~= nil and
	   game.get_game_time():diffSec(self.st.sleep_relocate_time) >= self.st.sleep_relocate_idle 
	then
		self.object:set_actor_position(self.st.sleep_relocate_point)
		local dir = self.st.sleep_relocate_point:sub(self.st.sleep_relocate_look)
		self.object:set_actor_direction(dir:getH())
		self.st.sleep_relocate_time = nil
	end

	-- Апдейт прятание оружия игрока во время диалога
	if weapon_hide == true or self.object:is_talking() then
		if self.weapon_hide == false then
			self.object:hide_weapon()
			self.weapon_hide = true
		end
	else
		if self.weapon_hide == true then
			self.object:restore_weapon()
			self.weapon_hide = false
		end
	end	

	-- обновление рестрикторов, которые под логикой, срабатывает через интервалы времени
	if self.next_restrictors_update_time < time then
		bind_restrictor.actor_update(delta)

		self.next_restrictors_update_time = time + 200

		task_manager.actor_update()
	end

	-- обновление постпроцессов
	if post_process ~= 0 then
		if post_process:update () == true then
		   post_process = 0
		end
	end

	-- обновление пси-антенны
	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:update(delta)
	end

	--' Вывод сообщения о большой радиации
	if self.object.radiation >= 0.7 then
		local hud = get_hud()
		local custom_static = hud:GetCustomStatic("cs_radiation_danger")
		if custom_static == nil then
			hud:AddCustomStatic("cs_radiation_danger", true)
			hud:GetCustomStatic("cs_radiation_danger"):wnd():SetTextST("st_radiation_danger")
		end
	else
		local hud = get_hud()
		local custom_static = hud:GetCustomStatic("cs_radiation_danger")
		if custom_static ~= nil then
			hud:RemoveCustomStatic("cs_radiation_danger")
		end
	end
	
	--' Запускаем затычку от возможной потери содержимого тайников
	treasure_manager.get_treasure_manager():loss_workaround()


 	if self.bCheckStart then
		printf("SET DEFAULT INFOS")		

		if not has_alife_info("storyline_actor_start") and
		   (level.name() == "l01_escape")
		then
			self.object:give_info_portion("storyline_actor_start")
			_G.g_start_avi = true
			printf("*AVI* RUN START AVI")
		end

--		if not has_alife_info("encyclopedy") then
--			self.object:give_info_portion("encyclopedy")
--		end

		if not has_alife_info("global_dialogs") then
			self.object:give_info_portion("global_dialogs")
		end

		if not has_alife_info("level_changer_icons") then
			self.object:give_info_portion("level_changer_icons")
		end

		level_tasks.add_lchanger_location()

		self.bCheckStart = false		
	end	
	
	--- Лагерь новичков, Волк:
	-- Волк:
	escape_tasks.wolf_message()
	-- Лагерь прощает обиды:
	escape_tasks.esc_lager_forgive()

	if update_was_never_called then
		self.sm:call( "on_first_update" )
		update_was_never_called = false
		self.sm:delay_time_limit( 10000 )
	end
	self.sm:call( "on_update", delta )
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	
	local save_treasure_manager = true
	
	printf("actor_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	--' Сохраняем уровень сложности
	if save_treasure_manager == true then
		packet:w_u8(level.get_game_difficulty() + 128)
	else
		packet:w_u8(level.get_game_difficulty())
	end


	--' Сохраняем данные об отключенном вводе
	if self.st.disable_input_time == nil then
		packet:w_bool(false)
	else
		packer:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)
	end

	xr_logic.pstor_save_all(self.object, packet)
	self.weather_manager:save(packet)

	sr_psy_antenna.save( packet )
	
	if save_treasure_manager == true then
		treasure_manager.save(packet)      
	end                                  

	task_manager.save(packet)
	self.actor_detector:save(packet)	
	self.sm:call("on_save", packet)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:load(reader)
	printf("actor_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)
	printf("actor_binder:object_binder.load(): self.object:name()='%s'", self.object:name())

	--' Загружаем уровень сложности
	local game_difficulty = reader:r_u8()
	
	local load_treasure_manager = false      
	if game_difficulty >= 128 then           
		game_difficulty = game_difficulty - 128
		load_treasure_manager = true           
	end                                      

	
	get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])

	if reader:r_eof() then
		abort("SAVE FILE IS CORRUPT")
	end

	local stored_input_time = reader:r_u8()
	if stored_input_time == true then
		self.st.disable_input_time = utils.r_CTime(reader)
	end

	xr_logic.pstor_load_all(self.object, reader)
	self.weather_manager:load(reader)

	sr_psy_antenna.load(reader)
	
	if load_treasure_manager == true then
		treasure_manager.load(reader)      
	end                                  

	
	task_manager.load(reader)
	self.actor_detector:load(reader)	
	self.sm:call("on_load", reader)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_changer_action( obj, wnd )
	self.sm:call("on_level_changer", obj, wnd)
end

function actor_binder:use_object(obj)
	self.sm:call("on_use", obj, self.object)
--	log3("~ use object %s", obj:section())
end

function actor_binder:on_booster_enable(booster)
	self.sm:call("on_booster_enable", booster)
end

function actor_binder:on_booster_disable(booster)
	self.sm:call("on_booster_disable", booster)
end

function actor_binder:on_hit(victim, health_lost, direction, draftsman, bone_id)
	self.sm:call("on_hit", victim, health_lost, direction, draftsman, bone_id)
	--log3("on hit: victim %s health_lost %s, direction %s, draftsman %s, bone_id %s", victim:name(), health_lost, direction, draftsman:name(), bone_id)
end

function actor_binder:on_death(victim, killer)
	self.sm:call("on_death", victim, killer)
end

function actor_binder:on_ruck(obj, prev_place)
	self.sm:call("on_ruck", obj, prev_place)
end
function actor_binder:on_slot(obj, prev_place)
	self.sm:call("on_slot", obj, prev_place)
end
function actor_binder:on_belt(obj, prev_place)
	self.sm:call("on_belt", obj, prev_place)
end
function actor_binder:on_vest(obj, prev_place)
	self.sm:call("on_vest", obj, prev_place)
end

function actor_binder:on_cell_item_focus(obj)
	self.sm:call("on_cell_item_focus", obj)
end
function actor_binder:on_cell_item_focus_lost(obj)
	self.sm:call("on_cell_item_focus_lost", obj)
end
function actor_binder:on_cell_item_mouse(obj, x, y, action)
	self.sm:call("on_cell_item_mouse", obj, x, y, action)
end

function actor_binder:on_key_press(key, game_action)
	self.sm:call("on_key_press", key, game_action)
end
function actor_binder:on_key_release(key, game_action)
	self.sm:call("on_key_release", key, game_action)
end
function actor_binder:on_key_hold(key, game_action)
	self.sm:call("on_key_hold", key, game_action)
end
function actor_binder:on_mouse_wheel(direction)
	self.sm:call("on_mouse_wheel", direction)
end

function actor_binder:on_map_relation_location_added(spot, id)
	self.sm:call("on_map_relation_location_added", spot, id)
end

function actor_binder:on_hud_state_switch(item, state, old_state)
	self.sm:call("on_hud_state_switch", item, state, old_state)
end

function actor_binder:on_actor_weapon_zoom_in(weapon)
	self.sm:call("on_actor_weapon_zoom_in", weapon)
end

function actor_binder:on_actor_weapon_zoom_out(weapon)
	self.sm:call("on_actor_weapon_zoom_out", weapon)
end

function actor_binder:on_weapon_shell_drop(wpn, pos, vel)
	self.sm:call("on_weapon_shell_drop", wpn, pos, vel)
end

function actor_binder:update_items_effect(update_time)
	self.sm:call("update_items_effect", update_time)
end

function actor_binder:on_before_use_item(item)
	self.sm:call("on_before_use_item", item, self.object)
end

function actor_binder:on_pickup_item_showing(item, icon)
	self.sm:call("on_pickup_item_showing", item, icon)
end

function actor_binder:on_group_items(item1, item2)
	self.sm:call("on_group_items", item1, item2)
end

function actor_binder:on_grenade_type_switch(prev_grenade, next_grenade)
	self.sm:call("on_grenade_type_switch", prev_grenade, next_grenade)
end

function actor_binder:trade_perform_operation(trader, money_in, money_out)
	self.sm:call("trade_perform_operation", trader, money_in, money_out)
end

--старт префетча звуков
--if string.find(command_line(), "-noprefetch") == nil then
--	sound_prefetch.prefetch_sounds()
--end


-- Weapon functions
function hide_weapon()
	weapon_hide = true
end
function restore_weapon()
	weapon_hide = false
end

// this is test for section iteration
/**
local function test_section_iteration(file_name, section_name)
	printf			("file    : %s",file_name)
	printf			("section : %s",section_name)
	
	local			file = ini_file(file_name)
	local			n = file:line_count(section_name)
	printf			("lines   : %d",n)
	
	local			id, value = "", "", result
	for i=0,n-1 do
		result, id, value	= file:r_line(section_name,i,"","")
		printf		("line %d : %s = %s",i,id,value)
	end
end

test_section_iteration("system.ltx","space_restrictor")
/**/


