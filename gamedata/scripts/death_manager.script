-- -*- mode: lua; coding: windows-1251-dos -*-

--' Ключем является группировка персонажа. Значением является таблица, содержашая имена секций предметов.
local item_by_community = {}

--' Множители и минимаксы для выпадения вещей в зависимости от уровня
local mul_by_level = {}
local count_by_level = {}

--' Предметы, которые нельзя удалять (квестовые например)
local always_keep_item = {}

--//предмети що треба спавнити лише за наявності інших предметів
local dependend_items = {}

local death_ini = ini_file_cached("misc\\death_generic.ltx")

local community_list = { 
	"stalker", 
	"dolg", 
	"freedom", 
	"bandit", 
	"military", 
	"zombied", 
	"ecolog", 
	"killer", 
	"monolith", 
	"arena_enemy", 
	"stranger" 
}

function attach(sm)
	sm:subscribe({signal = "on_death",   			fun = this.on_death})
	sm:subscribe({signal = "on_npc_first_update", 	fun = this.on_npc_first_update})
	sm:subscribe({signal = "on_spawn",   			fun = this.init_drop_settings})
end

function on_npc_first_update(npc)
	if not npc:alive() then
		on_death(npc, nil)
	end
end

function on_death(victim, killer)
	if victim:is_monster() then
		spawn_monster_loot(victim, killer)
	elseif victim:is_stalker() then
		spawn_npc_loot(victim)
	end
end

local loot_to_killer = true
function spawn_monster_loot(monster, killer)
	if get_species(monster) == "arena_monstr" then
	return end
	local sect = monster:section()
	local spawn_sect = read_if_exists(sys_ini, "r_string", sect, "Spawn_Inventory_Item_Section", nil)
	if not spawn_sect then return end
	local spawn_prob = read_if_exists(sys_ini, "r_float", sect, "Spawn_Inventory_Item_Probability", 0)
	
	local prob = math.random()
	-- if prob < spawn_prob or  math.fsimilar(spawn_prob, 1) then
	-- end
	if prob > spawn_prob then return end
	local loot_owner_id = monster:id()
	if loot_to_killer then
		if killer:is_monster() or killer:is_stalker() then
			loot_owner_id = killer:id()
			--log3("~killer %s receives loot from victim %s", killer:name(), monster:name())
		end
	end
	spawn_to_owner(spawn_sect, loot_owner_id)
	--log3("~monster %s - spawn part %s with probability %s | spawn_prob %s", monster:name(), spawn_sect, prob, spawn_prob)
end

function init_drop_settings()
	for k,v in pairs(community_list) do
        --' Необходимо заполнить таблицу
        item_by_community[v] = {}
        if death_ini:section_exist(v) then
			local n = death_ini:line_count(v)
			local id, value = "", ""
			for i=0,n-1 do
				result, id, value = death_ini:r_line(v,i,"","")
				item_by_community[v][id] = tonumber(value)
			end
        end
    end

  --' Множители и минимаксы для выпадения вещей в зависимости от уровня
    local level_name = level.name()
  
	if not death_ini:section_exist(level_name) then
		level_name = "default"
	end

    local n = death_ini:line_count(level_name)
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value = death_ini:r_line(level_name,i,"","")
        mul_by_level[id] = tonumber(value)
	end        

    local item_count_section = "item_count_" .. level.get_game_difficulty()
    local n = death_ini:line_count(item_count_section)
	for i=0,n-1 do
		result, id, value = death_ini:r_line(item_count_section,i,"","")
        --' Нужно распарсить value в два значения
        local t = parse_nums(value)
		if t[1] == nil then
            abort("Error on [death_ini] declaration. Section [%s], line [%s]", item_count_section, tostring(id))
        end
        local min = t[1]
        local max = t[2]
        if max == nil then
            max = min
        end
        
        if mul_by_level[id] == nil then
            mul_by_level[id] = 0
        end

        min = tonumber(min) * mul_by_level[id]
        max = tonumber(max) * mul_by_level[id]

        count_by_level[id] = {min = min, max = max}
	end        

  --' Предметы, которые нельзя удалять (квестовые например)
    local n = death_ini:line_count("keep_items")
	for i=0,n-1 do
		result, id, value = death_ini:r_line("keep_items",i,"","")
        if value == "true" then
            always_keep_item[id] = true
        end
    end      
end

function spawn_npc_loot(npc)
	--' Спрашиваем у серверного объекта генерились ли предметы
	local se_obj = alife():object(npc:id())
	if se_obj.death_droped == true then return end
	se_obj.death_droped = true

    --' Запускаем итератор на удаление предметов
	dependend_items = {}
    npc:iterate_inventory(keep_item, npc)
	--log3("~dependend_items %s", dependend_items)

    --' Проверка на отсутствие спауна лута
    local ini = npc:spawn_ini()
	
	if string.find(npc:profile_name(), "_arena_") then
	return end	
	
	spawn_pda(npc)

    if ini and ini:section_exist("dont_spawn_loot") then
    return end

    --' Доспавниваем необходимое количество итемов:
    --' Необходимо составить список объектов которые могут быть заспавнены для персонажа

    local spawn_items = item_by_community[npc:character_community()]    
    for k,v in pairs(spawn_items) do
        --' По каждому объекту необходимо получить зависимости    
		if check_dependence(k) then
            --' По каждому объекту необходимо получить количество
            local number = math.ceil(math.random(count_by_level[k].min, count_by_level[k].max))
            --' Необходимо заспавнить нужное количество.
            create_items(npc, k, number, v)		
		end
    end
end

function fill_dependent_ammo(item, tbl)
	if not item then return end
	
	local sect = item:section()
	
	local check_line = read_if_exists(sys_ini, "r_string", sect, "ammo_class", nil)
	if check_line then
		check_line = split_string(check_line, ",")
		for k,v in pairs(check_line) do
			if not tbl[sect] then
				tbl[sect] = {}
			end
			if not tbl[sect][v] then
				tbl[sect][v] = true
			end
		end
	end
	check_line = read_if_exists(sys_ini, "r_string", sect, "magazine_class", nil)
	if check_line then
		check_line = split_string(check_line, ",")
		--//тільки перший магазин з сумісних
		local v = check_line[1]
		if not tbl[sect] then
			tbl[sect] = {}
		end
		if not tbl[sect][v] then
			tbl[sect][v] = true
		end		
		-- for k,v in pairs(check_line) do
			-- if not tbl[sect] then
				-- tbl[sect] = {}
			-- end
			-- if not tbl[sect][v] then
				-- tbl[sect][v] = true
			-- end
		-- end
	end
	local wpn = item:get_weapon()
	if wpn and wpn:is_addon_attached(addon.launcher) then
		check_line = read_if_exists(sys_ini, "r_string", sect, "grenade_class", nil)
		if check_line then
			check_line = split_string(check_line, ",")
			for k,v in pairs(check_line) do
				if not tbl[sect] then
					tbl[sect] = {}
				end
				if not tbl[sect][v] then
					tbl[sect][v] = true
				end
			end
		end		
	end
end

function check_dependence(sect)
	if not is_ammo(sect) and not is_explosive_ammo(sect) then
	return true end
	for k,v in pairs(dependend_items) do
		if v[sect] then
			return true
		end
	end
	return false
end

function random_weapon_cond()
	local WEAPON_MAX_COND = 75
	local WEAPON_RANDOM_COND_PART = 25
	local WEAPON_STABLE_COND_PART = WEAPON_MAX_COND - WEAPON_RANDOM_COND_PART

	return (math.random(WEAPON_RANDOM_COND_PART)+WEAPON_STABLE_COND_PART) * 0.01
end

--' Функция вызывается для каждого предмета, если вернет false то предмет удалится.
function keep_item(npc, item)
    local section = item:section()
	local res = 
		read_if_exists(sys_ini, "r_bool", section, "quest_item", false) or 
		read_if_exists(sys_ini, "r_bool", section, "unique_item", false) or 
		always_keep_item[section] or get_clsid(item) == clsid.obj_bolt
		
    local item_id = item:id()
    local item_in_slot = npc:item_in_slot(1)
    if item_in_slot and item_in_slot:id() == item_id then
        --item:unload_magazine()
    --' Тут надо уменьшить кондишн оружия
		item:set_condition(random_weapon_cond())
		--log3("~npc %s | weapon %s in slot 1", npc:profile_name(), item_in_slot:section())
        res = true
    end
    item_in_slot = npc:item_in_slot(2)
    if item_in_slot and item_in_slot:id() == item_id then
        --item:unload_magazine()
    --' Тут надо уменьшить кондишн оружия
		item:set_condition(random_weapon_cond())
		--log3("~npc %s | weapon %s in slot 2", npc:profile_name(), item_in_slot:section())
        res = true
    end
	
	if res then
		fill_dependent_ammo(item, dependend_items)
	else
		alife():release(alife():object(item:id()), true)
	end
end

--' Функция спавнит необходимое число предметов
function create_items(npc, section, number, rnd)
    --'printf("create %s of %s", tostring(number), tostring(section))
	local sobj
    if is_ammo(section) and not is_magazine(section) then
        if number > 0 then
			spawn_ammo_to_owner(section, npc:id(), number)
        end
    else
        for i=1,number do
      --' Проверяем вероятность появить каждый объект в отдельности
			local _random = math.random()
            if _random <=  rnd then
				--log3("~section %s, math.random %s, rnd %s", section, _random, rnd)
				if is_magazine(section) then
					local rnd_ammo_count = math.random(read_if_exists(sys_ini, "r_u32", section, "box_size", 30))
					sobj = spawn_ammo_to_owner(section, npc:id(), rnd_ammo_count)
				else
					sobj = spawn_to_owner(section, npc:id())
					if sobj:clsid() ~= clsid.artefact_s then
						alife():object(sobj.id):get_inventory_item().item_radiation_restore_speed = math.clamp(npc.radiation,0,read_if_exists(sys_ini, "r_float", sobj:section_name(), "radiation_accum_limit", 0))
						--log3("~npc %s, radiation %s, spawn item %s", npc:name(), npc.radiation, sobj:section_name())
					end
				end
			end
        end
    end    
end


LOOTABLE_PDA_SECT = "device_pda_lootable"

local gd_spawn_prob = {
	0.25, 	--//novice
	0.2, 	--//stalker
	0.15, 	--//veteran
	0.1, 	--//master
}

function random_pda_power()
	local PDA_MAX_PWR = 50
	local PDA_RANDOM_PWR_PART = 25
	local PDA_STABLE_PWR_PART = PDA_MAX_PWR - PDA_RANDOM_PWR_PART
	return (math.random(PDA_RANDOM_PWR_PART)+PDA_STABLE_PWR_PART) * 0.01
end

--//профілі персонажів для яких спавнити ПДА обов'язково (не всі мають SID)
local need_pda_by_profile = {
	--["bar_bar_night_sniper"] = true, --//снайпер у Барі
}

function npc_protected(npc)
	return need_pda_by_profile[npc:profile_name()] or storyline_data.custom_known_info[npc:story_id()]
end

function spawn_pda(npc)
	if --[[npc:story_id() == NO_STORY_ID and]] not npc_protected(npc) and math.random() > gd_spawn_prob[level.get_game_difficulty()+1] then
		--log3("~NPC %s (%s) has no story_id and has no luck to spawn PDA", npc:profile_name(), npc:name())
		for k,infoportion in pairs(npc:get_known_info()) do
			npc:disable_info_portion(infoportion)
		end
	return end
	
	local se_abstract = spawn_to_owner(LOOTABLE_PDA_SECT, npc:id())
	-- local se_obj = alife():object(se_abstract.id)
	-- se_obj.power_level = random_pda_power()
	pda.fill_owner_info(se_abstract.id)
end