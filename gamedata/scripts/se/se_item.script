local registred_items = {}

-------------------------INVENTORY ITEM-------------------------------------------------------------------------------
local zero_time = game.CTime()
class "se_item"	(cse_alife_item)
function se_item:__init (section) super (section)
	self.last_time_called = zero_time
	self.is_taken = false
end
function se_item:on_register()
	cse_alife_item.on_register( self )

	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end	
end
function se_item:on_unregister()
end
function se_item:STATE_Write (packet)
	cse_alife_item.STATE_Write (self, packet)
	utils.w_CTime(packet, self.last_time_called)
	packet:w_bool(self.is_taken)
end
function se_item:STATE_Read (packet, size)
	cse_alife_item.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end
	self.last_time_called = utils.r_CTime(packet)
	self.is_taken = packet:r_bool()
end

-------------------EATEBLE---------------------------------------------------------------------------------------------
class "se_eatable" (cse_alife_item_eatable)
function se_eatable:__init (section) super (section)
	self.last_time_called = zero_time
end
function se_eatable:on_register()
	cse_alife_item_eatable.on_register( self )
end
function se_eatable:on_unregister()
	cse_alife_item_eatable.on_unregister(self)
end
function se_eatable:STATE_Write (packet)
	cse_alife_item_eatable.STATE_Write (self, packet)
	utils.w_CTime(packet, self.last_time_called)
end
function se_eatable:STATE_Read (packet, size)
	cse_alife_item_eatable.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end
	self.last_time_called = utils.r_CTime(packet)
end

-- INVENTORY BOX ---------------------------------------------------------------------------------------------------------------------
class "se_invbox" (cse_alife_inventory_box)
function se_invbox:__init (section) super (section)
	self.is_opened = false
end
function se_invbox:STATE_Write (packet)
	cse_alife_inventory_box.STATE_Write (self, packet)
	packet:w_bool(self.is_opened)
end
function se_invbox:STATE_Read (packet, size)
	cse_alife_inventory_box.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end
	self.is_opened = packet:r_bool()
end

--' ФИзобъекты
class "se_physic" (cse_alife_object_physic)
function se_physic:__init (section) super (section)
end
function se_physic:keep_saved_data_anyway()
	return true
end


function stats()
	printf("*** SIM ITEMS STATISTIC ***")
	for k,v in pairs(registred_items) do
		printf("item = %s, num = %s", k, v)
	end
end