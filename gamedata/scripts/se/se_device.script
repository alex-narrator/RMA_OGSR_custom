local registred_items = {}

--------------TORCH-----------------------------------------------------------------------------------
class "se_torch" (cse_alife_item_torch)
function se_torch:__init (section) super (section)
	self.power_level = 1
	self.cur_power_sect = 1
	self.is_second_mode = false
	self.is_nvd_on = false
end
function se_torch:on_register()
	cse_alife_item_torch.on_register( self )

	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end	
end
function se_torch:on_unregister()
	--' Отрегистрация в таскменеджере
end
function se_torch:STATE_Write (packet)
	cse_alife_item_torch.STATE_Write (self, packet)
	packet:w_float(self.power_level)
	packet:w_u8(self.cur_power_sect)
	packet:w_bool(self.is_second_mode)
	packet:w_bool(self.is_nvd_on)
end
function se_torch:STATE_Read (packet, size)
	cse_alife_item_torch.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end	
	self.power_level = packet:r_float()
	self.cur_power_sect = packet:r_u8()
	self.is_second_mode = packet:r_bool()
	self.is_nvd_on = packet:r_bool()
end

-- PDA -------------------------------------------------------------------------------------------------------------------------------
class "se_pda" (cse_alife_item_pda)
function se_pda:__init (section) super (section)
	self.power_level = 1
	self.cur_power_sect = 1
end
function se_pda:on_register()
	cse_alife_item_pda.on_register( self )
end
function se_pda:on_unregister()
	cse_alife_item_pda.on_unregister(self)
end
function se_pda:STATE_Write (packet)
	cse_alife_item_pda.STATE_Write (self, packet)
	packet:w_float(self.power_level)
	packet:w_u8(self.cur_power_sect)
end
function se_pda:STATE_Read (packet, size)
	cse_alife_item_pda.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end	
	self.power_level = packet:r_float()
	self.cur_power_sect = packet:r_u8()
end

---DETECTOR-------------------------------------------------------------------------------------
class "se_detector" (cse_alife_item_detector)
function se_detector:__init (section) super (section)
	self.power_level = 1
	self.cur_power_sect = 1
end
function se_detector:on_register()
	cse_alife_item_detector.on_register( self )
end
function se_detector:on_unregister()
	cse_alife_item_detector.on_unregister( self )
end
function se_detector:STATE_Write (packet)
	cse_alife_item_detector.STATE_Write (self, packet)
	packet:w_float(self.power_level)
	packet:w_u8(self.cur_power_sect)
end
function se_detector:STATE_Read (packet, size)
	cse_alife_item_detector.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end	
	self.power_level = packet:r_float()
	self.cur_power_sect = packet:r_u8()
end

---CUSTOM DEVICE-------------------------------------------------------------------------------------
class "se_device" (cse_alife_item_device)
function se_device:__init (section) super (section)
	self.power_level = 1
	self.cur_power_sect = 1
	self.is_second_mode = false
end
function se_device:on_register()
	cse_alife_item_device.on_register( self )
end
function se_device:on_unregister()
	cse_alife_item_device.on_unregister( self )
end
function se_device:STATE_Write (packet)
	cse_alife_item_device.STATE_Write (self, packet)
	packet:w_float(self.power_level)
	packet:w_u8(self.cur_power_sect)
	packet:w_bool(self.is_second_mode)
end
function se_device:STATE_Read (packet, size)
	cse_alife_item_device.STATE_Read (self, packet, size)
	if packet:r_eof() then
	return end	
	self.power_level = packet:r_float()
	self.cur_power_sect = packet:r_u8()
	self.is_second_mode = packet:r_bool()
end

function stats()
	printf("*** SIM ITEMS STATISTIC ***")
	for k,v in pairs(registred_items) do
		printf("item = %s, num = %s", k, v)
	end
end