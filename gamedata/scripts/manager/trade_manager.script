-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
	sm:subscribe({signal = "on_npc_spawn",   	fun = this.update})
	sm:subscribe({signal = "on_npc_destroy",   	fun = this.clear})
	sm:subscribe({signal = "on_npc_use", 		fun = this.update})
	sm:subscribe({signal = "on_trader_spawn",   fun = this.update})
	sm:subscribe({signal = "on_trader_destroy", fun = this.clear})
	sm:subscribe({signal = "on_trader_use", 	fun = this.update})
	sm:subscribe({signal = "on_trade_show", 	fun = this.on_trade_show})
	sm:subscribe({signal = "on_trade_hide", 	fun = this.on_trade_hide})
	sm:subscribe({signal = "on_trade", 			fun = this.on_trade})
	sm:subscribe({signal = "on_trade_purchase_item_process", 	fun = this.on_trade_purchase_item_process})
	
end

local MIN_DEFICIT = read_if_exists(sys_ini, "r_float", "trade", "min_deficit_factor", 1)
local MAX_DEFICIT = read_if_exists(sys_ini, "r_float", "trade", "max_deficit_factor", 1)

local MIN_H, MAX_H = 8, 12--//межі рандомайзеру часу до оновлення асортиментів (ігрові години)
local c_time = game.CTime()
local trade_manager = {}

local DEF_TRADE_CFG = [[trade\trade_generic.ltx]]

local sold_items = nil

function on_trade_show()
	sold_items = nil
	local trade_partner = level.get_second_talker()
	if not trade_partner then
	return end
	-- local tt = trade_manager[trade_partner:id()]
	-- if not tt or tt.cfg_ltx == DEF_TRADE_CFG then
	-- return end
	sold_items = {}
end

function on_trade_hide()
	if not sold_items then
	return end
	local trade_partner = level.get_second_talker()
	local sim = alife()
	local se_item, cl_item
	for item_id,v in pairs(sold_items) do
		se_item = sim:object(item_id)
		cl_item = level.object_by_id(item_id)
		if trade_partner:is_trader() or not trade_partner:is_in_slot(cl_item) then
			log3("~release item %s after trade with %s", se_item:name(), trade_partner:name())
			sim:release(se_item, true)
		end
	end
	sold_items = nil
end

function on_trade(item, sell_bye, money)
	if not sell_bye then
	return end
	if not sold_items then
	return end
	sold_items[item:id()] = true
end

function trade_init(npc, cfg)
	----log3("TRADE INIT: [%s]", npc:name())
	
	if not cfg then
		cfg = DEF_TRADE_CFG
	end
	
	local tt = trade_manager[npc:id()]
	if not tt or tt.cfg_ltx ~= cfg then
		tt = {}
		tt.cfg_ltx = cfg
		tt.config = ini_file_cached(cfg)
		trade_manager[npc:id()] = tt
	end
	
	-- коэфициенты покупки
	local str = read_if_exists(tt.config, "r_string", "trader", "buy_condition", nil)
	if not str then
		abort("Incorrect trader settings. Cannot find buy_condition. [%s]->[%s]", npc:name(), cfg)
	end
	--log3("TRADE INIT: [%s] tt.buy_condition = %s", npc:name(), str)
	tt.buy_condition = xr_logic.parse_condlist(npc, "trade_manager", "buy_condition", str)
	
	-- коэфициенты продажи
	str = read_if_exists(tt.config, "r_string", "trader", "sell_condition", nil)
	if not str then
		abort("Incorrect trader settings. Cannot find sell_condition. [%s]->[%s]", npc:name(), cfg)
	end
	--log3("TRADE INIT: [%s] tt.sell_condition = %s", npc:name(), str)
	tt.sell_condition = xr_logic.parse_condlist(npc, "trade_manager", "sell_condition", str)
	
	-- список закупки
	str = read_if_exists(tt.config, "r_string", "trader", "buy_supplies", nil)
	if str then
		tt.buy_supplies = xr_logic.parse_condlist(npc, "trade_manager", "buy_supplies", str)
		--log3("TRADE INIT: [%s] tt.buy_supplies = %s", npc:name(), str)
	else
		tt.buy_supplies = nil
	end
	
	--//дефіцити
	tt.min_deficit = read_if_exists(tt.config, "r_float", "trader", "min_deficit_factor", MIN_DEFICIT)
	tt.max_deficit = read_if_exists(tt.config, "r_float", "trader", "max_deficit_factor", MAX_DEFICIT)
end

function update(npc)
	local tt = trade_manager[npc:id()]
	if not tt then 
		--log3("~TRADE UPDATE [%s]: skiped", npc:name())
	return end
	if not npc:alive() then
		clear(npc)
	return end
	
	--log3("~TRADE UPDATE [%s]: start", npc:name())
	
	local str = xr_logic.pick_section_from_condlist(actor, npc, tt.buy_condition)
	if tt.current_buy_condition ~= str then
		--log3("TRADE UPDATE [%s]: buy condition = %s", npc:name(), str)
		npc:buy_condition(tt.config, str)
		tt.current_buy_condition = str
	end

	str = xr_logic.pick_section_from_condlist(actor, npc, tt.sell_condition)
	if tt.current_sell_condition ~= str then
		--log3("TRADE UPDATE [%s]: sell condition = %s", npc:name(), str)
		npc:sell_condition(tt.config, str)
		tt.current_sell_condition = str
	end

	if not tt.buy_supplies then return end
	
	str = xr_logic.pick_section_from_condlist(actor, npc, tt.buy_supplies)
	if tt.current_buy_supplies ~= str or not tt.resuply_time or tt.resuply_time:diffSec(game.get_game_time()) <= 0 then
		--log3("TRADE UPDATE [%s]: buy_supplies = %s", npc:name(), str)
		tt.current_buy_supplies = str
		npc:buy_supplies(tt.config, str)		
		--tt.current_buy_supplies = str
		local resuply_hours = math.random(MIN_H, MAX_H)
		c_time:setHMS(resuply_hours, 0, 0)
		tt.resuply_time = game.get_game_time() + c_time
		--log3("TRADE UPDATE [%s]: next resuply in %s hours", npc:name(), resuply_hours)
	end
end


function save(obj, packet)
	local tt = trade_manager[obj:id()]

	--' Сохраняем присутствует ли инициализированная торговля в принципе.
	if tt then
		packet:w_bool(true)
	else
		----log3("TRADE SAVE [%s]: ignored", obj:name())
		packet:w_bool(false)
		return
	end

	packet:w_stringZ(tt.cfg_ltx)

	if tt.current_buy_condition then
		packet:w_stringZ(tt.current_buy_condition)
		--log3("TRADE SAVE [%s]: current_buy_condition = %s", obj:name(), tostring(tt.current_buy_condition))
	else
		packet:w_stringZ("")
	end

	if tt.current_sell_condition then
		packet:w_stringZ(tt.current_sell_condition)
		--log3("TRADE SAVE [%s]: current_sell_condition = %s", obj:name(), tostring(tt.current_sell_condition))
	else
		packet:w_stringZ("")
	end

	if tt.current_buy_supplies then
		packet:w_stringZ(tt.current_buy_supplies)
		--log3("TRADE SAVE [%s]: current_buy_supplies = %s", obj:name(), tostring(tt.current_buy_supplies))
	else
		packet:w_stringZ("")
	end
	
	
	local dt_size = tt.deficit and table.size(tt.deficit) or 0
	packet:w_s32(dt_size) --//update_time was here now its deficit values
	if dt_size > 0 then
		for sect,deficit in pairs(tt.deficit) do
			packet:w_stringZ(sect)
			packet:w_float(deficit)
		end
	end

	if tt.resuply_time then
		local diff = tt.resuply_time:diffSec(game.get_game_time())
		if diff < 0 then
			diff = 0
		end
		packet:w_s32(diff)
		--log3("TRADE SAVE [%s]: resuply_time diff = %s | %s hours", obj:name(), diff, diff/3600)
	else
	 	packet:w_s32(-1)
	end
end

function load(obj, packet)
	if not packet:r_bool() then
		--log3("TRADE LOAD [%s]: ignored", obj:name())
		return
	end

	local tt = {}
	trade_manager[obj:id()] = tt

	tt.cfg_ltx = packet:r_stringZ()
	--log3("TRADE LOAD [%s]: cfg_ltx = %s", obj:name(), tt.cfg_ltx)

	tt.config = ini_file_cached(tt.cfg_ltx)

	local a = packet:r_stringZ()
	if a ~= "" then
		tt.current_buy_condition = a
		obj:buy_condition(tt.config, a)
		--log3("TRADE LOAD [%s]: current_buy_condition = %s", obj:name(), tostring(a))
	end
	
	a = packet:r_stringZ()
	if a ~= "" then
		tt.current_sell_condition = a
		obj:sell_condition(tt.config, a)
		--log3("TRADE LOAD [%s]: current_sell_condition = %s", obj:name(), tostring(a))
	end

	a = packet:r_stringZ()
	if a ~= "" then
		tt.current_buy_supplies = a
		--log3("TRADE LOAD [%s]: current_buy_supplies = %s", obj:name(), tostring(a))
	end

	a = packet:r_s32()--//update_time was here now its deficit values
	if a > 0 then
		tt.deficit = {}
		for i=1, a do
			tt.deficit[packet:r_stringZ()] = packet:r_float()
		end
	end

	a = packet:r_s32()
	if a > 0 then
		c_time:setHMS(0, 0, a)
		tt.resuply_time = game.get_game_time() + c_time
		--log3("TRADE LOAD [%s]: resuply_time diff = %s | %s hours", obj:name(), a, a/3600)
	end
end

function clear(npc)
	trade_manager[npc:id()] = nil
end

function parse_purchase_list(npc)
	local tt = trade_manager[npc:id()]
	if not tt then 
		log3("~TRADE UPDATE [%s]: fill_purchase_data skiped", npc:name())
	return end
	tt.purchase_data = {}
	--//чистимо таблицю факторів дефіциту
	tt.deficit = {}
	--//
	local suppl_sect = tt.current_buy_supplies
	local n = tt.config:line_count(suppl_sect)
	local name, value = "", ""
	local tmp_tbl
	for i=0,n-1 do
		result, name, value = tt.config:r_line(suppl_sect,i,"","")
		tmp_tbl = split_string(value, ",")
		tt.purchase_data[name] = { count = tmp_tbl[1], prob = tmp_tbl[2], spawned = 0}
		--log3("~NPC %s | config %s | sect %s | name %s | value %s", npc:name(),  tt.config, suppl_sect, name, value)
	end
	--log3("~NPC %s, tt.purchase_data %s", npc:name(), tt.purchase_data)
end

function on_trade_purchase_item_process(npc, sobj)
	local tt = trade_manager[npc:id()]
	if not tt then
		log3("~TRADE UPDATE [%s]: on_trade_purchase_item_process skiped", npc:name())
	return end
	local sect = sobj:section_name()
	if not tt.purchase_data then
		parse_purchase_list(npc)
	end
	local pd = tt.purchase_data[sect]
	pd.spawned = pd.spawned + 1
	--log3("~on_trade_purchase_item_process [%s]: on_trade_purchase_item_process item %s spawned %s times", npc:name(), sect, pd.spawned)
	-- if not tt.deficit then
		-- tt.deficit = {}
	-- end
	tt.deficit[sect] = pd.count * pd.prob / pd.spawned
	--log3("~on_trade_purchase_item_process NPC %s | item %s | deficit %s", npc:name(), sect, tt.deficit[sect])
end

function get_deficit_factor(npc, sect)
	local tt = trade_manager[npc:id()]
	if not tt then
		--log3("~NPC %s - no trade_manager data", npc:name())
	return 1 end
	if tt.cfg_ltx == DEF_TRADE_CFG then
		--log3("~NPC %s - has default trade list", npc:name())
	return 1 end
	if not tt.deficit then
		--log3("~NPC %s - no deficit data", npc:name())
	return 1 end
	local res = tt.deficit[sect] and math.clamp(tt.deficit[sect], tt.min_deficit, tt.max_deficit) or 1
	--log3("~get_deficit_factor NPC %s | item %s | deficit %s", npc:name(), sect, res)
	return res
end

function get_final_price(npc, section, result, sell_bye)
	return result * get_deficit_factor(npc, section)
end