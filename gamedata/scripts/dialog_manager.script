local phrase_ini = ini_file("misc\\dialog_manager.ltx")

local intro_id = 100

--' 1-ый элемент таблицы - информация, которую будет продовать персонаж;
--' 2-ой - цена за информацию, изначально 3000 руб.;
--' с 3-го по 11-ый - возможная цена: новички, опытные, ветераны, мастера;
--' 12-ый - ранг последнего персонажа;
--' 13-ый - id-номер последнего персонажа.
local info_to_trade = {"",3000,2000,3000,4000,5000,6000,7000,8000,9000,10000,0,0}
local info_name_to_trade = {""}

phrase = {
	intro = {},
	cool_info = {},
	action_info = {},
	help_thanks = {}
	}

function gen_phrase_id_str()
	intro_id = intro_id + 1
	return tostring(intro_id)
end

--' Необходимо сформировать набор предикатов  table[string_id] = predicate()
function fill_phrase_table()
	--' Итерируемся по всем настройкам фраз
	if not phrase_ini:section_exist("list") then
		abort("There is no section [list] in dialog_manager.ltx")
	end
	local n = phrase_ini:line_count("list")
	local id, value = "",""
	local category = ""
	
	for i=0,n-1 do
		result, id, value	= phrase_ini:r_line("list",i,"","")
		
		if not phrase_ini:section_exist(id) then
			abort("There is no section [%s] in dialog_manager.ltx", id)
		end		
		--' 2. Необходимо сформировать набор предикатов  table[string_id] = predicate()
		if not phrase_ini:line_exist(id, "category") then
			abort("Dialog manager error: not categoried section [%s]", id)
		end
		category = phrase_ini:r_string(id, "category")
		local tt = {}
		tt.name = id
		if phrase_ini:line_exist(id, "community") then
			tt.community = phrase_ini:r_string(id, "community")
		end
		if phrase_ini:line_exist(id, "npc_community") then
			tt.npc_community = phrase_ini:r_string(id, "npc_community")
		end
		if phrase_ini:line_exist(id, "npc_community_not") then
			tt.npc_community_not = phrase_ini:r_string(id, "npc_community_not")
		end
		if phrase_ini:line_exist(id, "relation") then
			tt.relation = phrase_ini:r_string(id, "relation")
		end
		if phrase_ini:line_exist(id, "npc_rank") then
			tt.npc_rank = phrase_ini:r_u32(id, "npc_rank")
		end
		if phrase_ini:line_exist(id, "npc_rank_min") then
			tt.npc_rank_min = phrase_ini:r_u32(id, "npc_rank_min")
		end
		if phrase_ini:line_exist(id, "npc_rank_max") then
			tt.npc_rank_max = phrase_ini:r_u32(id, "npc_rank_max")
		end
		if phrase_ini:line_exist(id, "level") then
			tt.level = phrase_ini:r_string(id, "level")
		end
		if phrase_ini:line_exist(id, "condlist") then
			tt.condlist = xr_logic.parse_condlist(db.actor, "dialog_manager", "condlist", phrase_ini:r_string(id, "condlist"))
		end
		if phrase_ini:line_exist(id, "smart_terrain") then
			tt.smart_terrain = phrase_ini:r_string(id, "smart_terrain")
		end					
		if phrase_ini:line_exist(id, "cost") then
			tt.price = phrase_ini:r_u32(id, "cost")
		end					
		if phrase_ini:line_exist(id, "article_info") then
			tt.article_info = parse_names(phrase_ini:r_string(id, "article_info"))
		end					
		if phrase_ini:line_exist(id, "treasure") then
			tt.treasure = phrase_ini:r_string(id, "treasure")
		end					
		if phrase_ini:line_exist(id, "wounded") then
			tt.wounded = phrase_ini:r_string(id, "wounded")
		else
			tt.wounded = "false"
		end
		tt.phr_id			= gen_phrase_id_str()
		tt.phr_id2			= gen_phrase_id_str()
		phrase[category][tt.phr_id] = tt
	end
end

-- Необходимо создать стартовый диалог, с разветвлением на третьем уровне, где каждая фраза будет иметь
-- одну и ту же функцию в прекондишне
function init_intro_dialog(dlg)
	local phr = dlg:AddPhrase("","0","",-10000)
		phr = dlg:AddPhrase("","1","0",-10000)

	local k,v = 0,0
	for k,v in pairs(phrase.intro) do
		phr = dlg:AddPhrase(v.name, v.phr_id, "1", -10000)
		
		if phr then
			local phrase_script = phr:GetPhraseScript()
			phrase_script:AddPrecondition("dialog_manager.precondition_intro")
			--' Этот экшн запоминает последнюю фразу, чтобы персонаж говорил одно и то же.
			--' Для фразы просьбы о помощи его добавлять не надо.
			if v.wounded == "false" then
				phrase_script:AddAction("dialog_manager.phrase_action_intro")		
			end
		end
	end
end

-- Необходимо создать диалог актера, с разветвлением на втором уровне, где каждая фраза будет иметь
-- одну и ту же функцию в прекондишне.
function init_cool_info_dialog(dlg)
	local phr = dlg:AddPhrase("dm_general_cool_info","0","",-10000)
	
	local phr_def = dlg:AddPhrase("dm_general_cool_info_no_more","1","0",-10000)
	local phrase_script = phr_def:GetPhraseScript()
	phrase_script:AddPrecondition("dialog_manager.precondition_cool_info_no_more")

	local k,v,kk,vv = 0,0,0,0
	for k,v in pairs(phrase.cool_info) do
		phr = dlg:AddPhrase(v.name,v.phr_id,"0",-10000)
		if phr then
			local phrase_script = phr:GetPhraseScript()
			phrase_script:AddPrecondition("dialog_manager.precondition_cool_info")
			phrase_script:AddAction("dialog_manager.cool_info_treasure")
			phrase_script:AddAction("dialog_manager.phrase_action_cool_info")
			
			if v.article_info ~= nil then
				phr = dlg:AddPhrase("",v.phr_id2,v.phr_id,-10000)		
				phrase_script = phr:GetPhraseScript()
								
				for kk,vv in pairs(v.article_info) do
					phrase_script:AddGiveInfo(vv)
				end
			end
		end
	end
end

function init_action_info_dialog(dlg)
	local phr = dlg:AddPhrase("dm_general_action_info","0","",-10000)
	
	local phr_def = dlg:AddPhrase("dm_general_action_info_no_more","1","0",-10000)
	local phrase_script = phr_def:GetPhraseScript()
	phrase_script:AddPrecondition("dialog_manager.precondition_action_info_no_more")

	local k,v,kk,vv = 0,0,0,0
	for k,v in pairs(phrase.action_info) do
		phr = dlg:AddPhrase(v.name,v.phr_id,"0",-10000)
		if phr then
			local phrase_script = phr:GetPhraseScript()
			phrase_script:AddPrecondition("dialog_manager.precondition_action_info")
			phrase_script:AddAction("dialog_manager.action_info_treasure")
			phrase_script:AddAction("dialog_manager.phrase_action_action_info")
			
			if v.article_info ~= nil then
				phr = dlg:AddPhrase("",v.phr_id2,v.phr_id,-10000)		
				phrase_script = phr:GetPhraseScript()
								
				for kk,vv in pairs(v.article_info) do
					phrase_script:AddGiveInfo(vv)
				end
			end
		end
	end
end

function init_trade_info_dialog(dlg)
	
	local phr = dlg:AddPhrase("dm_general_trade_info","0","",-10000)
	
	local phr_caption = dlg:AddPhrase("dm_general_trade_info_caption","1","0",-10000)
		local phrase_script_caption = phr_caption:GetPhraseScript()
			phrase_script_caption:AddPrecondition("dialog_manager.precondition_trade_info_caption")
			phrase_script_caption:AddAction("dialog_manager.phrase_action_trade_info_caption")
			
	local phr_hasno = dlg:AddPhrase("dm_general_trade_info_hasno","2","0",-10000)
		local phrase_script_hasno = phr_hasno:GetPhraseScript()
			phrase_script_hasno:AddPrecondition("dialog_manager.precondition_trade_info_hasno")
			
	local phr_nothing = dlg:AddPhrase("dm_general_trade_info_nothing","3","1",-10000)
			
	local phr_take = dlg:AddPhrase("dm_general_trade_info_take","4","1",-10000)
		local phrase_script_take = phr_take:GetPhraseScript()
			phrase_script_take:AddPrecondition("dialog_manager.precondition_trade_info_take")
			phrase_script_take:AddAction("dialog_manager.phrase_action_trade_info_take")
end

-- Диалоги помощи раненным
function init_help_wounded_medkit_dialog(dlg)
	local phr = dlg:AddPhrase("dm_general_help_medkit","0","",-10000)
	local phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("dialogs.transfer_medkit")
	
	local k,v = 0,0
	for k,v in pairs(phrase.help_thanks) do
		phr = dlg:AddPhrase(v.name,v.phr_id,"0",-10000)		
		if phr then
			phrase_script = phr:GetPhraseScript()
			phrase_script:AddPrecondition("dialog_manager.precondition_help_thanks")
		end
	end
end

local call_count, max_count = 0,0
local tmp_tbl = {}
local show_tbl = {}

selected_phrase_by_id = {
	intro = {},
	cool_info = {},
	action_info = {}
}

function phrase_action_intro(npc, actor, p1, p2)
	phrase_action(npc, actor, selected_phrase_by_id.intro, p2)
end
function phrase_action_cool_info(npc, actor, p1, p2)
	phrase_action(npc, actor, selected_phrase_by_id.cool_info, p2, true)
end
function cool_info_treasure(npc, actor, p1, p2)
	for k,v in pairs(phrase.cool_info) do
		if v.phr_id == p2 then
			if v.treasure == nil then
				return
			end
			treasure_manager.get_treasure_manager():give_treasure(v.treasure)
		end
	end
end
function phrase_action_action_info(npc, actor, p1, p2)
	phrase_action(npc, actor, selected_phrase_by_id.action_info, p2, true)
end
function action_info_treasure(npc, actor, p1, p2)
	for k,v in pairs(phrase.action_info) do
		if v.phr_id == p2 then
			if v.treasure == nil then
				return
			end
			treasure_manager.get_treasure_manager():give_treasure(v.treasure)
		end
	end
end
function phrase_action_trade_info_caption(npc, actor, p1, p2)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_deficit")
	local all_npc_info = {	"encyclopedy_zone_artifact_af-medusa",
					"encyclopedy_zone_artifact_af-cristall-flower",
					"encyclopedy_zone_artifact_af-night-star",
					"encyclopedy_zone_artifact_af-vyvert",
					"encyclopedy_zone_artifact_af-gravi",
					"encyclopedy_zone_artifact_af-gold-fish",
					"encyclopedy_zone_artifact_af-blood",
					"encyclopedy_zone_artifact_af-mincer-meat",
					"encyclopedy_zone_artifact_af-soul",
					"encyclopedy_zone_artifact_af-drops",
					"encyclopedy_zone_artifact_af-fireball",
					"encyclopedy_zone_artifact_af-cristall",
					"encyclopedy_zone_artifact_af-electra-sparkler",
					"encyclopedy_zone_artifact_af-electra-flash",
					"encyclopedy_zone_artifact_af-electra-moonlight",
					"encyclopedy_zone_artifact_af-rusty-thorn",
					"encyclopedy_zone_artifact_af-rusty-kristall",
					"encyclopedy_zone_artifact_af-rusty-sea-urchin",
					"encyclopedy_zone_artifact_af-fuzz-kolobok",
					"encyclopedy_zone_artifact_af-ameba-slime",
					"encyclopedy_zone_artifact_af-ameba-slug",
					"encyclopedy_zone_artifact_af-ameba-mica",
					"encyclopedy_zone_artifact_af-dummy-glassbeads",
					"encyclopedy_zone_artifact_af-dummy-pellicle",
					"encyclopedy_zone_artifact_af-dummy-battery",
					"encyclopedy_zone_artifact_af-dummy-dummy",
					"encyclopedy_zone_artifact_af-dummy-spring",
					"encyclopedy_zone_zone-story_story-2006",
					"encyclopedy_zone_zone-story_story-2008",
					"encyclopedy_zone_zone-story_story-2010",
					"encyclopedy_zone_zone-story_story-raid",
					"encyclopedy_zone_anomalies_bald",
					"encyclopedy_zone_anomalies_gravi",
					"encyclopedy_zone_anomalies_meat",
					"encyclopedy_zone_anomalies_zharka",
					"encyclopedy_zone_anomalies_electra",
					"encyclopedy_zone_anomalies_fuzz",
					"encyclopedy_zone_anomalies_radioactive",
					"encyclopedy_zone_anomalies_ameba",
					"encyclopedy_zone_locations_escape",
					"encyclopedy_zone_locations_garbage",
					"encyclopedy_zone_locations_agroprom",
					"encyclopedy_zone_locations_darkdolina",
					"encyclopedy_zone_locations_bar",
					"encyclopedy_zone_locations_rostok",
					"encyclopedy_zone_locations_yantar",
					"encyclopedy_zone_locations_military-loc",
					"encyclopedy_zone_locations_radar",
					"encyclopedy_zone_locations_pripiat",
					"encyclopedy_zone_locations_stancia",
					"encyclopedy_mutant_crow_general",
					"encyclopedy_mutant_rat_general",
					"encyclopedy_mutant_flesh_general",
					"encyclopedy_mutant_blind_general",
					"encyclopedy_mutant_tushkano",
					"encyclopedy_mutant_boar_general",
					"encyclopedy_mutant_pseudodog_general",
					"encyclopedy_mutant_bloodsucker_general",
					"encyclopedy_mutant_burer_general",
					"encyclopedy_mutant_pseudogiant_general",
					"encyclopedy_mutant_poltergeist_general",
					"encyclopedy_mutant_controller_general",
					"encyclopedy_mutant_snork_general",
					"encyclopedy_mutant_zombie_general",
					"encyclopedy_mutant_chimera_general",
					"encyclopedy_mutant_fracture_general",
					"encyclopedy_mutant_cat_general",
					"encyclopedy_vehicles_niva",
					"encyclopedy_vehicles_btr-70",
					"encyclopedy_vehicles_mi-24",
					"encyclopedy_vehicles_kamaz",
					"encyclopedy_vehicles_uaz",
					"encyclopedy_vehicles_zaporozh",
					"encyclopedy_social_military_army",
					"encyclopedy_social_military_milstalkers",
					"encyclopedy_social_scientists_mobile-labs",
					"encyclopedy_social_stalker-clans_duty",
					"encyclopedy_social_stalker-clans_freedom",
					"encyclopedy_social_stalker-clans_monolith",
					"encyclopedy_social_stalker-clans_zomstalkers",
					"encyclopedy_social_stalker-clans_bandits",
					"encyclopedy_social_stalker-clans_killers",
					"encyclopedy_social_stalker-clans_loners",
					"stalker_story_1",
					"stalker_story_2",
					"stalker_story_3",
					"stalker_story_4",
					"stalker_story_5",
					"stalker_story_6",
					"stalker_story_7",
					"stalker_story_8",
					"stalker_story_9",
					"stalker_story_10",
					"stalker_story_11",
					"stalker_story_12",
					"stalker_story_13",
					"stalker_story_14",
					"stalker_story_15",
					"stalker_story_16",
					"stalker_story_17",
					"stalker_story_18",
					"stalker_story_19",
					"stalker_story_20"}
					
	local info_name = {	"af-medusa",
					"af-cristall-flower",
					"af-night-star",
					"af-vyvert",
					"af-gravi",
					"af-gold-fish",
					"af-blood",
					"af-mincer-meat",
					"af-soul",
					"af-drops",
					"af-fireball",
					"af-cristall",
					"af-electra-sparkler",
					"af-electra-flash",
					"af-electra-moonlight",
					"af-rusty-thorn",
					"af-rusty-kristall",
					"af-rusty-sea-urchin",
					"af-fuzz-kolobok",
					"af-ameba-slime",
					"af-ameba-slug",
					"af-ameba-mica",
					"af-dummy-glassbeads",
					"af-dummy-pellicle",
					"af-dummy-battery",
					"af-dummy-dummy",
					"af-dummy-spring",
					"Story-2006",
					"Story-2008",
					"Story-2010",
					"Story-raid",
					"Bald",
					"Gravi",
					"Meat",
					"Zharka",
					"Electra",
					"Fuzz",
					"Radioactive",
					"Ameba",
					"Escape",
					"Garbage",
					"Agroprom",
					"Darkdolina",
					"Bar",
					"Rostok",
					"Yantar",
					"Military-loc",
					"Radar",
					"Pripiat",
					"Stancia",
					"Crow",
					"Rat",
					"Flesh",
					"Blind",
					"Tushkano",
					"Boar",
					"Pseudodog",
					"Bloodsucker",
					"Burer",
					"Pseudogiant",
					"Poltergeist",
					"Controller",
					"Snork",
					"Zombie",
					"Chimera",
					"Fracture",
					"Cat",
					"Niva",
					"btr-70",
					"mi-24",
					"Kamaz",
					"Uaz",
					"Zaporozh",
					"Army",
					"Milstalkers",
					"Mobile-labs",
					"Duty",
					"Freedom",
					"Monolith",
					"Zomstalkers",
					"Bandits",
					"Killers",
					"Loners",
					"stalker_story_1_name",
					"stalker_story_2_name",
					"stalker_story_3_name",
					"stalker_story_4_name",
					"stalker_story_5_name",
					"stalker_story_6_name",
					"stalker_story_7_name",
					"stalker_story_8_name",
					"stalker_story_9_name",
					"stalker_story_10_name",
					"stalker_story_11_name",
					"stalker_story_12_name",
					"stalker_story_13_name",
					"stalker_story_14_name",
					"stalker_story_15_name",
					"stalker_story_16_name",
					"stalker_story_17_name",
					"stalker_story_18_name",
					"stalker_story_19_name",
					"stalker_story_20_name"}
					
	for i = 1, #all_npc_info, 1 do
		if npc:has_info(all_npc_info[i]) and db.actor:dont_has_info(all_npc_info[i]) then
			info_to_trade[1] = all_npc_info[i]
			info_name_to_trade[1] = info_name[i]
			local rank = npc:character_rank()
			local npc_id = npc:id()
			if rank ~= info_to_trade[12] and npc_id ~= info_to_trade[13] then
				if rank < 300 then
					info_to_trade[2] = info_to_trade[math.random(3,5)]
				elseif rank >= 300 and rank < 600 then
					info_to_trade[2] = info_to_trade[math.random(5,7)]
				elseif rank >= 600 and rank < 900 then
					info_to_trade[2] = info_to_trade[math.random(7,9)]
				elseif rank >= 900 then
					info_to_trade[2] = info_to_trade[math.random(9,11)]
				end
				info_to_trade[12] = rank
				info_to_trade[13] = npc_id
			end
			break
		end
	end
	if info_to_trade[1] ~= nil then
		db.actor:give_talk_message(game.translate_string(info_name_to_trade[1]), task_texture, task_rect, "iconed_trade_info")
	end
	if info_to_trade[2] ~= nil then
		db.actor:give_talk_message(game.translate_string("dm_general_trade_info_cost").." "..game.translate_string(info_to_trade[2]).." "..game.translate_string("dm_general_trade_info_rub"), task_texture, task_rect, "iconed_trade_info")
	else
		db.actor:give_talk_message(game.translate_string("dm_general_trade_info_cost").." 3000 "..game.translate_string("dm_general_trade_info_rub"), task_texture, task_rect, "iconed_trade_info")
	end
end
function phrase_action_trade_info_take(npc, actor, p1, p2)
	local cost = 3000
	if info_to_trade[2] ~= nil then
		cost = info_to_trade[2]
	end
	db.actor:give_info_portion(info_to_trade[1])
	dialogs.relocate_money(actor, cost, "out")
end

function phrase_action(npc, actor, sel_tbl, p2, one_time)
	local cc = 0
	if one_time == true then
		if sel_tbl[npc:id()] ~= nil then
			cc = sel_tbl[npc:id()].count + 1	
		else
			cc = 1
		end
	end

	sel_tbl[npc:id()] = {phrase = p2, count = cc}
end


function precondition_intro(npc, actor, p1, p2, p3)
	return precondition(npc, actor, phrase.intro, selected_phrase_by_id.intro, p1, p2, p3)
end
function precondition_cool_info(npc, actor, p1, p2, p3)
	return precondition(npc, actor, phrase.cool_info, selected_phrase_by_id.cool_info, p1, p2, p3)
end
function precondition_action_info(npc, actor, p1, p2, p3)
	return precondition(npc, actor, phrase.action_info, selected_phrase_by_id.action_info, p1, p2, p3)
end
function precondition_cool_info_no_more(npc, actor, p1, p2, p3)
	if selected_phrase_by_id.cool_info == nil or selected_phrase_by_id.cool_info[npc:id()] == nil then
		return false
	end
	if selected_phrase_by_id.cool_info[npc:id()].count >= 1 then
		return true
	end 
	return false
end
function precondition_action_info_no_more(npc, actor, p1, p2, p3)
	if selected_phrase_by_id.action_info == nil or selected_phrase_by_id.action_info[npc:id()] == nil then
		return false
	end
	if selected_phrase_by_id.action_info[npc:id()].count >= 1 then
		return true
	end 
	return false
end
function precondition_trade_info_caption(npc, actor, p1, p2, p3)
	local all_npc_info = {	"encyclopedy_zone_artifact_af-medusa",
					"encyclopedy_zone_artifact_af-cristall-flower",
					"encyclopedy_zone_artifact_af-night-star",
					"encyclopedy_zone_artifact_af-vyvert",
					"encyclopedy_zone_artifact_af-gravi",
					"encyclopedy_zone_artifact_af-gold-fish",
					"encyclopedy_zone_artifact_af-blood",
					"encyclopedy_zone_artifact_af-mincer-meat",
					"encyclopedy_zone_artifact_af-soul",
					"encyclopedy_zone_artifact_af-drops",
					"encyclopedy_zone_artifact_af-fireball",
					"encyclopedy_zone_artifact_af-cristall",
					"encyclopedy_zone_artifact_af-electra-sparkler",
					"encyclopedy_zone_artifact_af-electra-flash",
					"encyclopedy_zone_artifact_af-electra-moonlight",
					"encyclopedy_zone_artifact_af-rusty-thorn",
					"encyclopedy_zone_artifact_af-rusty-kristall",
					"encyclopedy_zone_artifact_af-rusty-sea-urchin",
					"encyclopedy_zone_artifact_af-fuzz-kolobok",
					"encyclopedy_zone_artifact_af-ameba-slime",
					"encyclopedy_zone_artifact_af-ameba-slug",
					"encyclopedy_zone_artifact_af-ameba-mica",
					"encyclopedy_zone_artifact_af-dummy-glassbeads",
					"encyclopedy_zone_artifact_af-dummy-pellicle",
					"encyclopedy_zone_artifact_af-dummy-battery",
					"encyclopedy_zone_artifact_af-dummy-dummy",
					"encyclopedy_zone_artifact_af-dummy-spring",
					"encyclopedy_zone_zone-story_story-2006",
					"encyclopedy_zone_zone-story_story-2008",
					"encyclopedy_zone_zone-story_story-2010",
					"encyclopedy_zone_zone-story_story-raid",
					"encyclopedy_zone_anomalies_bald",
					"encyclopedy_zone_anomalies_gravi",
					"encyclopedy_zone_anomalies_meat",
					"encyclopedy_zone_anomalies_zharka",
					"encyclopedy_zone_anomalies_electra",
					"encyclopedy_zone_anomalies_fuzz",
					"encyclopedy_zone_anomalies_radioactive",
					"encyclopedy_zone_anomalies_ameba",
					"encyclopedy_zone_locations_escape",
					"encyclopedy_zone_locations_garbage",
					"encyclopedy_zone_locations_agroprom",
					"encyclopedy_zone_locations_darkdolina",
					"encyclopedy_zone_locations_bar",
					"encyclopedy_zone_locations_rostok",
					"encyclopedy_zone_locations_yantar",
					"encyclopedy_zone_locations_military-loc",
					"encyclopedy_zone_locations_radar",
					"encyclopedy_zone_locations_pripiat",
					"encyclopedy_zone_locations_stancia",
					"encyclopedy_mutant_crow_general",
					"encyclopedy_mutant_rat_general",
					"encyclopedy_mutant_flesh_general",
					"encyclopedy_mutant_blind_general",
					"encyclopedy_mutant_tushkano",
					"encyclopedy_mutant_boar_general",
					"encyclopedy_mutant_pseudodog_general",
					"encyclopedy_mutant_bloodsucker_general",
					"encyclopedy_mutant_burer_general",
					"encyclopedy_mutant_pseudogiant_general",
					"encyclopedy_mutant_poltergeist_general",
					"encyclopedy_mutant_controller_general",
					"encyclopedy_mutant_snork_general",
					"encyclopedy_mutant_zombie_general",
					"encyclopedy_mutant_chimera_general",
					"encyclopedy_mutant_fracture_general",
					"encyclopedy_mutant_cat_general",
					"encyclopedy_vehicles_niva",
					"encyclopedy_vehicles_btr-70",
					"encyclopedy_vehicles_mi-24",
					"encyclopedy_vehicles_kamaz",
					"encyclopedy_vehicles_uaz",
					"encyclopedy_vehicles_zaporozh",
					"encyclopedy_social_military_army",
					"encyclopedy_social_military_milstalkers",
					"encyclopedy_social_scientists_mobile-labs",
					"encyclopedy_social_stalker-clans_duty",
					"encyclopedy_social_stalker-clans_freedom",
					"encyclopedy_social_stalker-clans_monolith",
					"encyclopedy_social_stalker-clans_zomstalkers",
					"encyclopedy_social_stalker-clans_bandits",
					"encyclopedy_social_stalker-clans_killers",
					"encyclopedy_social_stalker-clans_loners",
					"stalker_story_1",
					"stalker_story_2",
					"stalker_story_3",
					"stalker_story_4",
					"stalker_story_5",
					"stalker_story_6",
					"stalker_story_7",
					"stalker_story_8",
					"stalker_story_9",
					"stalker_story_10",
					"stalker_story_11",
					"stalker_story_12",
					"stalker_story_13",
					"stalker_story_14",
					"stalker_story_15",
					"stalker_story_16",
					"stalker_story_17",
					"stalker_story_18",
					"stalker_story_19",
					"stalker_story_20"}
					
	for i = 1, #all_npc_info, 1 do
		if npc:has_info(all_npc_info[i]) and db.actor:dont_has_info(all_npc_info[i]) then
			return true
		end
	end
	return false
end
function precondition_trade_info_hasno(npc, actor, p1, p2, p3)
	return not this.precondition_trade_info_caption(npc, actor, p1, p2, p3)
end
function precondition_trade_info_take(npc, actor, p1, p2, p3)
	local cost = 3000
	if info_to_trade[2] ~= nil then
		cost = info_to_trade[2]
	end
	return db.actor:money() >= cost
end

function precondition_help_thanks(npc, actor, p1, p2, p3)
	return precondition(npc, actor, phrase.help_thanks, nil, p1, p2, p3)
end

function get_t_size(t)

	local counter = 0
	for i,v in pairs(t) do
		counter = counter+1
	end

	return counter
end

function draw_t_keys(t)
	for i,v in pairs(t) do
		printf("key [%s]", tostring(i))
	end
end

function precondition(npc, actor, tbl, sel_tbl, p1, p2, p3)

	--' Надо проверить доступна ли запомненная фраза
	if ( (sel_tbl ~= nil) and (sel_tbl[npc:id()] ~= nil) ) then
		
		local lll = sel_tbl[npc:id()]
		if (lll==nil) then
			printf("lll is nil")
		end
		local ttt = tbl[lll.phrase]

		if (ttt==nil) then
			printf("!!! %s", lll.phrase)
			print_table(tbl)
			local a = lll.phrase + 1
--[[		
		
			printf("%d", get_t_size(tbl))
			printf("%d", get_t_size(sel_tbl))
			printf("needed phrase=[%s]",lll.phrase)
			printf("----")
			draw_t_keys(sel_tbl)
			printf("----")
			printf("%d", get_t_size(phrase))
			printf("%d", get_t_size(phrase.intro))
			printf("%d", get_t_size(phrase.cool_info))
			printf("%d", get_t_size(phrase.help_thanks))
]]			
		end
		
		local value, number = calculate_predicate(npc, ttt )
		--' Если запомненная фраза недоступна - необходимо забыть ее
		if value == false then
			printf("*** restore memory phrase")
			sel_tbl[npc:id()] = nil
		end
	end	

	--' Получить фразу по номеру:
	local phrase = tbl[p3]


	--' Проверка на повторяемость фраз.
	if ( (sel_tbl ~= nil) and (sel_tbl[npc:id()] ~= nil) ) then
		--' Если проверяется не запомненная фраза
		if (sel_tbl[npc:id()].phrase ~= phrase.phr_id) then
			printf("*** not memory phrase [%s] ~= [%s]", sel_tbl[npc:id()].phrase, phrase.phr_id)
			return false
		end
		if (sel_tbl[npc:id()].count >= 1) then
			return false
		end
	end	

	--' Определяем доступна ли эта фраза:
	local value, number = calculate_predicate(npc, phrase)
	return value
end

function calculate_predicate(npc, tbl, settings)
	local property_num = 0
	local k,v = 0,0
	if tbl.community ~= nil then
		if tbl.community ~= db.actor:character_community() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.npc_community ~= nil then
		if tbl.npc_community ~= npc:character_community() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.npc_community_not ~= nil then
		if tbl.npc_community_not == npc:character_community() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.relation ~= nil then
		if (tbl.relation == "friend" and npc:relation(db.actor) ~= game_object.friend) or
		   (tbl.relation == "neutral" and npc:relation(db.actor) ~= game_object.neutral) or
		   (tbl.relation == "enemy" and npc:relation(db.actor) ~= game_object.enemy)
		then 
			return false,0 
		end
		property_num = property_num + 1		
	end
	if tbl.npc_rank ~= nil then
		if tbl.npc_rank > npc:character_rank() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.npc_rank_min ~= nil then
		if tbl.npc_rank_min > npc:character_rank() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.npc_rank_max ~= nil then
		if tbl.npc_rank_max < npc:character_rank() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.level ~= nil then
		if tbl.level ~= level.name() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.condlist ~= nil then
		if xr_logic.pick_section_from_condlist(db.actor, db.actor, tbl.condlist) ~= "true" then return false,0 end
		property_num = property_num + table.getn(tbl.condlist.infop_check)
	end
	if tbl.smart_terrain ~= nil then
		if tbl.smart_terrain ~= xr_gulag.isUnderFraction(npc) then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.wounded ~= nil then
		if tbl.wounded == "true" and not
		   (xr_wounded.is_wounded(npc) or
		    xr_wounded.is_heavy_wounded_by_id(npc:id()) or
		    xr_wounded.is_psy_wounded_by_id(npc:id()))
		then
			return false,0
		end
		if tbl.wounded == "false" and
		   (xr_wounded.is_wounded(npc) or
		    xr_wounded.is_heavy_wounded_by_id(npc:id()) or
		    xr_wounded.is_psy_wounded_by_id(npc:id()))
		then
			return false,0
		end
		property_num = property_num + 1		
	end
	if tbl.price ~= nil then
		if (db.actor:money() < tbl.price) and
		   (settings == nil or settings.no_price ~= true) 
		then
			return false,0 
		end
		
		if tbl.article_info ~= nil then
			for k,v in pairs(tbl.article_info) do
				if has_alife_info(v) then
					return false,0
				end
			end				
		end
	end
	
	return true, property_num
end

		
--' Прекондишн, можно ли разрешать диалоги с болтовней ("расскажи мне о" например)
function precondition_info_global(actor, npc)
	if xr_wounded.is_wounded(npc) or
	   xr_wounded.is_heavy_wounded_by_id(npc:id()) or
	   xr_wounded.is_psy_wounded_by_id(npc:id())
	then
		return false
	end
	return true
end

	
--' Сохранение информации о выбранных фразах
function save(npc, p)
	if selected_phrase_by_id.intro[npc:id()] == nil then
		p:w_stringZ("-1")
	else
		p:w_stringZ(selected_phrase_by_id.intro[npc:id()].phrase)
	end
	if selected_phrase_by_id.cool_info[npc:id()] == nil then
		p:w_stringZ("-1")
	else
		p:w_stringZ(selected_phrase_by_id.cool_info[npc:id()].phrase)
	end
	if selected_phrase_by_id.action_info[npc:id()] == nil then
		p:w_stringZ("-1")
	else
		p:w_stringZ(selected_phrase_by_id.action_info[npc:id()].phrase)
	end
end
function load(npc, reader, ver)
	if selected_phrase_by_id == nil then
		selected_phrase_by_id = {
			intro = {},
			cool_info = {},
			action_info = {}
		}
	end
	
	
	local flag = nil
	if ver >= 7 then
		flag = reader:r_stringZ()
	else
		flag = tostring(reader:r_s16())
	end
	
	if flag ~= "-1" then
		selected_phrase_by_id.intro[npc:id()] = {phrase = flag, count = 0}
	else
		selected_phrase_by_id.intro[npc:id()] = nil
	end

	if ver >= 7 then
		flag = reader:r_stringZ()
	else
		flag = tostring(reader:r_s16())
	end
	if flag ~= "-1" then
		selected_phrase_by_id.cool_info[npc:id()] = {phrase = flag, count = 0}
	else
		selected_phrase_by_id.cool_info[npc:id()] = nil
	end
	
	if ver >= 7 then
		flag = reader:r_stringZ()
	else
		flag = tostring(reader:r_s16())
	end
	if flag ~= "-1" then
		selected_phrase_by_id.action_info[npc:id()] = {phrase = flag, count = 0}
	else
		selected_phrase_by_id.action_info[npc:id()] = nil
	end
	
end