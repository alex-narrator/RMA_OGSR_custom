local level_scripts = {
	escape_tasks,
	garbage_tasks,
	agroprom_tasks,
	darkvalley_tasks,
	bar_rostok_tasks,
    yantar_tasks,
    mil_tasks,
	deadcity_tasks,
	radar_tasks,
	pripyat_tasks,
	warlab_tasks
}


local jump_level_by_name = {
	l01_escape				= "l02_garbage",
	l02_garbage				= "l03_agroprom",
	l03_agroprom			= "l03u_agr_underground",
	l03u_agr_underground	= "l04_darkvalley",
	l04_darkvalley			= "l04u_labx18",
	l04u_labx18				= "k01_darkscape",
	k01_darkscape			= "l05_bar",
	l05_bar					= "l06_rostok",
	l06_rostok				= "l07_military",
	l07_military			= "l09_deadcity",
	l09_deadcity			= "l08_yantar",
	l08_yantar				= "l08u_brainlab",
	l08u_brainlab			= "l14_swamp",
	l14_swamp				= "l10_radar",
	l10_radar				= "l10u_bunker",
	l10u_bunker				= "l10u_secret_lab",
	l10u_secret_lab			= "l11_pripyat",
	l11_pripyat				= "l12_stancia",
	l12_stancia				= "l12u_sarcofag",
	l12u_sarcofag			= "l12u_control_monolith",
	l12u_control_monolith	= "l12_stancia_2",
	l12_stancia_2			= "l13_generators",
	l13_generators			= "l13u_warlab",
	l13u_warlab				= "l01_escape"
}

function proceed()
	if db.actor == nil then
		return
	end
	for k, v in pairs( level_scripts ) do
		v.proceed()
	end

	if db.actor:has_info("autojump_enabled") then
		local jname = jump_level_by_name[level.name()]
		if jname ~= nil then
			get_console():execute("flush")
			get_console():execute("jump_to_level "..jname)
		end
	end
end

function autojump()
	db.actor:give_info_portion("autojump_enabled")
end

function process_info_portion(info_id)
	if db.actor == nil then
		return
	end
	for k, v in pairs( level_scripts ) do
		if v.process_info_portion(info_id) then
			return
		end
	end
end

function add_location(sid, location, hint, news)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		
		if obj then
			if hint then
				level.map_add_object_spot(obj.id, location, hint)
			else
				level.map_add_object_spot(obj.id, location, "")
			end
			
			if news then
				news_manager.custom_news("st_map_location_added", news, "ui_new_map_location")
			end
		end
	end
end

function remove_location(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) then
			level.map_remove_object_spot(obj.id, location)
		end
	end
end

function remove_location_safe(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj then
		   for a = 1, level.map_has_object_spot(obj.id, location), 1 do
			   level.map_remove_object_spot(obj.id, location)
		   end	
		end
	end
end

function is_map_spot_present(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) ~= 0 then
		   return true
		end
	end
	return false
end
  

function add_lchanger_location()
	local sim = alife()
	if sim then
		-- escape
		local obj = sim:story_object(story_ids.esc_exit_to_garbage_01)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_up", "to_garbage")
		end

		-- garbage
		obj = sim:story_object(story_ids.gar_exit_to_agroprom_01)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left", "to_agroprom")
		end
		obj = sim:story_object(story_ids.gar_exit_to_agroprom_02)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left", "to_agroprom")
		end
		obj = sim:story_object(story_ids.gar_exir_to_escape)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_down", "to_escape")
		end
		obj = sim:story_object(story_ids.gar_exit_to_bar)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_up", "to_bar")
		end
		obj = sim:story_object(story_ids.gar_exit_to_darkvalley_low)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_right", "to_darkvalley")
		end
		obj = sim:story_object(story_ids.gar_exit_to_darkvalley_high)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_right", "to_darkvalley")
		end
		
		-- agroprom
		obj = sim:story_object(story_ids.agr_exit_to_garbage_01)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_up_right", "to_garbage")
		end
		obj = sim:story_object(story_ids.agr_exit_to_garbage_02)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_up_right", "to_garbage")
		end

		-- darkvalley
		obj = sim:story_object(story_ids.val_lvl_changer1)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left", "to_garbage")
		end
		obj = sim:story_object(story_ids.val_lvl_changer2)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left", "to_garbage")
		end
		obj = sim:story_object(story_ids.val_lvl_changer3)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_down", "to_darkscape")
		end

		-- rostok
		obj = sim:story_object(story_ids.rostok_exit_to_yantar)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_down_left", "to_yantar")
		end
		
		-- bar
		obj = sim:story_object(story_ids.bar_exit_to_military)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_up", "to_military")
		end
		obj = sim:story_object(story_ids.bar_exit_to_garbage)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_right_down", "to_garbage")
		end
		obj = sim:story_object(story_ids.bar_exit_to_rostok)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left", "bar_rostok")
		end

		-- military
		obj = sim:story_object(story_ids.Mil_Exit_to_Bar)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left", "to_bar")
		end
		if has_alife_info("agr_cit_doctor_meet_start") then
			obj = sim:story_object(story_ids.Mil_Exit_to_DeadCity)
			if obj then
				level.map_add_object_spot(obj.id, "level_changer_left", "to_deadcity")
			end
		end
		obj = sim:story_object(story_ids.Mil_Exit_to_Radar)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_right", "to_radar")
		end
		
		-- yantar
		obj = sim:story_object(story_ids.yan_exit_to_rostok)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_right_down", "to_rostok")
		end
		obj = sim:story_object(story_ids.yan_exit_to_swamp)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left", "to_swamp")
		end
		
		-- deadcity
		if has_alife_info("cit_doctor_shows_deadcity_zones") then
			obj = sim:story_object(story_ids.cit_exit_to_military)
			if obj then
				level.map_add_object_spot(obj.id, "level_changer_right", "to_military")
			end
			obj = sim:story_object(story_ids.cit_exit_to_yantar)
			if obj then
				level.map_add_object_spot(obj.id, "level_changer_down", "to_yantar")
			end
		end

		-- radar
		obj = sim:story_object(story_ids.rad_exit_to_pripyat)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_up", "to_pripyat")
		end
		obj = sim:story_object(story_ids.rad_exit_to_military)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_down", "to_military")
		end
--		if has_alife_info("cit_vp_info") then
		obj = sim:story_object(story_ids.rad_exit_to_secrert_lab)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_right", "to_secrert_lab")
		end
--		end

		-- pripyat
		obj = sim:story_object(story_ids.pri_exit_to_radar)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_down", "to_radar")
		end
		obj = sim:story_object(story_ids.pri_exit_to_aes)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_up", "to_aes")
		end
		
		--aes
		obj = sim:story_object(story_ids.aes_exit_to_pripyat)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_down", "to_pripyat")
		end
		if has_alife_info("aes_found_sarcofag") then
			obj = sim:story_object(story_ids.aes_exit_to_sarcofag)
			if obj then
				level.map_add_object_spot(obj.id, "level_changer_down", "to_sarcofag")
			end
		end
		
		-- generators
		if has_alife_info("gen_find_exit_lab_done") then
			obj = sim:story_object(story_ids.gen_exit_to_warlab)
			if obj then
				level.map_add_object_spot(obj.id, "level_changer_down", "to_warlab")
			end
		end
		
		-- darkscape
		obj = sim:story_object(story_ids.ds_exit_to_darkvalley)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left_up", "to_darkvalley")
		end
		obj = sim:story_object(story_ids.ds_exit_to_escape)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_left_up", "to_escape")
		end
		
		-- болота (swamp)
		obj = sim:story_object(story_ids.swm_exit_to_yantar)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_right_down", "to_yantar")
		end
		obj = sim:story_object(story_ids.swm_exit_to_rostok)
		if obj then
			level.map_add_object_spot(obj.id, "level_changer_right", "to_rostok")
		end
		if has_alife_info("swm_actor_know_exit_to_cit") then
			obj = sim:story_object(story_ids.swm_exit_to_deadcity)
			if obj then
				level.map_add_object_spot(obj.id, "level_changer_right", "to_deadcity")
			end
		end


	end
end


function set_task_state(id_state, id_task, id_subtask)
	if db.actor then
		db.actor:set_task_state(id_state, id_task, id_subtask)
	end
end

function notify_new_task()
end
