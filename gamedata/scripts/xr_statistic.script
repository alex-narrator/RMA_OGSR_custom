local killCountProps = {
	neutral_novice = 1, neutral_experienced = 2, neutral_veteran = 3, neutral_master = 4,
	monolith_novice = 1, monolith_experienced = 2, monolith_veteran = 3, monolith_master = 4,
	military_novice = 1, military_experienced = 2, military_veteran = 3, military_master = 4,
	killer_novice = 1, killer_experienced = 2, killer_veteran = 3, killer_master = 4,
	ecolog_novice = 1, ecolog_experienced = 2, ecolog_veteran = 3, ecolog_master = 4,
	dolg_novice = 1, dolg_experienced = 2, dolg_veteran = 3, dolg_master = 4,
	freedom_novice = 1, freedom_experienced = 2, freedom_veteran = 3, freedom_master = 4,
	bandit_novice = 1, bandit_experienced = 2, bandit_veteran = 3, bandit_master = 4,
	zombied_novice = 1, zombied_experienced = 2, zombied_veteran = 3, zombied_master = 4,
	stranger_novice = 1, stranger_experienced = 2, stranger_veteran = 3, stranger_master = 4,
	
	tushkano_weak = 1,
	flesh_weak = 1, flesh_normal = 2, flesh_strong = 3,
	boar_weak = 1, boar_normal = 2, boar_strong = 3,
	dog_weak = 1, dog_normal = 2, dog_strong = 3,
	pseudodog_weak = 1, pseudodog_normal = 2, pseudodog_strong = 3,
	psy_dog_weak = 1, psy_dog_normal = 2, psy_dog_strong = 3,
	snork_weak = 2, snork_normal = 3, snork_strong = 4,
	poltergeist_weak = 2,
	pseudo_gigant_weak = 4,
	controller_weak = 4,
	bloodsucker_weak = 1, bloodsucker_normal = 2, bloodsucker_strong = 3,
	zombie_weak = 1, zombie_normal = 2, zombie_strong = 3,
	burer_weak = 1, burer_normal = 2, burer_strong = 3,
	cat_weak = 1, cat_normal = 2, cat_strong = 3,
	chimera_weak = 1, chimera_normal = 2, chimera_strong = 3,
	fracture_weak = 1, fracture_normal = 2, fracture_strong = 3
	 
	
}

local sect_alias = {	
	tushkano_normal = "tushkano_weak", tushkano_strong = "tushkano_weak",
	poltergeist_normal = "poltergeist_weak", poltergeist_strong = "poltergeist_weak",
	pseudo_gigant_normal = "pseudo_gigant_weak", pseudo_gigant_strong = "pseudo_gigant_weak",
	controller_normal = "controller_weak", controller_strong = "controller_weak",
	psy_dog_weak = "psy_dog", psy_dog_normal = "psy_dog", psy_dog_strong = "psy_dog", rad_psy_dog = "psy_dog",
	zombie_weak = "zombie_weak", zombie_normal  = "zombie_normal", zombie_strong = "zombie_strong",
	burer_weak = "burer_weak", burer_normal = "burer_normal", burer_strong = "burer_strong",
	cat_weak = "cat_weak", cat_normal = "cat_normal", cat_strong = "cat_strong",
	chimera_weak = "chimera_weak", chimera_normal = "chimera_normal", chimera_strong = "chimera_strong",
	fracture_weak = "fracture_weak", fracture_normal = "fracture_normal", fracture_strong = "fracture_strong"
}

monster_classes = {
			[clsid.tushkano_s    ] = "tushkano",
			[clsid.flesh_s       ] = "flesh",
			[clsid.boar_s        ] = "boar",
			[clsid.burer_s       ] = "burer",
			[clsid.cat_s         ] = "cat",
			[clsid.chimera_s     ] = "chimera",
			[clsid.fracture_s    ] = "fracture",
			[clsid.dog_s         ] = "dog",
			[clsid.pseudodog_s   ] = "pseudodog",
			[clsid.psy_dog_s     ] = "psy_dog",
			[clsid.psy_dog_phantom_s] = "NIL",
			[clsid.snork_s       ] = "snork",
			[clsid.poltergeist_s ] = "poltergeist",
			[clsid.gigant_s      ] = "pseudo_gigant",
			[clsid.controller_s  ] = "controller",
			[clsid.bloodsucker_s ] = "bloodsucker",
			[clsid.zombie_s      ] = "zombie"
		}		

function attach(sm)
	sm:subscribe({signal = "on_take", 			fun = this.try_add_item})
	sm:subscribe({signal = "on_pda_actor_info", fun = this.on_info_tab})
	sm:subscribe({signal = "on_death", 			fun = this.addKillCount})
end

function addKillCount(victim, killer)
	if not killer:is_actor() then
	return end
	
	local props, sect = getNpcType(victim)
	if props == nil then
		return
	end

	local sect_name
	if sect_alias[sect] ~= nil then
		sect_name = sect_alias[sect]
	else
		sect_name = sect
	end

	if killCountProps[sect_name] == nil then
--'		print_table(sect_alias)
--'		abort("Statistic ERROR: required section [%s] not present, based [%s]", tostring(sect_name), tostring(sect))
		return
	end
	actor_stats.add_points(props, sect_name, 1, 1)--killCountProps[sect_name])
	actor:change_character_rank(killCountProps[sect_name])
end


function getNpcType(npc)
	local rank = ranks.get_obj_rank_name(npc)
	if npc:is_stalker() then
		return "stalkerkills", npc:character_community().."_"..rank
	else
		local community = monster_classes[get_clsid(npc)]
		if community == nil then
			abort("Statistic ERROR: cannot find monstr class for [%s]", npc:name())
		end
		if community == "NIL" then
			return nil,nil
		end
		return "monsterkills", community.."_"..rank
	end	
end

function try_add_item(item)
	if xr_conditions.black_screen() then
	return end
	if actor:is_talking() then
	return end
	if already_counted(item) then
	return end
	
	if not item:is_artefact() and get_clsid(item) ~= clsid.monster_part_s  
	then return end
	
	alife():object(item:id()).is_taken = true
	
	local sect = item:section()
	local stat_sect = item:is_artefact() and "artefacts" or "trophies"
	actor_stats.add_points(stat_sect, get_inv_name(sect), 1, 1)
	local rank = read_if_exists(sys_ini, "r_u32", sect, "rank", 0)
	actor:change_character_rank(rank)
end
function already_counted(item)
	return alife():object(item:id()).is_taken
end

function on_info_tab()
	while level.get_time_days() > actor_stats.get_points("days_in_game") do
		actor_stats.add_points("days_in_game", game.translate_string("st_days_in_zone"), 1, 1)
	end
end