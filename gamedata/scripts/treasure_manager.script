function attach(sm)
	sm:subscribe({signal = "on_take_from_box",   	fun = this.take_item_from_box})
	--sm:subscribe({signal = "on_npc_use",   			fun = this.on_npc_use})
	--sm:subscribe({signal = "on_pda_hack",   		fun = this.on_pda_hack})
end

local LIST_SECT = "treasure_list"
local TREASURE_SPOT = "treasure"
local treasure_info = {}

function parse_spawns(line)
	if line == nil then
		return {}
	end

	--' если default-ов больше, чем значений в ini, то забить недостающие последним значением из ini
	local t = se_respawn.parse_names(line)
	local n = table.getn(t)
		
	local ret_table = {}
	local k = 1

	while k <= n do
		local spawn = {}
		spawn.section = t[k]
		-- Проверяем что это не последняя запись
		if t[k+1] ~= nil then
			local p = tonumber(t[k+1])
			-- проверяем что вторым числом задана вероятность, а не другая секция спавну
			if p then
				-- забиваем число
				spawn.prob = p
				k = k + 2
			else
				-- забиваем дефолт 1
				spawn.prob = 1
				k = k + 1
			end
		else
			spawn.prob = 1
			k = k + 1
		end
		table.insert(ret_table, spawn)
	end
	return ret_table
end

function has_treasure_spot(treasure_id)
	local sid = treasure_info[treasure_id].target
	local s_obj = alife():story_object( sid )
	return level.map_has_object_spot(s_obj.id, TREASURE_SPOT) ~= 0
end

function parse_treasures()
	ASSERT(sys_ini:section_exist(LIST_SECT), "There is no section [%s] in treasure_manager.ltx", LIST_SECT)
	local n = sys_ini:line_count(LIST_SECT)
	local id, value = "",""

	for i=0,n-1 do
		result, id, value	= sys_ini:r_line(LIST_SECT,i,"","")
		
		treasure_info[id] = {}

		treasure_info[id].target		= read_if_exists(sys_ini, "r_u32", id, "target", nil)
		treasure_info[id].name			= read_if_exists(sys_ini, "r_string", id, "name", "")
		treasure_info[id].description	= read_if_exists(sys_ini, "r_string", id, "description", "")
		treasure_info[id].items			= parse_spawns(read_if_exists(sys_ini, "r_string", id, "items", ""))
		
		ASSERT(table.size(treasure_info[id].items) > 0, "cant find items in treasure %s", id)

		local community	= parse_names(read_if_exists(sys_ini, "r_string", id, "community", "stalker, bandit, dolg, freedom"))
		treasure_info[id].community = {}
		for k,v in pairs(community) do
			treasure_info[id].community[v] = true
		end

		treasure_info[id].condlist		= xr_logic.parse_condlist(actor, "treasure_manager", "condlist", read_if_exists(sys_ini, "r_string", id, "condlist", ""))
	end

	--' Вспомогательные таблицы для облегчения поиска
	treasure_by_target = {}
	for k,v in pairs(treasure_info) do
		treasure_by_target[v.target] = k	
	end
end

parse_treasures()

--' Юзание инициатора (возможность выдать тайник)
function use(npc)
	printf("TREASURE USE")
	
	--' Проверим, не вызывались ли мы уже для этого объекта. 
	local se_obj = alife():object(npc:id())
	if se_obj.treasure_processed == true then
		return
	end
	se_obj.treasure_processed = true
	
	--' Нужно рандомно выбрать один из тайников.
	local avail = {}
	local tr_sum = 0
	for k,v in pairs(treasure_info) do
		--if v.done == false then
		if not has_treasure_spot(k) then
			local treasure_prob = xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)

			if treasure_prob == "" or treasure_prob == nil then
				treasure_prob = 0
			end

			if tonumber(treasure_prob) >= 0 
			and v.community[npc:character_community()] == true 
			--and v.active == false
			then
				if tonumber(treasure_prob) == 100 then
					self:give_treasure(k)
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end

	if tr_sum == 0 or
		math.random(100) < 65
	then
		return
	end

	local tr_w = math.random(tr_sum)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			--' Выдать тайник
			self:give_treasure(v.k)
			break
		end
	end
end

function hack_pda(id)
	--' Нужно рандомно выбрать один из тайников.
	local se_obj = alife():object(id)
	local od = se_obj.owner_data
	
	local avail = {}
	local tr_sum = 0
	for k,v in pairs(treasure_info) do
		--if v.done == false then
		if not has_treasure_spot(k) then
			local treasure_prob = xr_logic.pick_section_from_condlist(actor, od, v.condlist)

			if treasure_prob == "" or treasure_prob == nil then
				treasure_prob = 0
			end

			if tonumber(treasure_prob) >= 0 
			and v.community[od.comm] == true 
			--and v.active == false
			then
				if tonumber(treasure_prob) == 100 then
					self:give_treasure(k)
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end

	if tr_sum == 0 or
		math.random(100) < 65
	then
		return
	end

	local tr_w = math.random(tr_sum)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			--' Выдать тайник
			self:give_treasure(v.k)
			break
		end
	end
end

function try_get_treasure(npc)
	--' Нужно рандомно выбрать один из тайников.
	local avail = {}
	local tr_sum = 0
	for k,v in pairs(treasure_info) do
		--if v.done == false then
		if not has_treasure_spot(k) then
			local treasure_prob = xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)

			if treasure_prob == "" or treasure_prob == nil then
				treasure_prob = 0
			end

			if tonumber(treasure_prob) >= 0 
			and v.community[npc:character_community()] == true 
			--and v.active == false
			then
				if tonumber(treasure_prob) == 100 then
					return k
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end

	if tr_sum == 0 or
		math.random(100) < 65
	then
		return ""
	end

	local tr_w = math.random(tr_sum)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			--' Выдать тайник
			return v.k
		end
	end
	
	return ""
end

--' Выдача тайника
function give_treasure(k)
	if has_treasure_spot(k) then
	return end
	local v = treasure_info[k]
	local obj = alife():story_object(v.target)
	if obj then
		news_manager.send_treasure(v.name)

		--' Пометить на карте		
		local text = "%c[255,238,155,23]"..game.translate_string(v.name).."\\n".."%c[default]"..game.translate_string(v.description)
		level.map_add_object_spot_ser(obj.id, "treasure", text)
		ogse_signals.get_mgr():call("on_give_treasure", obj.id, v.name)

		--' Сгенерить вещи
		for kk,vv in pairs(v.items) do
			if is_ammo(vv.section) == true then
				spawn_ammo_to_owner(vv.section, obj.id, vv.prob)
			else
				for i=1,vv.prob do
					spawn_to_owner(vv.section, obj.id)
				end
			end
		end
		
		--' Пометим тайник как выданный
		-- treasure_info[k].active = true
		-- treasure_info[k].done = true
	else
		printf("TREASURE %s, target doesnt exist", k)
	end
end
--' Снимаем отметку с тайника
function treasure_empty(box)
	printf("!!! treasure empty")
	local k = treasure_by_target[box:story_id()]

	if not k or not treasure_info[k] then 
		return
	end

	--treasure_info[k].active = false
	level.map_remove_object_spot(box:id(), "treasure")
end

function take_item_from_box(box, item, sobj)
	if not box:story_id() then
	return end
	--log3("!!! take item from box %s", box:name())
	if box:is_inv_box_empty() == true then
		treasure_empty(box)
	end
end

function on_npc_use(npc)
	if npc:alive() then return end
	use(npc)
end

function on_pda_hack(id)
	hack_pda(id)
end