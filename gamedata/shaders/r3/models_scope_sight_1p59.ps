#include "common.h"

// uniform float4x4 m_script_params; //Не используется, зарезервировано на будущее.

uniform float4 m_hud_params; // zoom_rotate_factor, secondVP_zoom_factor, NULL, NULL

#include "pnv.h"
#include "mark_adjust.h"

Texture2D s_vp2;
Texture2D s_inside;
Texture2D s_dirt;
Texture2D s_lens;

Texture2D s_1p59_stable;
Texture2D s_1p59_dynamic;

float4 scope_params; // fake_zoom, vignette, chromatic_aberration, crosshair_size_k
float4 scope_color; // RGBA
float4 weapon_params;

#define SMOOTH_MODE bool (false)

struct v2p
{
    float2 tc0 : TEXCOORD0; // base
    float3 tc1 : TEXCOORD1; // environment
    float4 c0 : COLOR0; // sun.(fog*fog)
	float4 pos2d: SV_Position; // position
};

//////////////////////////////////////////////////////////////////////////////////////////

float resize(float input, float factor, float offset) { return (input - 0.5f + offset) / factor + 0.5f - offset; }

float4 calc_vignette(float2 tc0, float4 color, float vignette_size)
{
	if(SMOOTH_MODE)
	{
		color *= smoothstep(0.55f, 0.4f, vignette_size * distance(aspect_ratio_correction(tc0), float2(0.5f, 0.5f)));
	}
	else
	{
		color *= smoothstep(0.55f, 0.4f, vignette_size * distance(tc0, float2(0.5f, 0.5f)));
	}
	return color;
}

float2 calc_rotation(float2 tc, float2 pivot, float angle)
{
	tc = tc - 0.5f;
	tc = float2(tc.x * cos(angle) - tc.y * sin(angle), tc.x * sin(angle) + tc.y * cos(angle));
	tc = tc + 0.5f;
	return tc;
}

float giperon_angle(float zoom_k)
{
	if(zoom_k > 3)
		return 1;
	if(zoom_k == 3)
		return 0.925;
	if(zoom_k > 2.6)	
		return 0.824;
	if(zoom_k > 2.3)	
		return 0.708;
	if(zoom_k == 2)	
		return 0.575;
	if(zoom_k > 1.6)	
		return 0.428;
	if(zoom_k > 1.3)	
		return 0.244;
	return 0.051;
}
//////////////////////////////////////////////////////////////////////////////////////////

float4 main(v2p I) : SV_Target
{
	if(m_hud_params.x < 0.85f || m_hud_params.w > 0.f || weapon_params.x > 0.f || weapon_params.y > 0.f)
	{
		float4 t_lense = s_lens.Sample(smp_rtlinear, I.tc0);
		return t_lense;
	}
	
	float FAKE_ZOOM_K = scope_params.x;
	float VIGNETTE = scope_params.y;
	float CHROM_ABBER = scope_params.z;
	float CROSSHAIR_SIZE_K = scope_params.w;
	
	float2 crosshair_tc = I.tc0;
	if (CROSSHAIR_SIZE_K != 0)
	{
		crosshair_tc.x = resize(crosshair_tc.x, CROSSHAIR_SIZE_K, 0);
		crosshair_tc.y = resize(crosshair_tc.y, CROSSHAIR_SIZE_K, 0);
	}	
	if(markswitch_params.y > 0)
		crosshair_tc = mark_adjust(crosshair_tc);

	float4 t_base = s_base.Sample(smp_base, crosshair_tc); // Текстура сетки

	if(SMOOTH_MODE)
	{
		// Растягиваем картинку в линзе так, чтобы на любом разрешении экрана были правильные пропорции
		I.tc0.x = resize(I.tc0.x, screen_res.x / screen_res.y, 0);
	}
	
	if(FAKE_ZOOM_K > 0.f)
	{
		// масштабуємо зображення
		if(SMOOTH_MODE)
		{
			I.tc0.x = resize(I.tc0.x, FAKE_ZOOM_K, 0);
			I.tc0.y = resize(I.tc0.y, FAKE_ZOOM_K, 0);
		}
		else
		{
			I.pos2d.x = resize(I.pos2d.x, FAKE_ZOOM_K, -screen_res.x * 0.5f);
			I.pos2d.y = resize(I.pos2d.y, FAKE_ZOOM_K, -screen_res.y * 0.5f);
		}
	}
	
	// Изображение со второго вьюпорта
	float4 t_vp2;
	if(SMOOTH_MODE)
	{
		t_vp2 = s_vp2.Sample(smp_base, I.tc0);
	}
	else
	{
		t_vp2 = s_vp2.Load(I.pos2d.xyz);
	}

	if(CHROM_ABBER > 0.f)
	{
		if(SMOOTH_MODE)
		{
			t_vp2.r = s_vp2.Sample(smp_base, I.tc0 + (float2(-CHROM_ABBER, 0))).r;
			t_vp2.g = s_vp2.Sample(smp_base, I.tc0).g;
			t_vp2.b = s_vp2.Sample(smp_base, I.tc0 + (float2(CHROM_ABBER, 0))).b;
			t_vp2.a = s_vp2.Sample(smp_base, I.tc0).a;
		}
		else
		{
			t_vp2.r = s_vp2.Load(I.pos2d.xyz + (float3(-CHROM_ABBER, 0, 0))).r;
			t_vp2.g = s_vp2.Load(I.pos2d.xyz).g;
			t_vp2.b = s_vp2.Load(I.pos2d.xyz + (float3(CHROM_ABBER, 0, 0))).b;
			t_vp2.a = s_vp2.Load(I.pos2d.xyz).a;
		}
	}
	if (VIGNETTE > 0.f)
	{
		if(SMOOTH_MODE)
			VIGNETTE *= FAKE_ZOOM_K;
		t_vp2.rgb = calc_vignette(I.tc0, t_vp2, VIGNETTE);
	}
	if (pnv_color.w > 1.f)
		t_vp2.rgb = calc_night_vision_effect(I.tc0, t_vp2);

	t_vp2.rgb += scope_color.xyz;

    // Миксуем всё и собираем финальную картинку
    float3 final = lerp(t_vp2, t_base, t_base.a); // Сетку с вьюпортом
	
	//оверлей для 1п59
	float reticle_overlay_size_k = 0.8f;
	float2 giperon_tc = I.tc0;
	giperon_tc.x = resize(giperon_tc.x, reticle_overlay_size_k, 0);
	giperon_tc.y = resize(giperon_tc.y, reticle_overlay_size_k, 0);	
	//нерухома частина
	float4 t_1p59_stable = s_1p59_stable.Sample(smp_base, giperon_tc);
	//рухома частина
	final = lerp(final, t_1p59_stable, t_1p59_stable.a);
	float angle = -3.14f * giperon_angle(CROSSHAIR_SIZE_K);
	giperon_tc = calc_rotation(giperon_tc, .5f, angle);
	float4 t_1p59_dynamic = s_1p59_dynamic.Sample(smp_base, giperon_tc);	
	final = lerp(final, t_1p59_dynamic, t_1p59_dynamic.a);	

    // out
    return float4(final, 1.0);
}